{"ast":null,"code":"import request from '@/utils/request';\nexport const auth = {\n  // 密码登录\n  loginWithPassword: async data => {\n    try {\n      const response = await request.post('/api/v1/users/auth/login/password/', {\n        account: data.account,\n        password: data.password\n      });\n      if (response.data?.code === 200) {\n        // 立即设置 token\n        const token = response.data.data.access;\n        if (token) {\n          request.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        }\n      }\n      return response;\n    } catch (error) {\n      console.error('Login request failed:', error);\n      throw error;\n    }\n  },\n  // 退出登录\n  logout: async () => {\n    const refreshToken = localStorage.getItem('refresh_token');\n    if (!refreshToken) return;\n    try {\n      await request.post('/api/v1/users/auth/logout/', {\n        refresh: refreshToken\n      });\n    } finally {\n      // 无论请求是否成功，都清除本地存储\n      localStorage.clear();\n    }\n  },\n  // 刷新 token\n  refreshToken: data => {\n    return request.post('/api/v1/users/auth/token/refresh/', data);\n  },\n  // 更新用户名（昵称）\n  updateUsername: data => {\n    return request.post('/api/v1/users/account/username/', data);\n  },\n  // 发送验证码\n  sendVerifyCode: data => {\n    // 验证必要参数\n    if (!data.phone || !data.scene) {\n      throw new Error('手机号和场景参数不能为空');\n    }\n\n    // 验证场景是否有效\n    const validScenes = ['register', 'login', 'reset_password', 'change_phone'];\n    if (!validScenes.includes(data.scene)) {\n      throw new Error('无效的场景类型');\n    }\n    return request({\n      url: '/api/v1/users/auth/sms/send/',\n      method: 'post',\n      data: {\n        phone: data.phone,\n        scene: data.scene\n      }\n    });\n  },\n  // 重置密码\n  resetPassword: async data => {\n    return request.post('/api/v1/users/auth/password/reset/', {\n      phone: data.phone,\n      code: data.code,\n      new_password: data.new_password,\n      confirm_password: data.confirm_password\n    });\n  },\n  // 注册\n  register: async data => {\n    return request.post('/api/v1/users/auth/register/', {\n      phone: data.phone,\n      code: data.code,\n      password: data.password,\n      confirm_password: data.confirmPassword\n    });\n  },\n  // 密码登录\n  passwordLogin(data) {\n    return request({\n      url: '/api/v1/users/auth/login/password/',\n      method: 'post',\n      data: {\n        account: data.account,\n        password: data.password\n      }\n    });\n  }\n};\nexport default auth;","map":{"version":3,"names":["request","auth","loginWithPassword","data","response","post","account","password","code","token","access","defaults","headers","common","error","console","logout","refreshToken","localStorage","getItem","refresh","clear","updateUsername","sendVerifyCode","phone","scene","Error","validScenes","includes","url","method","resetPassword","new_password","confirm_password","register","confirmPassword","passwordLogin"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/api/auth.js"],"sourcesContent":["import request from '@/utils/request'\n\nexport const auth = {\n  // 密码登录\n  loginWithPassword: async (data) => {\n    try {\n      const response = await request.post('/api/v1/users/auth/login/password/', {\n        account: data.account,\n        password: data.password\n      })\n      if (response.data?.code === 200) {\n        // 立即设置 token\n        const token = response.data.data.access\n        if (token) {\n          request.defaults.headers.common['Authorization'] = `Bearer ${token}`\n        }\n      }\n      return response\n    } catch (error) {\n      console.error('Login request failed:', error)\n      throw error\n    }\n  },\n  \n  // 退出登录\n  logout: async () => {\n    const refreshToken = localStorage.getItem('refresh_token')\n    if (!refreshToken) return\n    try {\n      await request.post('/api/v1/users/auth/logout/', { refresh: refreshToken })\n    } finally {\n      // 无论请求是否成功，都清除本地存储\n      localStorage.clear()\n    }\n  },\n  \n  // 刷新 token\n  refreshToken: (data) => {\n    return request.post('/api/v1/users/auth/token/refresh/', data)\n  },\n  \n  // 更新用户名（昵称）\n  updateUsername: (data) => {\n    return request.post('/api/v1/users/account/username/', data)\n  },\n  \n  // 发送验证码\n  sendVerifyCode: (data) => {\n    // 验证必要参数\n    if (!data.phone || !data.scene) {\n      throw new Error('手机号和场景参数不能为空')\n    }\n    \n    // 验证场景是否有效\n    const validScenes = ['register', 'login', 'reset_password', 'change_phone']\n    if (!validScenes.includes(data.scene)) {\n      throw new Error('无效的场景类型')\n    }\n    \n    return request({\n      url: '/api/v1/users/auth/sms/send/',\n      method: 'post',\n      data: {\n        phone: data.phone,\n        scene: data.scene\n      }\n    })\n  },\n  \n  // 重置密码\n  resetPassword: async (data) => {\n    return request.post('/api/v1/users/auth/password/reset/', {\n      phone: data.phone,\n      code: data.code,\n      new_password: data.new_password,\n      confirm_password: data.confirm_password\n    })\n  },\n  \n  // 注册\n  register: async (data) => {\n    return request.post('/api/v1/users/auth/register/', {\n      phone: data.phone,\n      code: data.code,\n      password: data.password,\n      confirm_password: data.confirmPassword\n    })\n  },\n  \n  // 密码登录\n  passwordLogin(data) {\n    return request({\n      url: '/api/v1/users/auth/login/password/',\n      method: 'post',\n      data: {\n        account: data.account,\n        password: data.password\n      }\n    })\n  }\n}\n\nexport default auth "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}