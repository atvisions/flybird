{"ast":null,"code":"import axios from 'axios';\nimport { STORAGE_KEYS } from '@/utils/storage';\nimport config from '@/config';\nconst service = axios.create({\n  baseURL: import.meta.env.VITE_API_BASE_URL,\n  timeout: 20000,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  retry: 3,\n  retryDelay: 1000\n});\n\n// 添加重试拦截器\nservice.interceptors.response.use(undefined, async err => {\n  const config = err.config;\n\n  // 如果配置不存在或未设置重试选项，直接返回错误\n  if (!config || !config.retry) {\n    return Promise.reject(err);\n  }\n\n  // 设置重试次数\n  config.__retryCount = config.__retryCount || 0;\n\n  // 检查是否已超过重试次数\n  if (config.__retryCount >= config.retry) {\n    return Promise.reject(err);\n  }\n\n  // 增加重试次数\n  config.__retryCount += 1;\n  console.log(`Retrying request (${config.__retryCount}/${config.retry})`);\n\n  // 创建新的 Promise 来处理重试延迟\n  const backoff = new Promise(resolve => {\n    setTimeout(() => {\n      resolve();\n    }, config.retryDelay || 1000);\n  });\n\n  // 等待延迟后重试请求\n  await backoff;\n  return service(config);\n});\n\n// 请求拦截器\nservice.interceptors.request.use(config => {\n  const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  console.log('Request:', {\n    url: config.url,\n    method: config.method,\n    headers: config.headers,\n    data: config.data\n  });\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(response => {\n  return response;\n}, error => {\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","STORAGE_KEYS","config","service","create","baseURL","import","meta","env","VITE_API_BASE_URL","timeout","headers","retry","retryDelay","interceptors","response","use","undefined","err","Promise","reject","__retryCount","console","log","backoff","resolve","setTimeout","request","token","localStorage","getItem","TOKEN","url","method","data","error"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport { STORAGE_KEYS } from '@/utils/storage'\nimport config from '@/config'\n\nconst service = axios.create({\n  baseURL: import.meta.env.VITE_API_BASE_URL,\n  timeout: 20000,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  retry: 3,\n  retryDelay: 1000\n})\n\n// 添加重试拦截器\nservice.interceptors.response.use(undefined, async (err) => {\n  const config = err.config;\n  \n  // 如果配置不存在或未设置重试选项，直接返回错误\n  if (!config || !config.retry) {\n    return Promise.reject(err);\n  }\n  \n  // 设置重试次数\n  config.__retryCount = config.__retryCount || 0;\n  \n  // 检查是否已超过重试次数\n  if (config.__retryCount >= config.retry) {\n    return Promise.reject(err);\n  }\n  \n  // 增加重试次数\n  config.__retryCount += 1;\n  console.log(`Retrying request (${config.__retryCount}/${config.retry})`);\n  \n  // 创建新的 Promise 来处理重试延迟\n  const backoff = new Promise((resolve) => {\n    setTimeout(() => {\n      resolve();\n    }, config.retryDelay || 1000);\n  });\n  \n  // 等待延迟后重试请求\n  await backoff;\n  return service(config);\n});\n\n// 请求拦截器\nservice.interceptors.request.use(\n  config => {\n    const token = localStorage.getItem(STORAGE_KEYS.TOKEN)\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`\n    }\n    console.log('Request:', {\n      url: config.url,\n      method: config.method,\n      headers: config.headers,\n      data: config.data\n    })\n    return config\n  },\n  error => {\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\nservice.interceptors.response.use(\n  response => {\n    return response\n  },\n  error => {\n    return Promise.reject(error)\n  }\n)\n\nexport default service"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,OAAOC,MAAM,MAAM,UAAU;AAE7B,MAAMC,OAAO,GAAGH,KAAK,CAACI,MAAM,CAAC;EAC3BC,OAAO,EAAEC,MAAM,CAACC,IAAI,CAACC,GAAG,CAACC,iBAAiB;EAC1CC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,KAAK,EAAE,CAAC;EACRC,UAAU,EAAE;AACd,CAAC,CAAC;;AAEF;AACAV,OAAO,CAACW,YAAY,CAACC,QAAQ,CAACC,GAAG,CAACC,SAAS,EAAE,MAAOC,GAAG,IAAK;EAC1D,MAAMhB,MAAM,GAAGgB,GAAG,CAAChB,MAAM;;EAEzB;EACA,IAAI,CAACA,MAAM,IAAI,CAACA,MAAM,CAACU,KAAK,EAAE;IAC5B,OAAOO,OAAO,CAACC,MAAM,CAACF,GAAG,CAAC;EAC5B;;EAEA;EACAhB,MAAM,CAACmB,YAAY,GAAGnB,MAAM,CAACmB,YAAY,IAAI,CAAC;;EAE9C;EACA,IAAInB,MAAM,CAACmB,YAAY,IAAInB,MAAM,CAACU,KAAK,EAAE;IACvC,OAAOO,OAAO,CAACC,MAAM,CAACF,GAAG,CAAC;EAC5B;;EAEA;EACAhB,MAAM,CAACmB,YAAY,IAAI,CAAC;EACxBC,OAAO,CAACC,GAAG,CAAC,qBAAqBrB,MAAM,CAACmB,YAAY,IAAInB,MAAM,CAACU,KAAK,GAAG,CAAC;;EAExE;EACA,MAAMY,OAAO,GAAG,IAAIL,OAAO,CAAEM,OAAO,IAAK;IACvCC,UAAU,CAAC,MAAM;MACfD,OAAO,CAAC,CAAC;IACX,CAAC,EAAEvB,MAAM,CAACW,UAAU,IAAI,IAAI,CAAC;EAC/B,CAAC,CAAC;;EAEF;EACA,MAAMW,OAAO;EACb,OAAOrB,OAAO,CAACD,MAAM,CAAC;AACxB,CAAC,CAAC;;AAEF;AACAC,OAAO,CAACW,YAAY,CAACa,OAAO,CAACX,GAAG,CAC9Bd,MAAM,IAAI;EACR,MAAM0B,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC7B,YAAY,CAAC8B,KAAK,CAAC;EACtD,IAAIH,KAAK,EAAE;IACT1B,MAAM,CAACS,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUiB,KAAK,EAAE;EACrD;EACAN,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE;IACtBS,GAAG,EAAE9B,MAAM,CAAC8B,GAAG;IACfC,MAAM,EAAE/B,MAAM,CAAC+B,MAAM;IACrBtB,OAAO,EAAET,MAAM,CAACS,OAAO;IACvBuB,IAAI,EAAEhC,MAAM,CAACgC;EACf,CAAC,CAAC;EACF,OAAOhC,MAAM;AACf,CAAC,EACDiC,KAAK,IAAI;EACP,OAAOhB,OAAO,CAACC,MAAM,CAACe,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAhC,OAAO,CAACW,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC/BD,QAAQ,IAAI;EACV,OAAOA,QAAQ;AACjB,CAAC,EACDoB,KAAK,IAAI;EACP,OAAOhB,OAAO,CAACC,MAAM,CAACe,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAehC,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}