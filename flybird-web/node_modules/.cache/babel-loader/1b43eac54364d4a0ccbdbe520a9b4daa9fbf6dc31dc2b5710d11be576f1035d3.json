{"ast":null,"code":"import _objectSpread from \"/Users/liuzhao/Documents/Projects/flybird/flybird-web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { createVNode as _createVNode, mergeProps as _mergeProps, resolveDirective as _resolveDirective } from \"vue\";\n// Components\nimport { makeVBarlineProps, VBarline } from \"./VBarline.mjs\";\nimport { makeVTrendlineProps, VTrendline } from \"./VTrendline.mjs\"; // Composables\nimport { useTextColor } from \"../../composables/color.mjs\"; // Utilities\nimport { computed, toRef } from 'vue';\nimport { genericComponent, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\n// Types\n\nexport const makeVSparklineProps = propsFactory(_objectSpread(_objectSpread({\n  type: {\n    type: String,\n    default: 'trend'\n  }\n}, makeVBarlineProps()), makeVTrendlineProps()), 'VSparkline');\nexport const VSparkline = genericComponent()({\n  name: 'VSparkline',\n  props: makeVSparklineProps(),\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const {\n      textColorClasses,\n      textColorStyles\n    } = useTextColor(toRef(props, 'color'));\n    const hasLabels = computed(() => {\n      return Boolean(props.showLabels || props.labels.length > 0 || !!slots?.label);\n    });\n    const totalHeight = computed(() => {\n      let height = parseInt(props.height, 10);\n      if (hasLabels.value) height += parseInt(props.labelSize, 10) * 1.5;\n      return height;\n    });\n    useRender(() => {\n      const Tag = props.type === 'trend' ? VTrendline : VBarline;\n      const lineProps = props.type === 'trend' ? VTrendline.filterProps(props) : VBarline.filterProps(props);\n      return _createVNode(Tag, _mergeProps({\n        \"key\": props.type,\n        \"class\": textColorClasses.value,\n        \"style\": textColorStyles.value,\n        \"viewBox\": `0 0 ${props.width} ${parseInt(totalHeight.value, 10)}`\n      }, lineProps), slots);\n    });\n  }\n});","map":{"version":3,"names":["makeVBarlineProps","VBarline","makeVTrendlineProps","VTrendline","useTextColor","computed","toRef","genericComponent","propsFactory","useRender","makeVSparklineProps","_objectSpread","type","String","default","VSparkline","name","props","setup","_ref","slots","textColorClasses","textColorStyles","hasLabels","Boolean","showLabels","labels","length","label","totalHeight","height","parseInt","value","labelSize","Tag","lineProps","filterProps","_createVNode","_mergeProps","width"],"sources":["../../../src/components/VSparkline/VSparkline.tsx"],"sourcesContent":["// Components\nimport { makeVBarlineProps, VBarline } from './VBarline'\nimport { makeVTrendlineProps, VTrendline } from './VTrendline'\n\n// Composables\nimport { useTextColor } from '@/composables/color'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\n// Types\n\nexport const makeVSparklineProps = propsFactory({\n  type: {\n    type: String as PropType<'trend' | 'bar'>,\n    default: 'trend',\n  },\n\n  ...makeVBarlineProps(),\n  ...makeVTrendlineProps(),\n}, 'VSparkline')\n\nexport type VSparklineSlots = {\n  default: void\n  label: { index: number, value: string }\n}\n\nexport const VSparkline = genericComponent<VSparklineSlots>()({\n  name: 'VSparkline',\n\n  props: makeVSparklineProps(),\n\n  setup (props, { slots }) {\n    const { textColorClasses, textColorStyles } = useTextColor(toRef(props, 'color'))\n    const hasLabels = computed(() => {\n      return Boolean(\n        props.showLabels ||\n        props.labels.length > 0 ||\n        !!slots?.label\n      )\n    })\n    const totalHeight = computed(() => {\n      let height = parseInt(props.height, 10)\n\n      if (hasLabels.value) height += parseInt(props.labelSize, 10) * 1.5\n\n      return height\n    })\n\n    useRender(() => {\n      const Tag = props.type === 'trend' ? VTrendline : VBarline\n      const lineProps = props.type === 'trend' ? VTrendline.filterProps(props) : VBarline.filterProps(props)\n\n      return (\n        <Tag\n          key={ props.type }\n          class={ textColorClasses.value }\n          style={ textColorStyles.value }\n          viewBox={ `0 0 ${props.width} ${parseInt(totalHeight.value, 10)}` }\n          { ...lineProps }\n          v-slots={ slots }\n        />\n      )\n    })\n  },\n})\n\nexport type VSparkline = InstanceType<typeof VSparkline>\n"],"mappings":";;AAAA;AAAA,SACSA,iBAAiB,EAAEC,QAAQ;AAAA,SAC3BC,mBAAmB,EAAEC,UAAU,4BAExC;AAAA,SACSC,YAAY,uCAErB;AACA,SAASC,QAAQ,EAAEC,KAAK,QAAQ,KAAK;AAAA,SAC5BC,gBAAgB,EAAEC,YAAY,EAAEC,SAAS,gCAElD;AAGA;;AAEA,OAAO,MAAMC,mBAAmB,GAAGF,YAAY,CAAAG,aAAA,CAAAA,aAAA;EAC7CC,IAAI,EAAE;IACJA,IAAI,EAAEC,MAAmC;IACzCC,OAAO,EAAE;EACX;AAAC,GAEEd,iBAAiB,CAAC,CAAC,GACnBE,mBAAmB,CAAC,IACtB,YAAY,CAAC;AAOhB,OAAO,MAAMa,UAAU,GAAGR,gBAAgB,CAAkB,CAAC,CAAC;EAC5DS,IAAI,EAAE,YAAY;EAElBC,KAAK,EAAEP,mBAAmB,CAAC,CAAC;EAE5BQ,KAAKA,CAAED,KAAK,EAAAE,IAAA,EAAa;IAAA,IAAX;MAAEC;IAAM,CAAC,GAAAD,IAAA;IACrB,MAAM;MAAEE,gBAAgB;MAAEC;IAAgB,CAAC,GAAGlB,YAAY,CAACE,KAAK,CAACW,KAAK,EAAE,OAAO,CAAC,CAAC;IACjF,MAAMM,SAAS,GAAGlB,QAAQ,CAAC,MAAM;MAC/B,OAAOmB,OAAO,CACZP,KAAK,CAACQ,UAAU,IAChBR,KAAK,CAACS,MAAM,CAACC,MAAM,GAAG,CAAC,IACvB,CAAC,CAACP,KAAK,EAAEQ,KACX,CAAC;IACH,CAAC,CAAC;IACF,MAAMC,WAAW,GAAGxB,QAAQ,CAAC,MAAM;MACjC,IAAIyB,MAAM,GAAGC,QAAQ,CAACd,KAAK,CAACa,MAAM,EAAE,EAAE,CAAC;MAEvC,IAAIP,SAAS,CAACS,KAAK,EAAEF,MAAM,IAAIC,QAAQ,CAACd,KAAK,CAACgB,SAAS,EAAE,EAAE,CAAC,GAAG,GAAG;MAElE,OAAOH,MAAM;IACf,CAAC,CAAC;IAEFrB,SAAS,CAAC,MAAM;MACd,MAAMyB,GAAG,GAAGjB,KAAK,CAACL,IAAI,KAAK,OAAO,GAAGT,UAAU,GAAGF,QAAQ;MAC1D,MAAMkC,SAAS,GAAGlB,KAAK,CAACL,IAAI,KAAK,OAAO,GAAGT,UAAU,CAACiC,WAAW,CAACnB,KAAK,CAAC,GAAGhB,QAAQ,CAACmC,WAAW,CAACnB,KAAK,CAAC;MAEtG,OAAAoB,YAAA,CAAAH,GAAA,EAAAI,WAAA;QAAA,OAEUrB,KAAK,CAACL,IAAI;QAAA,SACRS,gBAAgB,CAACW,KAAK;QAAA,SACtBV,eAAe,CAACU,KAAK;QAAA,WACnB,OAAOf,KAAK,CAACsB,KAAK,IAAIR,QAAQ,CAACF,WAAW,CAACG,KAAK,EAAE,EAAE,CAAC;MAAE,GAC5DG,SAAS,GACJf,KAAK;IAGrB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}