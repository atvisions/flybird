{"ast":null,"code":"import { ref, computed, onMounted, defineAsyncComponent } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { useAuthStore } from '@/stores/auth';\nexport default {\n  __name: 'App',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const router = useRouter();\n    const authStore = useAuthStore();\n\n    // 不需要登录的路由\n    const publicRoutes = ['/login', '/register', '/reset-password'];\n\n    // Toast 相关状态\n    const toastMessage = ref('');\n    const toastType = ref('info');\n    const toastDuration = ref(3000);\n\n    // 处理 Toast 销毁\n    const handleToastDestroy = () => {\n      toastMessage.value = '';\n      toastType.value = 'info';\n    };\n\n    // 计算是否显示头部和底部\n    const showHeaderAndFooter = computed(() => {\n      const path = router.currentRoute.value.path;\n      return !publicRoutes.includes(path);\n    });\n\n    // 计算是否显示登录按钮\n    const showLoginButton = computed(() => !authStore.isAuthenticated);\n    onMounted(() => {\n      // 检查认证状态\n      if (!authStore.isAuthenticated) {\n        const currentPath = router.currentRoute.value.path;\n        // 只有非公开路由才需要重定向到登录页\n        if (!publicRoutes.includes(currentPath)) {\n          // 保存当前路径用于登录后重定向\n          const redirect = encodeURIComponent(currentPath);\n          router.push(`/login?redirect=${redirect}`);\n        }\n      }\n    });\n\n    // 异步导入组件\n    const HeadView = defineAsyncComponent(() => import('@/components/HeadView.vue'));\n    const FootView = defineAsyncComponent(() => import('@/components/FootView.vue'));\n    const ToastMessage = defineAsyncComponent(() => import('@/components/ToastMessage.vue'));\n    const __returned__ = {\n      router,\n      authStore,\n      publicRoutes,\n      toastMessage,\n      toastType,\n      toastDuration,\n      handleToastDestroy,\n      showHeaderAndFooter,\n      showLoginButton,\n      HeadView,\n      FootView,\n      ToastMessage,\n      ref,\n      computed,\n      onMounted,\n      defineAsyncComponent,\n      get useRouter() {\n        return useRouter;\n      },\n      get useAuthStore() {\n        return useAuthStore;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","defineAsyncComponent","useRouter","useAuthStore","router","authStore","publicRoutes","toastMessage","toastType","toastDuration","handleToastDestroy","value","showHeaderAndFooter","path","currentRoute","includes","showLoginButton","isAuthenticated","currentPath","redirect","encodeURIComponent","push","HeadView","FootView","ToastMessage"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/App.vue"],"sourcesContent":["<template>\n  <div class=\"min-h-screen bg-gray-50\">\n    <!-- 头部导航 -->\n    <HeadView v-if=\"showHeaderAndFooter\" />\n    \n    <!-- 主要内容区域 -->\n    <main>\n      <router-view></router-view>\n    </main>\n    \n    <!-- 底部 -->\n    <FootView v-if=\"showHeaderAndFooter\" />\n    \n    <!-- Toast 消息组件 -->\n    <ToastMessage \n      v-if=\"toastMessage\"\n      :message=\"toastMessage\"\n      :type=\"toastType\"\n      :duration=\"toastDuration\"\n      @destroy=\"handleToastDestroy\"\n    />\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted, defineAsyncComponent } from 'vue'\nimport { useRouter } from 'vue-router'\nimport { useAuthStore } from '@/stores/auth'\n\nconst router = useRouter()\nconst authStore = useAuthStore()\n\n// 不需要登录的路由\nconst publicRoutes = ['/login', '/register', '/reset-password']\n\n// Toast 相关状态\nconst toastMessage = ref('')\nconst toastType = ref('info')\nconst toastDuration = ref(3000)\n\n// 处理 Toast 销毁\nconst handleToastDestroy = () => {\n  toastMessage.value = ''\n  toastType.value = 'info'\n}\n\n// 计算是否显示头部和底部\nconst showHeaderAndFooter = computed(() => {\n  const path = router.currentRoute.value.path\n  return !publicRoutes.includes(path)\n})\n\n// 计算是否显示登录按钮\nconst showLoginButton = computed(() => !authStore.isAuthenticated)\n\nonMounted(() => {\n  // 检查认证状态\n  if (!authStore.isAuthenticated) {\n    const currentPath = router.currentRoute.value.path\n    // 只有非公开路由才需要重定向到登录页\n    if (!publicRoutes.includes(currentPath)) {\n      // 保存当前路径用于登录后重定向\n      const redirect = encodeURIComponent(currentPath)\n      router.push(`/login?redirect=${redirect}`)\n    }\n  }\n})\n\n// 异步导入组件\nconst HeadView = defineAsyncComponent(() => import('@/components/HeadView.vue'))\nconst FootView = defineAsyncComponent(() => import('@/components/FootView.vue'))\nconst ToastMessage = defineAsyncComponent(() => import('@/components/ToastMessage.vue'))\n</script>\n\n<style>\n.app-wrapper {\n  position: relative;\n  min-height: 100vh;\n}\n\n.bg-image {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 0;\n  pointer-events: none;\n}\n\n/* 可选：添加一个半透明遮罩让内容更易读 */\n.bg-image::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(255, 255, 255, 0.8);\n}\n\n/* 确保内容在背景之上 */\n.app-wrapper > *:not(.bg-image) {\n  position: relative;\n  z-index: 1;\n}\n</style>"],"mappings":"AAyBA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,oBAAoB,QAAQ,KAAI;AACnE,SAASC,SAAS,QAAQ,YAAW;AACrC,SAASC,YAAY,QAAQ,eAAc;;;;;;;IAE3C,MAAMC,MAAM,GAAGF,SAAS,CAAC;IACzB,MAAMG,SAAS,GAAGF,YAAY,CAAC;;IAE/B;IACA,MAAMG,YAAY,GAAG,CAAC,QAAQ,EAAE,WAAW,EAAE,iBAAiB;;IAE9D;IACA,MAAMC,YAAY,GAAGT,GAAG,CAAC,EAAE;IAC3B,MAAMU,SAAS,GAAGV,GAAG,CAAC,MAAM;IAC5B,MAAMW,aAAa,GAAGX,GAAG,CAAC,IAAI;;IAE9B;IACA,MAAMY,kBAAkB,GAAGA,CAAA,KAAM;MAC/BH,YAAY,CAACI,KAAK,GAAG,EAAC;MACtBH,SAAS,CAACG,KAAK,GAAG,MAAK;IACzB;;IAEA;IACA,MAAMC,mBAAmB,GAAGb,QAAQ,CAAC,MAAM;MACzC,MAAMc,IAAI,GAAGT,MAAM,CAACU,YAAY,CAACH,KAAK,CAACE,IAAG;MAC1C,OAAO,CAACP,YAAY,CAACS,QAAQ,CAACF,IAAI;IACpC,CAAC;;IAED;IACA,MAAMG,eAAe,GAAGjB,QAAQ,CAAC,MAAM,CAACM,SAAS,CAACY,eAAe;IAEjEjB,SAAS,CAAC,MAAM;MACd;MACA,IAAI,CAACK,SAAS,CAACY,eAAe,EAAE;QAC9B,MAAMC,WAAW,GAAGd,MAAM,CAACU,YAAY,CAACH,KAAK,CAACE,IAAG;QACjD;QACA,IAAI,CAACP,YAAY,CAACS,QAAQ,CAACG,WAAW,CAAC,EAAE;UACvC;UACA,MAAMC,QAAQ,GAAGC,kBAAkB,CAACF,WAAW;UAC/Cd,MAAM,CAACiB,IAAI,CAAC,mBAAmBF,QAAQ,EAAE;QAC3C;MACF;IACF,CAAC;;IAED;IACA,MAAMG,QAAQ,GAAGrB,oBAAoB,CAAC,MAAM,MAAM,CAAC,2BAA2B,CAAC;IAC/E,MAAMsB,QAAQ,GAAGtB,oBAAoB,CAAC,MAAM,MAAM,CAAC,2BAA2B,CAAC;IAC/E,MAAMuB,YAAY,GAAGvB,oBAAoB,CAAC,MAAM,MAAM,CAAC,+BAA+B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}