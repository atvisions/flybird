{"ast":null,"code":"import { defineStore } from 'pinia';\nimport { auth } from '@/api/auth';\nimport { user } from '@/api/user';\nimport request from '@/utils/request';\nexport const useUserStore = defineStore('user', {\n  state: () => ({\n    isLoggedIn: false,\n    userInfo: null,\n    rememberMe: false // 添加记住我状态\n  }),\n  actions: {\n    async login(credentials, rememberMe = false) {\n      try {\n        const response = await auth.loginWithPassword({\n          account: credentials.account.trim(),\n          password: credentials.password\n        });\n        if (response?.data?.code === 200) {\n          const {\n            access,\n            refresh\n          } = response.data.data;\n\n          // 打印 token 信息\n          console.log('Login success, tokens:', {\n            access: access.slice(0, 10) + '...',\n            // 只打印部分 token\n            refresh: refresh.slice(0, 10) + '...'\n          });\n\n          // 根据记住我选项设置不同的过期时间\n          const expiresIn = rememberMe ? 7 * 24 * 60 * 60 * 1000 : 24 * 60 * 60 * 1000;\n          const expiresAt = new Date().getTime() + expiresIn;\n\n          // 存储 token 和过期时间\n          localStorage.setItem('token', access);\n          localStorage.setItem('refresh_token', refresh);\n          localStorage.setItem('token_expires_at', expiresAt);\n          localStorage.setItem('remember_me', rememberMe);\n\n          // 确保设置请求头\n          request.defaults.headers.common['Authorization'] = `Bearer ${access}`;\n          console.log('Authorization header set:', request.defaults.headers.common['Authorization']);\n\n          // 如果记住我，保存账号\n          if (rememberMe) {\n            localStorage.setItem('remembered_account', credentials.account);\n          } else {\n            localStorage.removeItem('remembered_account');\n          }\n          this.isLoggedIn = true;\n          this.rememberMe = rememberMe;\n\n          // 获取用户信息\n          console.log('Fetching user info...');\n          await this.getUserInfo();\n          return true;\n        }\n        return false;\n      } catch (error) {\n        console.error('Login failed:', error);\n        throw error;\n      }\n    },\n    async logout() {\n      try {\n        await auth.logout();\n      } finally {\n        this.clearUserData();\n      }\n    },\n    clearUserData() {\n      // 清除认证相关数据\n      localStorage.removeItem('token');\n      localStorage.removeItem('refresh_token');\n      localStorage.removeItem('token_expires_at');\n      // 清除用户相关数据\n      localStorage.removeItem('remember_me');\n      localStorage.removeItem('remembered_account');\n      localStorage.removeItem('userInfo');\n      // 清除其他可能存在的数据\n      localStorage.removeItem('isLoggedIn');\n      // 清除请求头中的 token\n      delete request.defaults.headers.common['Authorization'];\n      // 重置 store 状态\n      this.isLoggedIn = false;\n      this.userInfo = null;\n      this.rememberMe = false;\n    },\n    async getUserInfo() {\n      try {\n        console.log('GetUserInfo request headers:', request.defaults.headers.common);\n        const response = await user.getUserInfo();\n        console.log('GetUserInfo response:', response.data);\n        if (response?.data?.code === 200) {\n          this.userInfo = response.data.data;\n          return this.userInfo;\n        }\n        return null;\n      } catch (error) {\n        console.error('Get user info failed:', error);\n        throw error;\n      }\n    },\n    // 检查 token 是否过期\n    isTokenExpired() {\n      const expiresAt = localStorage.getItem('token_expires_at');\n      if (!expiresAt) return true;\n      return new Date().getTime() > parseInt(expiresAt);\n    }\n  }\n});","map":{"version":3,"names":["defineStore","auth","user","request","useUserStore","state","isLoggedIn","userInfo","rememberMe","actions","login","credentials","response","loginWithPassword","account","trim","password","data","code","access","refresh","console","log","slice","expiresIn","expiresAt","Date","getTime","localStorage","setItem","defaults","headers","common","removeItem","getUserInfo","error","logout","clearUserData","isTokenExpired","getItem","parseInt"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/stores/user.js"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { auth } from '@/api/auth'\nimport { user } from '@/api/user'\nimport request from '@/utils/request'\n\nexport const useUserStore = defineStore('user', {\n  state: () => ({\n    isLoggedIn: false,\n    userInfo: null,\n    rememberMe: false  // 添加记住我状态\n  }),\n\n  actions: {\n    async login(credentials, rememberMe = false) {\n      try {\n        const response = await auth.loginWithPassword({\n          account: credentials.account.trim(),\n          password: credentials.password\n        })\n        \n        if (response?.data?.code === 200) {\n          const { access, refresh } = response.data.data\n          \n          // 打印 token 信息\n          console.log('Login success, tokens:', {\n            access: access.slice(0, 10) + '...',  // 只打印部分 token\n            refresh: refresh.slice(0, 10) + '...'\n          })\n          \n          // 根据记住我选项设置不同的过期时间\n          const expiresIn = rememberMe ? 7 * 24 * 60 * 60 * 1000 : 24 * 60 * 60 * 1000\n          const expiresAt = new Date().getTime() + expiresIn\n          \n          // 存储 token 和过期时间\n          localStorage.setItem('token', access)\n          localStorage.setItem('refresh_token', refresh)\n          localStorage.setItem('token_expires_at', expiresAt)\n          localStorage.setItem('remember_me', rememberMe)\n          \n          // 确保设置请求头\n          request.defaults.headers.common['Authorization'] = `Bearer ${access}`\n          console.log('Authorization header set:', request.defaults.headers.common['Authorization'])\n          \n          // 如果记住我，保存账号\n          if (rememberMe) {\n            localStorage.setItem('remembered_account', credentials.account)\n          } else {\n            localStorage.removeItem('remembered_account')\n          }\n          \n          this.isLoggedIn = true\n          this.rememberMe = rememberMe\n          \n          // 获取用户信息\n          console.log('Fetching user info...')\n          await this.getUserInfo()\n          return true\n        }\n        return false\n      } catch (error) {\n        console.error('Login failed:', error)\n        throw error\n      }\n    },\n\n    async logout() {\n      try {\n        await auth.logout()\n      } finally {\n        this.clearUserData()\n      }\n    },\n\n    clearUserData() {\n      // 清除认证相关数据\n      localStorage.removeItem('token')\n      localStorage.removeItem('refresh_token')\n      localStorage.removeItem('token_expires_at')\n      // 清除用户相关数据\n      localStorage.removeItem('remember_me')\n      localStorage.removeItem('remembered_account')\n      localStorage.removeItem('userInfo')\n      // 清除其他可能存在的数据\n      localStorage.removeItem('isLoggedIn')\n      // 清除请求头中的 token\n      delete request.defaults.headers.common['Authorization']\n      // 重置 store 状态\n      this.isLoggedIn = false\n      this.userInfo = null\n      this.rememberMe = false\n    },\n\n    async getUserInfo() {\n      try {\n        console.log('GetUserInfo request headers:', request.defaults.headers.common)\n        const response = await user.getUserInfo()\n        console.log('GetUserInfo response:', response.data)\n        if (response?.data?.code === 200) {\n          this.userInfo = response.data.data\n          return this.userInfo\n        }\n        return null\n      } catch (error) {\n        console.error('Get user info failed:', error)\n        throw error\n      }\n    },\n\n    // 检查 token 是否过期\n    isTokenExpired() {\n      const expiresAt = localStorage.getItem('token_expires_at')\n      if (!expiresAt) return true\n      return new Date().getTime() > parseInt(expiresAt)\n    }\n  }\n}) "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}