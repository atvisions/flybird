{"ast":null,"code":"import { reactive, computed } from 'vue';\nimport { useStore } from 'vuex';\nimport { user } from '@/api/user';\nimport { showToast } from '@/components/ToastMessage';\nimport { ElMessage } from 'element-plus';\nexport function useChangePassword() {\n  const store = useStore();\n  const state = reactive({\n    oldPassword: '',\n    newPassword: '',\n    confirmPassword: '',\n    loading: false,\n    error: '',\n    strength: 0\n  });\n  const checkPasswordStrength = password => {\n    let score = 0;\n\n    // 基础长度检查 (最多1分)\n    if (password.length >= 8) score += 0.5;\n    if (password.length >= 12) score += 0.5;\n\n    // 字符类型检查\n    if (/\\d/.test(password)) score += 1; // 数字\n    if (/[A-Za-z]/.test(password)) score += 1; // 字母\n    if (/[!@#$%^&*]/.test(password)) score += 1; // 特殊字符（可选）\n\n    // 额外加分项（可选）\n    if (/[A-Z]/.test(password) && /[a-z]/.test(password)) score += 0.5; // 同时包含大小写\n\n    return Math.floor(score);\n  };\n  const validatePassword = password => {\n    if (!password) {\n      return '密码不能为空';\n    }\n    if (password.length < 8 || password.length > 20) {\n      return '密码长度必须在8-20个字符之间';\n    }\n    if (!/[A-Za-z]/.test(password)) {\n      return '密码必须包含字母';\n    }\n    if (!/\\d/.test(password)) {\n      return '密码必须包含数字';\n    }\n    if (password === state.oldPassword) {\n      return '新密码不能与当前密码相同';\n    }\n    return '';\n  };\n  const updatePasswordStrength = password => {\n    state.strength = checkPasswordStrength(password);\n  };\n  const handleUpdate = async () => {\n    try {\n      state.loading = true;\n      state.error = '';\n      if (!state.oldPassword) {\n        state.error = '请输入原密码';\n        return false;\n      }\n      const newPasswordError = validatePassword(state.newPassword);\n      if (newPasswordError) {\n        state.error = newPasswordError;\n        return false;\n      }\n      if (state.newPassword !== state.confirmPassword) {\n        state.error = '两次输入的密码不一致';\n        return false;\n      }\n      if (state.newPassword === state.oldPassword) {\n        state.error = '新密码不能与当前密码相同';\n        return false;\n      }\n\n      // 添加详细的错误日志\n      try {\n        await user.updatePassword({\n          old_password: state.oldPassword,\n          new_password: state.newPassword,\n          confirm_password: state.confirmPassword\n        });\n        ElMessage.success('密码修改成功');\n        return true;\n      } catch (error) {\n        console.log('密码修改失败，详细错误：', {\n          status: error.response?.status,\n          data: error.response?.data,\n          message: error.response?.data?.message || error.message\n        });\n        state.error = error.response?.data?.message || '密码修改失败';\n        return false;\n      }\n    } finally {\n      state.loading = false;\n    }\n  };\n  const strengthText = computed(() => {\n    const strength = state.strength;\n    if (strength < 2) return '弱'; // 基础要求：字母+数字\n    if (strength < 3) return '中'; // 添加了长度或特殊字符\n    if (strength < 4) return '强'; // 添加了更多增强项\n    return '非常强'; // 包含全部增强项\n  });\n  const strengthTextClass = computed(() => {\n    const strength = state.strength;\n    if (strength < 2) return 'text-red-500';\n    if (strength < 3) return 'text-yellow-500';\n    if (strength < 4) return 'text-green-500';\n    return 'text-green-600';\n  });\n  const strengthColorClass = computed(() => {\n    const strength = state.strength;\n    if (strength < 2) return 'bg-red-500';\n    if (strength < 3) return 'bg-yellow-500';\n    if (strength < 4) return 'bg-green-500';\n    return 'bg-green-600';\n  });\n  return {\n    state,\n    handleUpdate,\n    validatePassword,\n    updatePasswordStrength,\n    strengthText,\n    strengthTextClass,\n    strengthColorClass\n  };\n}","map":{"version":3,"names":["reactive","computed","useStore","user","showToast","ElMessage","useChangePassword","store","state","oldPassword","newPassword","confirmPassword","loading","error","strength","checkPasswordStrength","password","score","length","test","Math","floor","validatePassword","updatePasswordStrength","handleUpdate","newPasswordError","updatePassword","old_password","new_password","confirm_password","success","console","log","status","response","data","message","strengthText","strengthTextClass","strengthColorClass"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/composables/useChangePassword.js"],"sourcesContent":["import { reactive, computed } from 'vue'\nimport { useStore } from 'vuex'\nimport { user } from '@/api/user'\nimport { showToast } from '@/components/ToastMessage'\nimport { ElMessage } from 'element-plus'\n\nexport function useChangePassword() {\n  const store = useStore()\n  const state = reactive({\n    oldPassword: '',\n    newPassword: '',\n    confirmPassword: '',\n    loading: false,\n    error: '',\n    strength: 0\n  })\n\n  const checkPasswordStrength = (password) => {\n    let score = 0\n    \n    // 基础长度检查 (最多1分)\n    if (password.length >= 8) score += 0.5\n    if (password.length >= 12) score += 0.5\n    \n    // 字符类型检查\n    if (/\\d/.test(password)) score += 1  // 数字\n    if (/[A-Za-z]/.test(password)) score += 1  // 字母\n    if (/[!@#$%^&*]/.test(password)) score += 1  // 特殊字符（可选）\n    \n    // 额外加分项（可选）\n    if (/[A-Z]/.test(password) && /[a-z]/.test(password)) score += 0.5  // 同时包含大小写\n    \n    return Math.floor(score)\n  }\n\n  const validatePassword = (password) => {\n    if (!password) {\n      return '密码不能为空'\n    }\n    if (password.length < 8 || password.length > 20) {\n      return '密码长度必须在8-20个字符之间'\n    }\n    if (!/[A-Za-z]/.test(password)) {\n      return '密码必须包含字母'\n    }\n    if (!/\\d/.test(password)) {\n      return '密码必须包含数字'\n    }\n    if (password === state.oldPassword) {\n      return '新密码不能与当前密码相同'\n    }\n    return ''\n  }\n\n  const updatePasswordStrength = (password) => {\n    state.strength = checkPasswordStrength(password)\n  }\n\n  const handleUpdate = async () => {\n    try {\n      state.loading = true\n      state.error = ''\n\n      if (!state.oldPassword) {\n        state.error = '请输入原密码'\n        return false\n      }\n\n      const newPasswordError = validatePassword(state.newPassword)\n      if (newPasswordError) {\n        state.error = newPasswordError\n        return false\n      }\n\n      if (state.newPassword !== state.confirmPassword) {\n        state.error = '两次输入的密码不一致'\n        return false\n      }\n\n      if (state.newPassword === state.oldPassword) {\n        state.error = '新密码不能与当前密码相同'\n        return false\n      }\n\n      // 添加详细的错误日志\n      try {\n        await user.updatePassword({\n          old_password: state.oldPassword,\n          new_password: state.newPassword,\n          confirm_password: state.confirmPassword\n        })\n        ElMessage.success('密码修改成功')\n        return true\n      } catch (error) {\n        console.log('密码修改失败，详细错误：', {\n          status: error.response?.status,\n          data: error.response?.data,\n          message: error.response?.data?.message || error.message\n        })\n        state.error = error.response?.data?.message || '密码修改失败'\n        return false\n      }\n    } finally {\n      state.loading = false\n    }\n  }\n\n  const strengthText = computed(() => {\n    const strength = state.strength\n    if (strength < 2) return '弱'      // 基础要求：字母+数字\n    if (strength < 3) return '中'      // 添加了长度或特殊字符\n    if (strength < 4) return '强'      // 添加了更多增强项\n    return '非常强'                    // 包含全部增强项\n  })\n\n  const strengthTextClass = computed(() => {\n    const strength = state.strength\n    if (strength < 2) return 'text-red-500'\n    if (strength < 3) return 'text-yellow-500'\n    if (strength < 4) return 'text-green-500'\n    return 'text-green-600'\n  })\n\n  const strengthColorClass = computed(() => {\n    const strength = state.strength\n    if (strength < 2) return 'bg-red-500'\n    if (strength < 3) return 'bg-yellow-500'\n    if (strength < 4) return 'bg-green-500'\n    return 'bg-green-600'\n  })\n\n  return {\n    state,\n    handleUpdate,\n    validatePassword,\n    updatePasswordStrength,\n    strengthText,\n    strengthTextClass,\n    strengthColorClass\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}