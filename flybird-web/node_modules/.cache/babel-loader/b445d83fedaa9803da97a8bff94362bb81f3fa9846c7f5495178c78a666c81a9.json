{"ast":null,"code":"import _objectSpread from \"/Users/liuzhao/Documents/Projects/flybird/flybird-web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nimport { ref, computed, onMounted, onUnmounted } from 'vue';\nimport DesignElement from './DesignElement.vue';\nimport profile from '@/api/profile';\nimport { useAuthStore } from '@/stores/auth';\nimport { useAccountStore } from '@/stores/account';\nexport default {\n  __name: 'Canvas',\n  props: {\n    scale: {\n      type: Number,\n      default: 1\n    }\n  },\n  emits: ['element-select', 'data-fields-update'],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    const props = __props;\n    const emit = __emit;\n\n    // 状态\n    const isDragOver = ref(false);\n    const elements = ref([]);\n    const selectedElement = ref(null);\n    const dataFields = ref([]);\n\n    // Store\n    const authStore = useAuthStore();\n    const accountStore = useAccountStore();\n\n    // 用户登录状态\n    const isAuthenticated = computed(() => {\n      return authStore.isLoggedIn && accountStore.userInfo !== null;\n    });\n\n    // 获取数据字段定义\n    const fetchDataFields = async () => {\n      try {\n        // 检查登录状态\n        if (!isAuthenticated.value) {\n          console.error('用户未登录');\n          // 使用默认字段\n          dataFields.value = [{\n            label: '姓名',\n            field: 'basic_info.name',\n            group: '基本信息',\n            type: 'text'\n          }, {\n            label: '电话',\n            field: 'basic_info.phone',\n            group: '基本信息',\n            type: 'text'\n          }, {\n            label: '邮箱',\n            field: 'basic_info.email',\n            group: '基本信息',\n            type: 'text'\n          }];\n          emit('data-fields-update', dataFields.value);\n          return;\n        }\n\n        // 获取用户信息\n        const response = await profile.getData();\n        console.log('API完整响应:', response);\n\n        // 确保使用正确的数据路径\n        const profileData = response.data?.data;\n        console.log('用户资料数据:', profileData);\n        if (!profileData) {\n          throw new Error('获取用户资料失败');\n        }\n\n        // 将API返回的数据转换为字段定义\n        const fields = [\n        // 基本信息\n        {\n          label: '头像',\n          field: 'basic_info.avatar',\n          group: '基本信息',\n          type: 'image'\n        }, {\n          label: '姓名',\n          field: 'basic_info.name',\n          group: '基本信息',\n          type: 'text'\n        }, {\n          label: '性别',\n          field: 'basic_info.gender',\n          group: '基本信息',\n          type: 'text'\n        }, {\n          label: '出生日期',\n          field: 'basic_info.birth_date',\n          group: '基本信息',\n          type: 'text'\n        }, {\n          label: '电话',\n          field: 'basic_info.phone',\n          group: '基本信息',\n          type: 'text'\n        }, {\n          label: '邮箱',\n          field: 'basic_info.email',\n          group: '基本信息',\n          type: 'text'\n        }, {\n          label: '所在地',\n          field: 'basic_info.location',\n          group: '基本信息',\n          type: 'text'\n        }, {\n          label: '个人总结',\n          field: 'basic_info.personal_summary',\n          group: '基本信息',\n          type: 'text'\n        },\n        // 求职意向\n        {\n          label: '工作类型',\n          field: 'job_intention.job_type',\n          group: '求职意向',\n          type: 'text'\n        }, {\n          label: '求职状态',\n          field: 'job_intention.job_status',\n          group: '求职意向',\n          type: 'text'\n        }, {\n          label: '期望薪资',\n          field: 'job_intention.expected_salary',\n          group: '求职意向',\n          type: 'text'\n        }, {\n          label: '期望城市',\n          field: 'job_intention.expected_city',\n          group: '求职意向',\n          type: 'text'\n        }, {\n          label: '期望行业',\n          field: 'job_intention.industries',\n          group: '求职意向',\n          type: 'text'\n        },\n        // 工作经历\n        ...(profileData.work_experience || []).map((_, index) => [{\n          label: `公司名称${index + 1}`,\n          field: `work_experience[${index}].company`,\n          group: '工作经历',\n          type: 'text'\n        }, {\n          label: `职位名称${index + 1}`,\n          field: `work_experience[${index}].position`,\n          group: '工作经历',\n          type: 'text'\n        }, {\n          label: `部门${index + 1}`,\n          field: `work_experience[${index}].department`,\n          group: '工作经历',\n          type: 'text'\n        }, {\n          label: `工作描述${index + 1}`,\n          field: `work_experience[${index}].description`,\n          group: '工作经历',\n          type: 'text'\n        }]).flat(),\n        // 教育经历\n        ...(profileData.education || []).map((_, index) => [{\n          label: `学校${index + 1}`,\n          field: `education[${index}].school`,\n          group: '教育经历',\n          type: 'text'\n        }, {\n          label: `专业${index + 1}`,\n          field: `education[${index}].major`,\n          group: '教育经历',\n          type: 'text'\n        }, {\n          label: `学历${index + 1}`,\n          field: `education[${index}].degree`,\n          group: '教育经历',\n          type: 'text'\n        }]).flat(),\n        // 项目经历\n        ...(profileData.project || []).map((_, index) => [{\n          label: `项目名称${index + 1}`,\n          field: `project[${index}].name`,\n          group: '项目经历',\n          type: 'text'\n        }, {\n          label: `项目角色${index + 1}`,\n          field: `project[${index}].role`,\n          group: '项目经历',\n          type: 'text'\n        }, {\n          label: `项目描述${index + 1}`,\n          field: `project[${index}].description`,\n          group: '项目经历',\n          type: 'text'\n        }]).flat(),\n        // 技能特长\n        ...(profileData.skill || []).map((_, index) => [{\n          label: `技能名称${index + 1}`,\n          field: `skill[${index}].name`,\n          group: '技能特长',\n          type: 'text'\n        }, {\n          label: `掌握程度${index + 1}`,\n          field: `skill[${index}].level`,\n          group: '技能特长',\n          type: 'text'\n        }, {\n          label: `技能描述${index + 1}`,\n          field: `skill[${index}].description`,\n          group: '技能特长',\n          type: 'text'\n        }]).flat(),\n        // 语言能力\n        ...(profileData.language || []).map((_, index) => [{\n          label: `语言名称${index + 1}`,\n          field: `language[${index}].name`,\n          group: '语言能力',\n          type: 'text'\n        }, {\n          label: `掌握程度${index + 1}`,\n          field: `language[${index}].proficiency_display`,\n          group: '语言能力',\n          type: 'text'\n        }, {\n          label: `证书名称${index + 1}`,\n          field: `language[${index}].certification`,\n          group: '语言能力',\n          type: 'text'\n        }, {\n          label: `证书分数${index + 1}`,\n          field: `language[${index}].score`,\n          group: '语言能力',\n          type: 'text'\n        }]).flat()];\n        dataFields.value = fields;\n        console.log('设置的字段:', dataFields.value);\n        emit('data-fields-update', dataFields.value);\n      } catch (error) {\n        console.error('获取数据字段失败:', error);\n        // 使用默认字段\n        dataFields.value = [{\n          label: '姓名',\n          field: 'basic_info.name',\n          group: '基本信息',\n          type: 'text'\n        }, {\n          label: '电话',\n          field: 'basic_info.phone',\n          group: '基本信息',\n          type: 'text'\n        }, {\n          label: '邮箱',\n          field: 'basic_info.email',\n          group: '基本信息',\n          type: 'text'\n        }];\n        emit('data-fields-update', dataFields.value);\n      }\n    };\n\n    // 处理画布点击\n    const handleCanvasClick = e => {\n      if (e.target === e.currentTarget) {\n        selectedElement.value = null;\n        emit('element-select', null);\n      }\n    };\n\n    // 处理元素选择\n    const handleElementSelect = element => {\n      selectedElement.value = element;\n      emit('element-select', element);\n    };\n\n    // 处理元素更新\n    const handleElementUpdate = updatedElement => {\n      const index = elements.value.findIndex(el => el.id === updatedElement.id);\n      if (index > -1) {\n        elements.value[index] = _objectSpread({}, updatedElement);\n        if (selectedElement.value?.id === updatedElement.id) {\n          selectedElement.value = _objectSpread({}, updatedElement);\n        }\n      }\n    };\n\n    // 处理删除元素\n    const handleDeleteElement = () => {\n      if (selectedElement.value) {\n        const index = elements.value.findIndex(el => el.id === selectedElement.value.id);\n        if (index > -1) {\n          elements.value.splice(index, 1);\n          selectedElement.value = null;\n          emit('element-select', null);\n        }\n      }\n    };\n\n    // 处理键盘事件\n    const handleKeyDown = e => {\n      if ((e.key === 'Delete' || e.key === 'Backspace') && selectedElement.value) {\n        e.preventDefault();\n        handleDeleteElement();\n      }\n    };\n\n    // 添加和移除全局键盘事件监听\n    onMounted(() => {\n      document.addEventListener('keydown', handleKeyDown);\n      fetchDataFields();\n    });\n    onUnmounted(() => {\n      document.removeEventListener('keydown', handleKeyDown);\n    });\n\n    // 处理元素拖拽\n    const handleElementDrop = event => {\n      const elementType = event.dataTransfer.getData('element-type');\n      if (!elementType) return;\n      try {\n        const elementConfig = JSON.parse(event.dataTransfer.getData('element-config'));\n        const rect = event.currentTarget.getBoundingClientRect();\n        const x = (event.clientX - rect.left) / props.scale;\n        const y = (event.clientY - rect.top) / props.scale;\n        const newElement = {\n          id: Date.now().toString(),\n          type: elementType,\n          x,\n          y,\n          width: elementConfig.width || 100,\n          height: elementConfig.height || 100,\n          rotation: 0,\n          content: elementConfig.content,\n          placeholder: elementConfig.placeholder,\n          styles: elementConfig.styles || {}\n        };\n        elements.value.push(newElement);\n        // 自动选中新添加的元素\n        selectedElement.value = newElement;\n        emit('element-select', newElement);\n        isDragOver.value = false;\n      } catch (error) {\n        console.error('处理元素拖放时出错:', error);\n      }\n    };\n\n    // 处理拖拽进入\n    const handleDragEnter = event => {\n      event.preventDefault();\n      isDragOver.value = true;\n    };\n\n    // 处理拖拽离开\n    const handleDragLeave = event => {\n      event.preventDefault();\n      isDragOver.value = false;\n    };\n\n    // 导出布局数据\n    const exportLayoutData = () => {\n      return {\n        elements: elements.value.map(element => _objectSpread(_objectSpread({}, element), {}, {\n          dataBinding: element.dataBinding\n        }))\n      };\n    };\n\n    // 加载模板\n    const loadTemplate = async template => {\n      try {\n        // 检查登录状态\n        if (!isAuthenticated.value) {\n          console.error('用户未登录，无法加载数据');\n          return;\n        }\n\n        // 获取用户数据\n        const response = await profile.getData();\n        console.log('模板加载 - API响应:', response);\n        if (!response?.data?.data) {\n          console.error('API响应数据为空');\n          return;\n        }\n\n        // 使用正确的数据路径\n        const profileData = response.data.data;\n        console.log('模板加载 - 用户资料数据:', profileData);\n\n        // 加载设计元素\n        elements.value = (template.elements || []).map(element => {\n          const newElement = _objectSpread({}, element);\n\n          // 如果元素有数据绑定,注入实际数据\n          if (element.dataBinding?.field) {\n            console.log('处理数据绑定:', element.dataBinding);\n            const {\n              field\n            } = element.dataBinding;\n            let value = null;\n            try {\n              // 处理嵌套字段\n              const fieldParts = field.split('.');\n              console.log('字段路径:', fieldParts);\n\n              // 处理特殊字段，比如basic_info中的字段\n              if (!fieldParts[0].includes('basic_info') && !field.includes('[')) {\n                fieldParts.unshift('basic_info');\n              }\n              value = fieldParts.reduce((obj, key) => {\n                console.log('当前字段:', key, '当前对象:', obj);\n                if (!obj) return null;\n\n                // 处理数组索引\n                const match = key.match(/(\\w+)\\[(\\d+)\\]/);\n                if (match) {\n                  const [_, arrayName, index] = match;\n                  const array = obj[arrayName];\n                  console.log('数组字段:', arrayName, '索引:', index, '数组:', array);\n                  return array?.[parseInt(index)];\n                }\n                return obj[key];\n              }, profileData);\n              console.log('获取到的字段值:', field, value);\n            } catch (error) {\n              console.error('获取字段值失败:', field, error);\n              value = null;\n            }\n\n            // 根据元素类型设置实际内容\n            switch (element.type) {\n              case 'image':\n                if (field.includes('avatar') && value) {\n                  newElement.content = `http://192.168.3.16:8000${value}`;\n                  console.log('设置头像图片:', newElement.content);\n                } else {\n                  newElement.content = value || '/images.jpeg';\n                  console.log('设置默认图片:', newElement.content);\n                }\n                break;\n              case 'text':\n                // 处理特殊字段的显示\n                if (value !== null && value !== undefined) {\n                  if (typeof value === 'object') {\n                    // 如果是对象，尝试获取display值或name值\n                    value = value.display || value.name || JSON.stringify(value);\n                  }\n                  newElement.content = String(value);\n                } else {\n                  newElement.content = element.content || `{{${field}}}`;\n                }\n                console.log('设置文本内容:', newElement.content);\n                break;\n            }\n          }\n          return newElement;\n        });\n        console.log('更新后的元素列表:', elements.value);\n      } catch (error) {\n        console.error('加载模板数据失败:', error);\n      }\n    };\n\n    // 更新元素数据绑定\n    const updateElementDataBinding = (elementId, binding) => {\n      const element = elements.value.find(el => el.id === elementId);\n      if (element) {\n        element.dataBinding = binding;\n        // 更新选中元素的状态\n        if (selectedElement.value?.id === elementId) {\n          selectedElement.value = _objectSpread({}, element);\n        }\n      }\n    };\n\n    // 获取画布数据\n    const getCanvasData = () => {\n      // 获取所有元素的数据\n      const elements = elementRefs.value.map(ref => {\n        const element = ref.getElementData();\n        return _objectSpread(_objectSpread({}, element), {}, {\n          config: {\n            fields: element.fields || {},\n            styles: {\n              width: element.width,\n              height: element.height,\n              left: element.left,\n              top: element.top,\n              borderRadius: element.borderRadius,\n              backgroundColor: element.backgroundColor,\n              padding: element.padding || '0px',\n              margin: element.margin || '0px',\n              zIndex: element.zIndex || 1\n            }\n          }\n        });\n      });\n      return {\n        elements\n      };\n    };\n\n    // 暴露方法给父组件\n    __expose({\n      loadTemplate,\n      getCanvasData,\n      handleElementUpdate\n    });\n    const __returned__ = {\n      props,\n      emit,\n      isDragOver,\n      elements,\n      selectedElement,\n      dataFields,\n      authStore,\n      accountStore,\n      isAuthenticated,\n      fetchDataFields,\n      handleCanvasClick,\n      handleElementSelect,\n      handleElementUpdate,\n      handleDeleteElement,\n      handleKeyDown,\n      handleElementDrop,\n      handleDragEnter,\n      handleDragLeave,\n      exportLayoutData,\n      loadTemplate,\n      updateElementDataBinding,\n      getCanvasData,\n      ref,\n      computed,\n      onMounted,\n      onUnmounted,\n      DesignElement,\n      get profile() {\n        return profile;\n      },\n      get useAuthStore() {\n        return useAuthStore;\n      },\n      get useAccountStore() {\n        return useAccountStore;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","onUnmounted","DesignElement","profile","useAuthStore","useAccountStore","props","__props","emit","__emit","isDragOver","elements","selectedElement","dataFields","authStore","accountStore","isAuthenticated","isLoggedIn","userInfo","fetchDataFields","value","console","error","label","field","group","type","response","getData","log","profileData","data","Error","fields","work_experience","map","_","index","flat","education","project","skill","language","handleCanvasClick","e","target","currentTarget","handleElementSelect","element","handleElementUpdate","updatedElement","findIndex","el","id","_objectSpread","handleDeleteElement","splice","handleKeyDown","key","preventDefault","document","addEventListener","removeEventListener","handleElementDrop","event","elementType","dataTransfer","elementConfig","JSON","parse","rect","getBoundingClientRect","x","clientX","left","scale","y","clientY","top","newElement","Date","now","toString","width","height","rotation","content","placeholder","styles","push","handleDragEnter","handleDragLeave","exportLayoutData","dataBinding","loadTemplate","template","fieldParts","split","includes","unshift","reduce","obj","match","arrayName","array","parseInt","undefined","display","name","stringify","String","updateElementDataBinding","elementId","binding","find","getCanvasData","elementRefs","getElementData","config","borderRadius","backgroundColor","padding","margin","zIndex","__expose"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/views/resume-editor/components/Canvas.vue"],"sourcesContent":["<template>\n  <div class=\"canvas-container\">\n    <div class=\"canvas-wrapper\">\n      <div \n        class=\"canvas-content\" \n        :style=\"{ transform: `scale(${scale})` }\"\n        @dragover.prevent\n        @drop.prevent=\"handleElementDrop\"\n        @dragenter.prevent=\"handleDragEnter\"\n        @dragleave.prevent=\"handleDragLeave\"\n        @click.self=\"handleCanvasClick\"\n        tabindex=\"0\"\n        @keydown.delete.prevent=\"handleDeleteElement\"\n        @keydown.backspace.prevent=\"handleDeleteElement\"\n      >\n        <!-- 设计元素列表 -->\n        <template v-for=\"element in elements\" :key=\"element.id\">\n          <DesignElement\n            :element=\"element\"\n            :is-selected=\"selectedElement?.id === element.id\"\n            :scale=\"scale\"\n            :data-fields=\"dataFields\"\n            @select=\"handleElementSelect\"\n            @update=\"handleElementUpdate\"\n          />\n        </template>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted, onUnmounted } from 'vue'\nimport DesignElement from './DesignElement.vue'\nimport profile from '@/api/profile'\nimport { useAuthStore } from '@/stores/auth'\nimport { useAccountStore } from '@/stores/account'\n\nconst props = defineProps({\n  scale: {\n    type: Number,\n    default: 1\n  }\n})\n\nconst emit = defineEmits(['element-select', 'data-fields-update'])\n\n// 状态\nconst isDragOver = ref(false)\nconst elements = ref([])\nconst selectedElement = ref(null)\nconst dataFields = ref([])\n\n// Store\nconst authStore = useAuthStore()\nconst accountStore = useAccountStore()\n\n// 用户登录状态\nconst isAuthenticated = computed(() => {\n  return authStore.isLoggedIn && accountStore.userInfo !== null\n})\n\n// 获取数据字段定义\nconst fetchDataFields = async () => {\n  try {\n    // 检查登录状态\n    if (!isAuthenticated.value) {\n      console.error('用户未登录')\n      // 使用默认字段\n      dataFields.value = [\n        { label: '姓名', field: 'basic_info.name', group: '基本信息', type: 'text' },\n        { label: '电话', field: 'basic_info.phone', group: '基本信息', type: 'text' },\n        { label: '邮箱', field: 'basic_info.email', group: '基本信息', type: 'text' }\n      ]\n      emit('data-fields-update', dataFields.value)\n      return\n    }\n\n    // 获取用户信息\n    const response = await profile.getData()\n    console.log('API完整响应:', response)\n    \n    // 确保使用正确的数据路径\n    const profileData = response.data?.data\n    console.log('用户资料数据:', profileData)\n    \n    if (!profileData) {\n      throw new Error('获取用户资料失败')\n    }\n\n    // 将API返回的数据转换为字段定义\n    const fields = [\n      // 基本信息\n      { label: '头像', field: 'basic_info.avatar', group: '基本信息', type: 'image' },\n      { label: '姓名', field: 'basic_info.name', group: '基本信息', type: 'text' },\n      { label: '性别', field: 'basic_info.gender', group: '基本信息', type: 'text' },\n      { label: '出生日期', field: 'basic_info.birth_date', group: '基本信息', type: 'text' },\n      { label: '电话', field: 'basic_info.phone', group: '基本信息', type: 'text' },\n      { label: '邮箱', field: 'basic_info.email', group: '基本信息', type: 'text' },\n      { label: '所在地', field: 'basic_info.location', group: '基本信息', type: 'text' },\n      { label: '个人总结', field: 'basic_info.personal_summary', group: '基本信息', type: 'text' },\n\n      // 求职意向\n      { label: '工作类型', field: 'job_intention.job_type', group: '求职意向', type: 'text' },\n      { label: '求职状态', field: 'job_intention.job_status', group: '求职意向', type: 'text' },\n      { label: '期望薪资', field: 'job_intention.expected_salary', group: '求职意向', type: 'text' },\n      { label: '期望城市', field: 'job_intention.expected_city', group: '求职意向', type: 'text' },\n      { label: '期望行业', field: 'job_intention.industries', group: '求职意向', type: 'text' },\n\n      // 工作经历\n      ...(profileData.work_experience || []).map((_, index) => [\n        { label: `公司名称${index + 1}`, field: `work_experience[${index}].company`, group: '工作经历', type: 'text' },\n        { label: `职位名称${index + 1}`, field: `work_experience[${index}].position`, group: '工作经历', type: 'text' },\n        { label: `部门${index + 1}`, field: `work_experience[${index}].department`, group: '工作经历', type: 'text' },\n        { label: `工作描述${index + 1}`, field: `work_experience[${index}].description`, group: '工作经历', type: 'text' }\n      ]).flat(),\n\n      // 教育经历\n      ...(profileData.education || []).map((_, index) => [\n        { label: `学校${index + 1}`, field: `education[${index}].school`, group: '教育经历', type: 'text' },\n        { label: `专业${index + 1}`, field: `education[${index}].major`, group: '教育经历', type: 'text' },\n        { label: `学历${index + 1}`, field: `education[${index}].degree`, group: '教育经历', type: 'text' }\n      ]).flat(),\n\n      // 项目经历\n      ...(profileData.project || []).map((_, index) => [\n        { label: `项目名称${index + 1}`, field: `project[${index}].name`, group: '项目经历', type: 'text' },\n        { label: `项目角色${index + 1}`, field: `project[${index}].role`, group: '项目经历', type: 'text' },\n        { label: `项目描述${index + 1}`, field: `project[${index}].description`, group: '项目经历', type: 'text' }\n      ]).flat(),\n\n      // 技能特长\n      ...(profileData.skill || []).map((_, index) => [\n        { label: `技能名称${index + 1}`, field: `skill[${index}].name`, group: '技能特长', type: 'text' },\n        { label: `掌握程度${index + 1}`, field: `skill[${index}].level`, group: '技能特长', type: 'text' },\n        { label: `技能描述${index + 1}`, field: `skill[${index}].description`, group: '技能特长', type: 'text' }\n      ]).flat(),\n\n      // 语言能力\n      ...(profileData.language || []).map((_, index) => [\n        { label: `语言名称${index + 1}`, field: `language[${index}].name`, group: '语言能力', type: 'text' },\n        { label: `掌握程度${index + 1}`, field: `language[${index}].proficiency_display`, group: '语言能力', type: 'text' },\n        { label: `证书名称${index + 1}`, field: `language[${index}].certification`, group: '语言能力', type: 'text' },\n        { label: `证书分数${index + 1}`, field: `language[${index}].score`, group: '语言能力', type: 'text' }\n      ]).flat()\n    ]\n\n    dataFields.value = fields\n    console.log('设置的字段:', dataFields.value)\n    emit('data-fields-update', dataFields.value)\n  } catch (error) {\n    console.error('获取数据字段失败:', error)\n    // 使用默认字段\n    dataFields.value = [\n      { label: '姓名', field: 'basic_info.name', group: '基本信息', type: 'text' },\n      { label: '电话', field: 'basic_info.phone', group: '基本信息', type: 'text' },\n      { label: '邮箱', field: 'basic_info.email', group: '基本信息', type: 'text' }\n    ]\n    emit('data-fields-update', dataFields.value)\n  }\n}\n\n// 处理画布点击\nconst handleCanvasClick = (e) => {\n  if (e.target === e.currentTarget) {\n    selectedElement.value = null\n    emit('element-select', null)\n  }\n}\n\n// 处理元素选择\nconst handleElementSelect = (element) => {\n  selectedElement.value = element\n  emit('element-select', element)\n}\n\n// 处理元素更新\nconst handleElementUpdate = (updatedElement) => {\n  const index = elements.value.findIndex(el => el.id === updatedElement.id)\n  if (index > -1) {\n    elements.value[index] = { ...updatedElement }\n    if (selectedElement.value?.id === updatedElement.id) {\n      selectedElement.value = { ...updatedElement }\n    }\n  }\n}\n\n// 处理删除元素\nconst handleDeleteElement = () => {\n  if (selectedElement.value) {\n    const index = elements.value.findIndex(el => el.id === selectedElement.value.id)\n    if (index > -1) {\n      elements.value.splice(index, 1)\n      selectedElement.value = null\n      emit('element-select', null)\n    }\n  }\n}\n\n// 处理键盘事件\nconst handleKeyDown = (e) => {\n  if ((e.key === 'Delete' || e.key === 'Backspace') && selectedElement.value) {\n    e.preventDefault()\n    handleDeleteElement()\n  }\n}\n\n// 添加和移除全局键盘事件监听\nonMounted(() => {\n  document.addEventListener('keydown', handleKeyDown)\n  fetchDataFields()\n})\n\nonUnmounted(() => {\n  document.removeEventListener('keydown', handleKeyDown)\n})\n\n// 处理元素拖拽\nconst handleElementDrop = (event) => {\n  const elementType = event.dataTransfer.getData('element-type')\n  if (!elementType) return\n\n  try {\n    const elementConfig = JSON.parse(event.dataTransfer.getData('element-config'))\n    const rect = event.currentTarget.getBoundingClientRect()\n    const x = (event.clientX - rect.left) / props.scale\n    const y = (event.clientY - rect.top) / props.scale\n    \n    const newElement = {\n      id: Date.now().toString(),\n      type: elementType,\n      x,\n      y,\n      width: elementConfig.width || 100,\n      height: elementConfig.height || 100,\n      rotation: 0,\n      content: elementConfig.content,\n      placeholder: elementConfig.placeholder,\n      styles: elementConfig.styles || {}\n    }\n    \n    elements.value.push(newElement)\n    // 自动选中新添加的元素\n    selectedElement.value = newElement\n    emit('element-select', newElement)\n    isDragOver.value = false\n  } catch (error) {\n    console.error('处理元素拖放时出错:', error)\n  }\n}\n\n// 处理拖拽进入\nconst handleDragEnter = (event) => {\n  event.preventDefault()\n  isDragOver.value = true\n}\n\n// 处理拖拽离开\nconst handleDragLeave = (event) => {\n  event.preventDefault()\n  isDragOver.value = false\n}\n\n// 导出布局数据\nconst exportLayoutData = () => {\n  return {\n    elements: elements.value.map(element => ({\n      ...element,\n      dataBinding: element.dataBinding\n    }))\n  }\n}\n\n// 加载模板\nconst loadTemplate = async (template) => {\n  try {\n    // 检查登录状态\n    if (!isAuthenticated.value) {\n      console.error('用户未登录，无法加载数据')\n      return\n    }\n\n    // 获取用户数据\n    const response = await profile.getData()\n    console.log('模板加载 - API响应:', response)\n    \n    if (!response?.data?.data) {\n      console.error('API响应数据为空')\n      return\n    }\n\n    // 使用正确的数据路径\n    const profileData = response.data.data\n    console.log('模板加载 - 用户资料数据:', profileData)\n\n    // 加载设计元素\n    elements.value = (template.elements || []).map(element => {\n      const newElement = { ...element }\n      \n      // 如果元素有数据绑定,注入实际数据\n      if (element.dataBinding?.field) {\n        console.log('处理数据绑定:', element.dataBinding)\n        const { field } = element.dataBinding\n        let value = null\n        \n        try {\n          // 处理嵌套字段\n          const fieldParts = field.split('.')\n          console.log('字段路径:', fieldParts)\n          \n          // 处理特殊字段，比如basic_info中的字段\n          if (!fieldParts[0].includes('basic_info') && !field.includes('[')) {\n            fieldParts.unshift('basic_info')\n          }\n          \n          value = fieldParts.reduce((obj, key) => {\n            console.log('当前字段:', key, '当前对象:', obj)\n            if (!obj) return null\n            \n            // 处理数组索引\n            const match = key.match(/(\\w+)\\[(\\d+)\\]/)\n            if (match) {\n              const [_, arrayName, index] = match\n              const array = obj[arrayName]\n              console.log('数组字段:', arrayName, '索引:', index, '数组:', array)\n              return array?.[parseInt(index)]\n            }\n            return obj[key]\n          }, profileData)\n          \n          console.log('获取到的字段值:', field, value)\n        } catch (error) {\n          console.error('获取字段值失败:', field, error)\n          value = null\n        }\n\n        // 根据元素类型设置实际内容\n        switch (element.type) {\n          case 'image':\n            if (field.includes('avatar') && value) {\n              newElement.content = `http://192.168.3.16:8000${value}`\n              console.log('设置头像图片:', newElement.content)\n            } else {\n              newElement.content = value || '/images.jpeg'\n              console.log('设置默认图片:', newElement.content)\n            }\n            break\n          case 'text':\n            // 处理特殊字段的显示\n            if (value !== null && value !== undefined) {\n              if (typeof value === 'object') {\n                // 如果是对象，尝试获取display值或name值\n                value = value.display || value.name || JSON.stringify(value)\n              }\n              newElement.content = String(value)\n            } else {\n              newElement.content = element.content || `{{${field}}}`\n            }\n            console.log('设置文本内容:', newElement.content)\n            break\n        }\n      }\n      \n      return newElement\n    })\n    \n    console.log('更新后的元素列表:', elements.value)\n  } catch (error) {\n    console.error('加载模板数据失败:', error)\n  }\n}\n\n// 更新元素数据绑定\nconst updateElementDataBinding = (elementId, binding) => {\n  const element = elements.value.find(el => el.id === elementId)\n  if (element) {\n    element.dataBinding = binding\n    // 更新选中元素的状态\n    if (selectedElement.value?.id === elementId) {\n      selectedElement.value = { ...element }\n    }\n  }\n}\n\n// 获取画布数据\nconst getCanvasData = () => {\n  // 获取所有元素的数据\n  const elements = elementRefs.value.map(ref => {\n    const element = ref.getElementData()\n    return {\n      ...element,\n      config: {\n        fields: element.fields || {},\n        styles: {\n          width: element.width,\n          height: element.height,\n          left: element.left,\n          top: element.top,\n          borderRadius: element.borderRadius,\n          backgroundColor: element.backgroundColor,\n          padding: element.padding || '0px',\n          margin: element.margin || '0px',\n          zIndex: element.zIndex || 1\n        }\n      }\n    }\n  })\n\n  return {\n    elements\n  }\n}\n\n// 暴露方法给父组件\ndefineExpose({\n  loadTemplate,\n  getCanvasData,\n  handleElementUpdate\n})\n</script>\n\n<style scoped>\n.canvas-container {\n  flex: 1;\n  overflow: hidden;\n  background: #f5f5f5;\n  position: relative;\n}\n\n.canvas-wrapper {\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  padding: 20px;\n}\n\n.canvas-content {\n  width: 794px; /* A4 纸宽度 */\n  min-height: 1123px; /* A4 纸高度 */\n  background: #ffffff;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\n  position: relative;\n  transform-origin: top center;\n  outline: none; /* 移除焦点时的轮廓 */\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}