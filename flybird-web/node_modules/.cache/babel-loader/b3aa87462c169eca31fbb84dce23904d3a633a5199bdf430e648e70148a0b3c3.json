{"ast":null,"code":"import { defineStore } from 'pinia';\nimport profile from '@/api/profile';\nimport { eventBus } from '@/utils/eventBus';\nimport { MEDIA_URL } from '@/config/index';\nexport const useProfileStore = defineStore({\n  id: 'profile',\n  state: () => ({\n    basicInfo: null,\n    avatarUpdateTime: null\n  }),\n  getters: {\n    profileAvatarUrl: state => {\n      const avatar = state.basicInfo?.avatar;\n      if (!avatar) return null;\n      return avatar.startsWith('http') ? avatar : `${MEDIA_URL}${avatar}`;\n    }\n  },\n  actions: {\n    // 清理 store 数据\n    clearStore() {\n      this.basicInfo = null;\n      this.avatarUpdateTime = null;\n      localStorage.removeItem('profile'); // 清除持久化数据\n    },\n    // 获取档案基本信息\n    async fetchBasicInfo() {\n      try {\n        // 先清理旧数据\n        this.clearStore();\n        const response = await profile.getData();\n        if (response?.data?.code === 200 && response?.data?.data?.basic_info) {\n          console.log('Fetched basicInfo:', response.data.data.basic_info);\n          this.basicInfo = response.data.data.basic_info;\n          this.avatarUpdateTime = Date.now();\n          console.log('Store state after fetch:', {\n            basicInfo: this.basicInfo,\n            avatarUpdateTime: this.avatarUpdateTime\n          });\n          return this.basicInfo;\n        }\n        return null;\n      } catch (error) {\n        console.error('获取档案基本信息失败:', error);\n        throw error;\n      }\n    },\n    // 更新头像\n    async updateAvatar(formData) {\n      try {\n        const response = await profile.uploadAvatar(formData);\n        if (response?.data?.code === 200) {\n          // 直接更新头像\n          if (this.basicInfo) {\n            console.log('Updating avatar:', response.data.data.avatar);\n            this.basicInfo.avatar = response.data.data.avatar;\n            this.avatarUpdateTime = Date.now();\n            // 触发头像更新事件\n            eventBus.emit('avatar-updated', response.data.data.avatar);\n            console.log('Store state after update:', {\n              basicInfo: this.basicInfo,\n              avatarUpdateTime: this.avatarUpdateTime\n            });\n          }\n          return response;\n        }\n        throw new Error('上传失败');\n      } catch (error) {\n        throw error;\n      }\n    }\n  },\n  persist: {\n    enabled: true,\n    strategies: [{\n      key: 'profile',\n      storage: localStorage,\n      paths: ['basicInfo', 'avatarUpdateTime']\n    }]\n  }\n});","map":{"version":3,"names":["defineStore","profile","eventBus","MEDIA_URL","useProfileStore","id","state","basicInfo","avatarUpdateTime","getters","profileAvatarUrl","avatar","startsWith","actions","clearStore","localStorage","removeItem","fetchBasicInfo","response","getData","data","code","basic_info","console","log","Date","now","error","updateAvatar","formData","uploadAvatar","emit","Error","persist","enabled","strategies","key","storage","paths"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/stores/profile.js"],"sourcesContent":["import { defineStore } from 'pinia'\nimport profile from '@/api/profile'\nimport { eventBus } from '@/utils/eventBus'\nimport { MEDIA_URL } from '@/config/index'\n\nexport const useProfileStore = defineStore({\n  id: 'profile',\n  state: () => ({\n    basicInfo: null,\n    avatarUpdateTime: null\n  }),\n\n  getters: {\n    profileAvatarUrl: (state) => {\n      const avatar = state.basicInfo?.avatar\n      if (!avatar) return null\n      return avatar.startsWith('http') ? avatar : `${MEDIA_URL}${avatar}`\n    }\n  },\n\n  actions: {\n    // 清理 store 数据\n    clearStore() {\n      this.basicInfo = null\n      this.avatarUpdateTime = null\n      localStorage.removeItem('profile')  // 清除持久化数据\n    },\n\n    // 获取档案基本信息\n    async fetchBasicInfo() {\n      try {\n        // 先清理旧数据\n        this.clearStore()\n        const response = await profile.getData()\n        if (response?.data?.code === 200 && response?.data?.data?.basic_info) {\n          console.log('Fetched basicInfo:', response.data.data.basic_info)\n          this.basicInfo = response.data.data.basic_info\n          this.avatarUpdateTime = Date.now()\n          console.log('Store state after fetch:', {\n            basicInfo: this.basicInfo,\n            avatarUpdateTime: this.avatarUpdateTime\n          })\n          return this.basicInfo\n        }\n        return null\n      } catch (error) {\n        console.error('获取档案基本信息失败:', error)\n        throw error\n      }\n    },\n\n    // 更新头像\n    async updateAvatar(formData) {\n      try {\n        const response = await profile.uploadAvatar(formData)\n        if (response?.data?.code === 200) {\n          // 直接更新头像\n          if (this.basicInfo) {\n            console.log('Updating avatar:', response.data.data.avatar)\n            this.basicInfo.avatar = response.data.data.avatar\n            this.avatarUpdateTime = Date.now()\n            // 触发头像更新事件\n            eventBus.emit('avatar-updated', response.data.data.avatar)\n            console.log('Store state after update:', {\n              basicInfo: this.basicInfo,\n              avatarUpdateTime: this.avatarUpdateTime\n            })\n          }\n          return response\n        }\n        throw new Error('上传失败')\n      } catch (error) {\n        throw error\n      }\n    }\n  },\n\n  persist: {\n    enabled: true,\n    strategies: [\n      {\n        key: 'profile',\n        storage: localStorage,\n        paths: ['basicInfo', 'avatarUpdateTime']\n      }\n    ]\n  }\n}) "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}