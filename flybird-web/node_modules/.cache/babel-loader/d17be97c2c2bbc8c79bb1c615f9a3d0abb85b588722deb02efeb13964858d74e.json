{"ast":null,"code":"import axios from 'axios';\nimport { STORAGE_KEYS } from '@/utils/storage';\nimport config from '@/config';\nconst request = axios.create({\n  baseURL: config.API_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  retry: 3,\n  retryDelay: 1000\n});\n\n// 添加重试拦截器\nrequest.interceptors.response.use(undefined, async err => {\n  const config = err.config;\n\n  // 如果配置不存在或未设置重试选项，直接返回错误\n  if (!config || !config.retry) {\n    return Promise.reject(err);\n  }\n\n  // 设置重试次数\n  config.__retryCount = config.__retryCount || 0;\n\n  // 检查是否已超过重试次数\n  if (config.__retryCount >= config.retry) {\n    return Promise.reject(err);\n  }\n\n  // 增加重试次数\n  config.__retryCount += 1;\n  console.log(`Retrying request (${config.__retryCount}/${config.retry})`);\n\n  // 创建新的 Promise 来处理重试延迟\n  const backoff = new Promise(resolve => {\n    setTimeout(() => {\n      resolve();\n    }, config.retryDelay || 1000);\n  });\n\n  // 等待延迟后重试请求\n  await backoff;\n  return request(config);\n});\n\n// 请求拦截器\nrequest.interceptors.request.use(config => {\n  const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  console.log('Request:', {\n    url: config.url,\n    method: config.method,\n    headers: config.headers,\n    data: config.data\n  });\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nrequest.interceptors.response.use(response => {\n  return response;\n}, error => {\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","STORAGE_KEYS","config","request","create","baseURL","API_URL","timeout","headers","retry","retryDelay","interceptors","response","use","undefined","err","Promise","reject","__retryCount","console","log","backoff","resolve","setTimeout","token","localStorage","getItem","TOKEN","url","method","data","error"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport { STORAGE_KEYS } from '@/utils/storage'\nimport config from '@/config'\n\nconst request = axios.create({\n  baseURL: config.API_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  retry: 3,\n  retryDelay: 1000\n})\n\n// 添加重试拦截器\nrequest.interceptors.response.use(undefined, async (err) => {\n  const config = err.config;\n  \n  // 如果配置不存在或未设置重试选项，直接返回错误\n  if (!config || !config.retry) {\n    return Promise.reject(err);\n  }\n  \n  // 设置重试次数\n  config.__retryCount = config.__retryCount || 0;\n  \n  // 检查是否已超过重试次数\n  if (config.__retryCount >= config.retry) {\n    return Promise.reject(err);\n  }\n  \n  // 增加重试次数\n  config.__retryCount += 1;\n  console.log(`Retrying request (${config.__retryCount}/${config.retry})`);\n  \n  // 创建新的 Promise 来处理重试延迟\n  const backoff = new Promise((resolve) => {\n    setTimeout(() => {\n      resolve();\n    }, config.retryDelay || 1000);\n  });\n  \n  // 等待延迟后重试请求\n  await backoff;\n  return request(config);\n});\n\n// 请求拦截器\nrequest.interceptors.request.use(\n  config => {\n    const token = localStorage.getItem(STORAGE_KEYS.TOKEN)\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`\n    }\n    console.log('Request:', {\n      url: config.url,\n      method: config.method,\n      headers: config.headers,\n      data: config.data\n    })\n    return config\n  },\n  error => {\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\nrequest.interceptors.response.use(\n  response => {\n    return response\n  },\n  error => {\n    return Promise.reject(error)\n  }\n)\n\nexport default request"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,OAAOC,MAAM,MAAM,UAAU;AAE7B,MAAMC,OAAO,GAAGH,KAAK,CAACI,MAAM,CAAC;EAC3BC,OAAO,EAAEH,MAAM,CAACI,OAAO;EACvBC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,KAAK,EAAE,CAAC;EACRC,UAAU,EAAE;AACd,CAAC,CAAC;;AAEF;AACAP,OAAO,CAACQ,YAAY,CAACC,QAAQ,CAACC,GAAG,CAACC,SAAS,EAAE,MAAOC,GAAG,IAAK;EAC1D,MAAMb,MAAM,GAAGa,GAAG,CAACb,MAAM;;EAEzB;EACA,IAAI,CAACA,MAAM,IAAI,CAACA,MAAM,CAACO,KAAK,EAAE;IAC5B,OAAOO,OAAO,CAACC,MAAM,CAACF,GAAG,CAAC;EAC5B;;EAEA;EACAb,MAAM,CAACgB,YAAY,GAAGhB,MAAM,CAACgB,YAAY,IAAI,CAAC;;EAE9C;EACA,IAAIhB,MAAM,CAACgB,YAAY,IAAIhB,MAAM,CAACO,KAAK,EAAE;IACvC,OAAOO,OAAO,CAACC,MAAM,CAACF,GAAG,CAAC;EAC5B;;EAEA;EACAb,MAAM,CAACgB,YAAY,IAAI,CAAC;EACxBC,OAAO,CAACC,GAAG,CAAC,qBAAqBlB,MAAM,CAACgB,YAAY,IAAIhB,MAAM,CAACO,KAAK,GAAG,CAAC;;EAExE;EACA,MAAMY,OAAO,GAAG,IAAIL,OAAO,CAAEM,OAAO,IAAK;IACvCC,UAAU,CAAC,MAAM;MACfD,OAAO,CAAC,CAAC;IACX,CAAC,EAAEpB,MAAM,CAACQ,UAAU,IAAI,IAAI,CAAC;EAC/B,CAAC,CAAC;;EAEF;EACA,MAAMW,OAAO;EACb,OAAOlB,OAAO,CAACD,MAAM,CAAC;AACxB,CAAC,CAAC;;AAEF;AACAC,OAAO,CAACQ,YAAY,CAACR,OAAO,CAACU,GAAG,CAC9BX,MAAM,IAAI;EACR,MAAMsB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAACzB,YAAY,CAAC0B,KAAK,CAAC;EACtD,IAAIH,KAAK,EAAE;IACTtB,MAAM,CAACM,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUgB,KAAK,EAAE;EACrD;EACAL,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE;IACtBQ,GAAG,EAAE1B,MAAM,CAAC0B,GAAG;IACfC,MAAM,EAAE3B,MAAM,CAAC2B,MAAM;IACrBrB,OAAO,EAAEN,MAAM,CAACM,OAAO;IACvBsB,IAAI,EAAE5B,MAAM,CAAC4B;EACf,CAAC,CAAC;EACF,OAAO5B,MAAM;AACf,CAAC,EACD6B,KAAK,IAAI;EACP,OAAOf,OAAO,CAACC,MAAM,CAACc,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA5B,OAAO,CAACQ,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC/BD,QAAQ,IAAI;EACV,OAAOA,QAAQ;AACjB,CAAC,EACDmB,KAAK,IAAI;EACP,OAAOf,OAAO,CAACC,MAAM,CAACc,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAe5B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}