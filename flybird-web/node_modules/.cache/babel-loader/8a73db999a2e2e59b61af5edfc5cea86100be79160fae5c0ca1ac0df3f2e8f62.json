{"ast":null,"code":"import { createVNode as _createVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"resume-editor\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_snackbar = _resolveComponent(\"v-snackbar\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode($setup[\"ToolbarPanel\"]), _createVNode($setup[\"Canvas\"], {\n    ref: \"canvas\",\n    onElementSelect: $setup.handleElementSelect,\n    onDataFieldsUpdate: $setup.handleDataFieldsUpdate\n  }, null, 512 /* NEED_PATCH */), _createVNode($setup[\"PropertyPanel\"], {\n    \"selected-element\": $setup.selectedElement,\n    \"data-fields\": $setup.dataFields,\n    onUpdate: $setup.handleElementUpdate\n  }, null, 8 /* PROPS */, [\"selected-element\", \"data-fields\"]), _createVNode($setup[\"SaveTemplateDialog\"], {\n    modelValue: $setup.showSaveDialog,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.showSaveDialog = $event),\n    onSave: $setup.handleSaveTemplate\n  }, null, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_v_snackbar, {\n    modelValue: $setup.snackbar.show,\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.snackbar.show = $event),\n    color: $setup.snackbar.color,\n    timeout: 3000\n  }, {\n    default: _withCtx(() => [_createTextVNode(_toDisplayString($setup.snackbar.text), 1 /* TEXT */)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\", \"color\"])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createVNode","$setup","ref","onElementSelect","handleElementSelect","onDataFieldsUpdate","handleDataFieldsUpdate","selectedElement","dataFields","onUpdate","handleElementUpdate","modelValue","showSaveDialog","_cache","$event","onSave","handleSaveTemplate","_component_v_snackbar","snackbar","show","color","timeout","default","_withCtx","_createTextVNode","_toDisplayString","text","_"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/views/resume-editor/index.vue"],"sourcesContent":["<template>\n  <div class=\"resume-editor\">\n    <ToolbarPanel />\n    <Canvas \n      ref=\"canvas\"\n      @element-select=\"handleElementSelect\"\n      @data-fields-update=\"handleDataFieldsUpdate\"\n    />\n    <PropertyPanel \n      :selected-element=\"selectedElement\"\n      :data-fields=\"dataFields\"\n      @update=\"handleElementUpdate\"\n    />\n    <SaveTemplateDialog\n      v-model=\"showSaveDialog\"\n      @save=\"handleSaveTemplate\"\n    />\n    <v-snackbar\n      v-model=\"snackbar.show\"\n      :color=\"snackbar.color\"\n      :timeout=\"3000\"\n    >\n      {{ snackbar.text }}\n    </v-snackbar>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue'\nimport ToolbarPanel from './components/ToolbarPanel.vue'\nimport Canvas from './components/Canvas.vue'\nimport PropertyPanel from './components/PropertyPanel.vue'\nimport SaveTemplateDialog from './components/SaveTemplateDialog.vue'\nimport { useTemplateStore } from '@/stores/template'\n\nconst canvas = ref(null)\nconst selectedElement = ref(null)\nconst dataFields = ref([])\nconst showSaveDialog = ref(false)\nconst snackbar = ref({\n  show: false,\n  text: '',\n  color: 'success'\n})\n\nconst templateStore = useTemplateStore()\n\n// 显示消息\nconst showMessage = (text, color = 'success') => {\n  snackbar.value = {\n    show: true,\n    text,\n    color\n  }\n}\n\n// 处理元素选择\nconst handleElementSelect = (element) => {\n  selectedElement.value = element\n}\n\n// 处理数据字段更新\nconst handleDataFieldsUpdate = (fields) => {\n  dataFields.value = fields\n}\n\n// 处理元素更新\nconst handleElementUpdate = (update) => {\n  if (canvas.value) {\n    canvas.value.updateElement(update)\n  }\n}\n\n// 处理保存模板\nconst handleSaveTemplate = async (formData) => {\n  try {\n    // 获取画布数据\n    const canvasData = canvas.value.getCanvasData()\n    \n    // 构造完整的模板数据\n    const templateData = {\n      ...formData,\n      components: canvasData.elements,\n      layout: {\n        type: 'grid',\n        columns: 12,\n        gap: '1rem',\n        areas: []\n      },\n      theme: {\n        colors: {\n          primary: '#000000',\n          secondary: '#666666',\n          background: '#ffffff',\n          accent: '#ff0000'\n        },\n        typography: {\n          title: {\n            font: 'Arial',\n            size: '24px',\n            weight: 'bold'\n          },\n          body: {\n            font: 'Arial',\n            size: '14px',\n            weight: 'normal'\n          }\n        },\n        spacing: {\n          unit: '1rem',\n          section: '2rem'\n        }\n      }\n    }\n\n    // 保存模板\n    await templateStore.saveTemplate(templateData)\n    showMessage('模板保存成功')\n    showSaveDialog.value = false\n  } catch (error) {\n    console.error('保存模板失败:', error)\n    showMessage(error.message || '保存失败，请重试', 'error')\n  }\n}\n</script>\n\n<style scoped>\n.resume-editor {\n  display: flex;\n  height: 100%;\n  background-color: #f5f5f5;\n}\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAe;;;uBAA1BC,mBAAA,CAuBM,OAvBNC,UAuBM,GAtBJC,YAAA,CAAgBC,MAAA,mBAChBD,YAAA,CAIEC,MAAA;IAHAC,GAAG,EAAC,QAAQ;IACXC,eAAc,EAAEF,MAAA,CAAAG,mBAAmB;IACnCC,kBAAkB,EAAEJ,MAAA,CAAAK;kCAEvBN,YAAA,CAIEC,MAAA;IAHC,kBAAgB,EAAEA,MAAA,CAAAM,eAAe;IACjC,aAAW,EAAEN,MAAA,CAAAO,UAAU;IACvBC,QAAM,EAAER,MAAA,CAAAS;gEAEXV,YAAA,CAGEC,MAAA;IAhBNU,UAAA,EAceV,MAAA,CAAAW,cAAc;IAd7B,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAceb,MAAA,CAAAW,cAAc,GAAAE,MAAA;IACtBC,MAAI,EAAEd,MAAA,CAAAe;2CAEThB,YAAA,CAMaiB,qBAAA;IAvBjBN,UAAA,EAkBeV,MAAA,CAAAiB,QAAQ,CAACC,IAAI;IAlB5B,uBAAAN,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAkBeb,MAAA,CAAAiB,QAAQ,CAACC,IAAI,GAAAL,MAAA;IACrBM,KAAK,EAAEnB,MAAA,CAAAiB,QAAQ,CAACE,KAAK;IACrBC,OAAO,EAAE;;IApBhBC,OAAA,EAAAC,QAAA,CAsBM,MAAmB,CAtBzBC,gBAAA,CAAAC,gBAAA,CAsBSxB,MAAA,CAAAiB,QAAQ,CAACQ,IAAI,iB;IAtBtBC,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}