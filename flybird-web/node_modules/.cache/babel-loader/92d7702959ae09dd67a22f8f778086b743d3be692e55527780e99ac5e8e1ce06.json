{"ast":null,"code":"import \"core-js/modules/esnext.iterator.map.js\";\nimport { ref, watch, onMounted, computed } from 'vue';\nimport { CheckIcon, XMarkIcon } from '@heroicons/vue/24/outline';\nimport { useRouter } from 'vue-router';\nimport * as membership from '@/api/membership';\nimport { ElMessage } from 'element-plus';\nexport default {\n  __name: 'ProDialog',\n  props: {\n    modelValue: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: ['update:modelValue'],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n    const props = __props;\n    const emit = __emit;\n    const router = useRouter();\n    const dialogVisible = ref(false);\n    const membershipTiers = ref([]);\n\n    // 获取会员等级数据\n    const fetchMembershipTiers = async () => {\n      try {\n        const response = await membership.getTiers();\n        if (response?.data?.code === 200) {\n          membershipTiers.value = response.data.data;\n        }\n      } catch (error) {\n        console.error('获取会员等级失败:', error);\n      }\n    };\n\n    // 组件挂载时获取套餐数据\n    onMounted(() => {\n      fetchMembershipTiers();\n    });\n\n    // 监听 modelValue 变化\n    watch(() => props.modelValue, val => {\n      dialogVisible.value = val;\n      if (val && membershipTiers.value.length === 0) {\n        fetchMembershipTiers();\n      }\n    });\n\n    // 监听对话框状态变化\n    watch(() => dialogVisible.value, val => {\n      emit('update:modelValue', val);\n    });\n\n    // 计算套餐数据\n    const plans = computed(() => {\n      if (!membershipTiers.value.length) return [];\n      const tier = membershipTiers.value[0]; // 使用第一个会员等级\n\n      return [{\n        id: `${tier.id}_monthly`,\n        name: '月度会员',\n        price: tier.price_monthly,\n        period: '月',\n        description: '适合短期求职',\n        hot: false,\n        features: Object.values(tier.benefits).map(benefit => benefit.description)\n      }, {\n        id: `${tier.id}_quarterly`,\n        name: '季度会员',\n        price: tier.price_quarterly,\n        period: '季',\n        description: `相当于 ¥${(tier.price_quarterly / 3).toFixed(1)}/月`,\n        hot: true,\n        features: Object.values(tier.benefits).map(benefit => benefit.description)\n      }, {\n        id: `${tier.id}_yearly`,\n        name: '年度会员',\n        price: tier.price_yearly,\n        period: '年',\n        description: `相当于 ¥${(tier.price_yearly / 12).toFixed(1)}/月`,\n        hot: false,\n        features: Object.values(tier.benefits).map(benefit => benefit.description)\n      }];\n    });\n\n    // 选择套餐\n    const selectPlan = async plan => {\n      try {\n        const [tierId, duration] = plan.id.split('_');\n\n        // 创建订单\n        const orderResponse = await membership.createOrder({\n          tier_id: parseInt(tierId),\n          duration: duration,\n          payment_method: 'alipay' // 默认使用支付宝\n        });\n        if (orderResponse?.data?.code === 200) {\n          const orderData = orderResponse.data.data;\n\n          // 创建支付\n          const paymentResponse = await membership.createPayment({\n            order_no: orderData.order_no,\n            payment_method: 'alipay'\n          });\n          if (paymentResponse?.data?.code === 200) {\n            const paymentData = paymentResponse.data.data;\n            // 关闭弹窗\n            dialogVisible.value = false;\n            // 在新窗口打开支付链接\n            window.open(paymentData.payment_url, '_blank');\n          }\n        }\n      } catch (error) {\n        console.error('创建订单失败:', error);\n        ElMessage.error(error.response?.data?.message || '创建订单失败');\n      }\n    };\n    const __returned__ = {\n      props,\n      emit,\n      router,\n      dialogVisible,\n      membershipTiers,\n      fetchMembershipTiers,\n      plans,\n      selectPlan,\n      ref,\n      watch,\n      onMounted,\n      computed,\n      get CheckIcon() {\n        return CheckIcon;\n      },\n      get XMarkIcon() {\n        return XMarkIcon;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      get membership() {\n        return membership;\n      },\n      get ElMessage() {\n        return ElMessage;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watch","onMounted","computed","CheckIcon","XMarkIcon","useRouter","membership","ElMessage","props","__props","emit","__emit","router","dialogVisible","membershipTiers","fetchMembershipTiers","response","getTiers","data","code","value","error","console","modelValue","val","length","plans","tier","id","name","price","price_monthly","period","description","hot","features","Object","values","benefits","map","benefit","price_quarterly","toFixed","price_yearly","selectPlan","plan","tierId","duration","split","orderResponse","createOrder","tier_id","parseInt","payment_method","orderData","paymentResponse","createPayment","order_no","paymentData","window","open","payment_url","message"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/components/ProDialog.vue"],"sourcesContent":["<template>\n  <el-dialog\n    v-model=\"dialogVisible\"\n    title=\"开通会员\"\n    width=\"800px\"\n    :close-on-click-modal=\"false\"\n    class=\"pro-dialog\"\n  >\n    <div class=\"p-6\">\n      <!-- 标题区域 -->\n      <div class=\"text-center mb-8\">\n        <h2 class=\"text-2xl font-bold text-gray-900\">选择适合您的会员套餐</h2>\n        <p class=\"mt-2 text-gray-600\">解锁全部高级功能，让您的求职之路更加顺畅</p>\n      </div>\n\n      <!-- 套餐卡片区域 -->\n      <div class=\"grid md:grid-cols-3 gap-6\">\n        <div \n          v-for=\"plan in plans\" \n          :key=\"plan.id\"\n          :class=\"[\n            'bg-white rounded-xl border-2 p-6 transition-all duration-300',\n            plan.hot \n              ? 'border-blue-500 shadow-lg relative transform hover:scale-105'\n              : 'border-gray-200 hover:border-blue-500 hover:shadow-lg'\n          ]\"\n        >\n          <!-- 推荐标签 -->\n          <div v-if=\"plan.hot\" class=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n            <span class=\"bg-blue-500 text-white px-4 py-1 rounded-full text-sm\">最受欢迎</span>\n          </div>\n          \n          <div class=\"text-center\">\n            <h3 class=\"text-lg font-semibold text-gray-900\">{{ plan.name }}</h3>\n            <div class=\"mt-4\">\n              <span class=\"text-3xl font-bold\">¥{{ plan.price }}</span>\n              <span class=\"text-gray-500\">/{{ plan.period }}</span>\n            </div>\n            <div class=\"mt-2 text-sm text-gray-500\">{{ plan.description }}</div>\n          </div>\n          \n          <div class=\"mt-6 space-y-4\">\n            <div v-for=\"(feature, index) in plan.features\" :key=\"index\" class=\"flex items-center\">\n              <CheckIcon class=\"w-5 h-5 text-green-500\" />\n              <span class=\"ml-2 text-gray-600\">{{ feature }}</span>\n            </div>\n          </div>\n          \n          <button \n            :class=\"[\n              'mt-6 w-full py-2 px-4 rounded-lg transition-colors',\n              plan.hot\n                ? 'bg-blue-600 text-white hover:bg-blue-700'\n                : 'border border-blue-600 text-blue-600 hover:bg-blue-50'\n            ]\"\n            @click=\"selectPlan(plan)\"\n          >\n            选择套餐\n          </button>\n        </div>\n      </div>\n\n      <!-- 功能对比 -->\n      <div class=\"mt-12\">\n        <h3 class=\"text-lg font-semibold text-gray-900 mb-4\">会员功能对比</h3>\n        <div class=\"overflow-x-auto\">\n          <table class=\"w-full\">\n            <thead>\n              <tr class=\"border-b\">\n                <th class=\"py-3 text-left text-gray-600\">功能</th>\n                <th class=\"py-3 text-center text-gray-600\">普通用户</th>\n                <th class=\"py-3 text-center text-gray-600\">会员用户</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr class=\"border-b\">\n                <td class=\"py-3 text-gray-900\">简历导入解析</td>\n                <td class=\"py-3 text-center\"><XMarkIcon class=\"w-5 h-5 text-gray-400 mx-auto\" /></td>\n                <td class=\"py-3 text-center\"><CheckIcon class=\"w-5 h-5 text-green-500 mx-auto\" /></td>\n              </tr>\n              <tr class=\"border-b\">\n                <td class=\"py-3 text-gray-900\">AI优化建议</td>\n                <td class=\"py-3 text-center\"><XMarkIcon class=\"w-5 h-5 text-gray-400 mx-auto\" /></td>\n                <td class=\"py-3 text-center\"><CheckIcon class=\"w-5 h-5 text-green-500 mx-auto\" /></td>\n              </tr>\n              <tr class=\"border-b\">\n                <td class=\"py-3 text-gray-900\">简历导出次数</td>\n                <td class=\"py-3 text-center text-gray-600\">3次/月</td>\n                <td class=\"py-3 text-center text-gray-600\">无限制</td>\n              </tr>\n              <tr class=\"border-b\">\n                <td class=\"py-3 text-gray-900\">模板使用数量</td>\n                <td class=\"py-3 text-center text-gray-600\">3个</td>\n                <td class=\"py-3 text-center text-gray-600\">无限制</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  </el-dialog>\n</template>\n\n<script setup>\nimport { ref, watch, onMounted, computed } from 'vue'\nimport { CheckIcon, XMarkIcon } from '@heroicons/vue/24/outline'\nimport { useRouter } from 'vue-router'\nimport * as membership from '@/api/membership'\nimport { ElMessage } from 'element-plus'\n\nconst props = defineProps({\n  modelValue: {\n    type: Boolean,\n    default: false\n  }\n})\n\nconst emit = defineEmits(['update:modelValue'])\nconst router = useRouter()\nconst dialogVisible = ref(false)\nconst membershipTiers = ref([])\n\n// 获取会员等级数据\nconst fetchMembershipTiers = async () => {\n  try {\n    const response = await membership.getTiers()\n    if (response?.data?.code === 200) {\n      membershipTiers.value = response.data.data\n    }\n  } catch (error) {\n    console.error('获取会员等级失败:', error)\n  }\n}\n\n// 组件挂载时获取套餐数据\nonMounted(() => {\n  fetchMembershipTiers()\n})\n\n// 监听 modelValue 变化\nwatch(() => props.modelValue, (val) => {\n  dialogVisible.value = val\n  if (val && membershipTiers.value.length === 0) {\n    fetchMembershipTiers()\n  }\n})\n\n// 监听对话框状态变化\nwatch(() => dialogVisible.value, (val) => {\n  emit('update:modelValue', val)\n})\n\n// 计算套餐数据\nconst plans = computed(() => {\n  if (!membershipTiers.value.length) return []\n  \n  const tier = membershipTiers.value[0] // 使用第一个会员等级\n  \n  return [\n    {\n      id: `${tier.id}_monthly`,\n      name: '月度会员',\n      price: tier.price_monthly,\n      period: '月',\n      description: '适合短期求职',\n      hot: false,\n      features: Object.values(tier.benefits).map(benefit => benefit.description)\n    },\n    {\n      id: `${tier.id}_quarterly`,\n      name: '季度会员',\n      price: tier.price_quarterly,\n      period: '季',\n      description: `相当于 ¥${(tier.price_quarterly / 3).toFixed(1)}/月`,\n      hot: true,\n      features: Object.values(tier.benefits).map(benefit => benefit.description)\n    },\n    {\n      id: `${tier.id}_yearly`,\n      name: '年度会员',\n      price: tier.price_yearly,\n      period: '年',\n      description: `相当于 ¥${(tier.price_yearly / 12).toFixed(1)}/月`,\n      hot: false,\n      features: Object.values(tier.benefits).map(benefit => benefit.description)\n    }\n  ]\n})\n\n// 选择套餐\nconst selectPlan = async (plan) => {\n  try {\n    const [tierId, duration] = plan.id.split('_')\n    \n    // 创建订单\n    const orderResponse = await membership.createOrder({\n      tier_id: parseInt(tierId),\n      duration: duration,\n      payment_method: 'alipay' // 默认使用支付宝\n    })\n\n    if (orderResponse?.data?.code === 200) {\n      const orderData = orderResponse.data.data\n      \n      // 创建支付\n      const paymentResponse = await membership.createPayment({\n        order_no: orderData.order_no,\n        payment_method: 'alipay'\n      })\n\n      if (paymentResponse?.data?.code === 200) {\n        const paymentData = paymentResponse.data.data\n        // 关闭弹窗\n        dialogVisible.value = false\n        // 在新窗口打开支付链接\n        window.open(paymentData.payment_url, '_blank')\n      }\n    }\n  } catch (error) {\n    console.error('创建订单失败:', error)\n    ElMessage.error(error.response?.data?.message || '创建订单失败')\n  }\n}\n</script>\n\n<style scoped>\n.pro-dialog :deep(.el-dialog) {\n  border-radius: 1rem;\n}\n\n.pro-dialog :deep(.el-dialog__header) {\n  padding: 1rem 1.5rem;\n  margin: 0;\n  border-bottom: 1px solid #e5e7eb;\n}\n\n.pro-dialog :deep(.el-dialog__body) {\n  padding: 0;\n}\n\n.pro-dialog :deep(.el-dialog__title) {\n  font-weight: 600;\n}\n</style> "],"mappings":";AAwGA,SAASA,GAAG,EAAEC,KAAK,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,KAAI;AACpD,SAASC,SAAS,EAAEC,SAAS,QAAQ,2BAA0B;AAC/D,SAASC,SAAS,QAAQ,YAAW;AACrC,OAAO,KAAKC,UAAU,MAAM,kBAAiB;AAC7C,SAASC,SAAS,QAAQ,cAAa;;;;;;;;;;;;;;;IAEvC,MAAMC,KAAK,GAAGC,OAAA;IAOd,MAAMC,IAAI,GAAGC,MAAA;IACb,MAAMC,MAAM,GAAGP,SAAS,CAAC;IACzB,MAAMQ,aAAa,GAAGd,GAAG,CAAC,KAAK;IAC/B,MAAMe,eAAe,GAAGf,GAAG,CAAC,EAAE;;IAE9B;IACA,MAAMgB,oBAAoB,GAAG,MAAAA,CAAA,KAAY;MACvC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMV,UAAU,CAACW,QAAQ,CAAC;QAC3C,IAAID,QAAQ,EAAEE,IAAI,EAAEC,IAAI,KAAK,GAAG,EAAE;UAChCL,eAAe,CAACM,KAAK,GAAGJ,QAAQ,CAACE,IAAI,CAACA,IAAG;QAC3C;MACF,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK;MAClC;IACF;;IAEA;IACApB,SAAS,CAAC,MAAM;MACdc,oBAAoB,CAAC;IACvB,CAAC;;IAED;IACAf,KAAK,CAAC,MAAMQ,KAAK,CAACe,UAAU,EAAGC,GAAG,IAAK;MACrCX,aAAa,CAACO,KAAK,GAAGI,GAAE;MACxB,IAAIA,GAAG,IAAIV,eAAe,CAACM,KAAK,CAACK,MAAM,KAAK,CAAC,EAAE;QAC7CV,oBAAoB,CAAC;MACvB;IACF,CAAC;;IAED;IACAf,KAAK,CAAC,MAAMa,aAAa,CAACO,KAAK,EAAGI,GAAG,IAAK;MACxCd,IAAI,CAAC,mBAAmB,EAAEc,GAAG;IAC/B,CAAC;;IAED;IACA,MAAME,KAAK,GAAGxB,QAAQ,CAAC,MAAM;MAC3B,IAAI,CAACY,eAAe,CAACM,KAAK,CAACK,MAAM,EAAE,OAAO,EAAC;MAE3C,MAAME,IAAI,GAAGb,eAAe,CAACM,KAAK,CAAC,CAAC,CAAC,EAAC;;MAEtC,OAAO,CACL;QACEQ,EAAE,EAAE,GAAGD,IAAI,CAACC,EAAE,UAAU;QACxBC,IAAI,EAAE,MAAM;QACZC,KAAK,EAAEH,IAAI,CAACI,aAAa;QACzBC,MAAM,EAAE,GAAG;QACXC,WAAW,EAAE,QAAQ;QACrBC,GAAG,EAAE,KAAK;QACVC,QAAQ,EAAEC,MAAM,CAACC,MAAM,CAACV,IAAI,CAACW,QAAQ,CAAC,CAACC,GAAG,CAACC,OAAO,IAAIA,OAAO,CAACP,WAAW;MAC3E,CAAC,EACD;QACEL,EAAE,EAAE,GAAGD,IAAI,CAACC,EAAE,YAAY;QAC1BC,IAAI,EAAE,MAAM;QACZC,KAAK,EAAEH,IAAI,CAACc,eAAe;QAC3BT,MAAM,EAAE,GAAG;QACXC,WAAW,EAAE,QAAQ,CAACN,IAAI,CAACc,eAAe,GAAG,CAAC,EAAEC,OAAO,CAAC,CAAC,CAAC,IAAI;QAC9DR,GAAG,EAAE,IAAI;QACTC,QAAQ,EAAEC,MAAM,CAACC,MAAM,CAACV,IAAI,CAACW,QAAQ,CAAC,CAACC,GAAG,CAACC,OAAO,IAAIA,OAAO,CAACP,WAAW;MAC3E,CAAC,EACD;QACEL,EAAE,EAAE,GAAGD,IAAI,CAACC,EAAE,SAAS;QACvBC,IAAI,EAAE,MAAM;QACZC,KAAK,EAAEH,IAAI,CAACgB,YAAY;QACxBX,MAAM,EAAE,GAAG;QACXC,WAAW,EAAE,QAAQ,CAACN,IAAI,CAACgB,YAAY,GAAG,EAAE,EAAED,OAAO,CAAC,CAAC,CAAC,IAAI;QAC5DR,GAAG,EAAE,KAAK;QACVC,QAAQ,EAAEC,MAAM,CAACC,MAAM,CAACV,IAAI,CAACW,QAAQ,CAAC,CAACC,GAAG,CAACC,OAAO,IAAIA,OAAO,CAACP,WAAW;MAC3E,EACF;IACF,CAAC;;IAED;IACA,MAAMW,UAAU,GAAG,MAAOC,IAAI,IAAK;MACjC,IAAI;QACF,MAAM,CAACC,MAAM,EAAEC,QAAQ,CAAC,GAAGF,IAAI,CAACjB,EAAE,CAACoB,KAAK,CAAC,GAAG;;QAE5C;QACA,MAAMC,aAAa,GAAG,MAAM3C,UAAU,CAAC4C,WAAW,CAAC;UACjDC,OAAO,EAAEC,QAAQ,CAACN,MAAM,CAAC;UACzBC,QAAQ,EAAEA,QAAQ;UAClBM,cAAc,EAAE,QAAQ,CAAC;QAC3B,CAAC;QAED,IAAIJ,aAAa,EAAE/B,IAAI,EAAEC,IAAI,KAAK,GAAG,EAAE;UACrC,MAAMmC,SAAS,GAAGL,aAAa,CAAC/B,IAAI,CAACA,IAAG;;UAExC;UACA,MAAMqC,eAAe,GAAG,MAAMjD,UAAU,CAACkD,aAAa,CAAC;YACrDC,QAAQ,EAAEH,SAAS,CAACG,QAAQ;YAC5BJ,cAAc,EAAE;UAClB,CAAC;UAED,IAAIE,eAAe,EAAErC,IAAI,EAAEC,IAAI,KAAK,GAAG,EAAE;YACvC,MAAMuC,WAAW,GAAGH,eAAe,CAACrC,IAAI,CAACA,IAAG;YAC5C;YACAL,aAAa,CAACO,KAAK,GAAG,KAAI;YAC1B;YACAuC,MAAM,CAACC,IAAI,CAACF,WAAW,CAACG,WAAW,EAAE,QAAQ;UAC/C;QACF;MACF,CAAC,CAAC,OAAOxC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK;QAC9Bd,SAAS,CAACc,KAAK,CAACA,KAAK,CAACL,QAAQ,EAAEE,IAAI,EAAE4C,OAAO,IAAI,QAAQ;MAC3D;IACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}