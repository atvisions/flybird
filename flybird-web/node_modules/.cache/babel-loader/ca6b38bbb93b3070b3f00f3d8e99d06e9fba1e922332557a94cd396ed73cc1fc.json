{"ast":null,"code":"import _objectSpread from \"/Users/liuzhao/Documents/Projects/flybird/flybird-web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { ref, computed } from 'vue';\nimport { VueCropper } from 'vue-cropper';\nimport 'vue-cropper/dist/index.css';\nimport { useAccountStore } from '@/stores/account';\nimport profile from '@/api/profile';\nimport { showToast } from '@/components/ToastMessage';\nexport default {\n  __name: 'AvatarUploadDialog',\n  props: {\n    modelValue: Boolean\n  },\n  emits: ['update:modelValue', 'success'],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n    const props = __props;\n    const emit = __emit;\n    const visible = computed({\n      get: () => props.modelValue,\n      set: val => emit('update:modelValue', val)\n    });\n    const accountStore = useAccountStore();\n    const cropperRef = ref(null);\n    const cropImg = ref('');\n    const uploading = ref(false);\n    const fileInput = ref(null);\n\n    // 选择图片\n    const handleSelectImage = e => {\n      const file = e.target.files[0];\n      if (!file) return;\n      if (!file.type.includes('image/')) {\n        showToast('请选择图片文件', 'warning');\n        return;\n      }\n      const reader = new FileReader();\n      reader.onload = e => {\n        cropImg.value = e.target.result;\n      };\n      reader.readAsDataURL(file);\n    };\n\n    // 裁剪图片\n    const cropImage = () => {\n      // 实时预览\n    };\n\n    // 上传裁剪后的图片\n    const handleCropUpload = async () => {\n      try {\n        uploading.value = true;\n        // 获取裁剪后的图片 blob 数据\n        const blob = await new Promise(resolve => {\n          cropperRef.value.getCropBlob(data => {\n            resolve(data);\n          });\n        });\n\n        // 构建 FormData\n        const formData = new FormData();\n        formData.append('avatar', blob, 'avatar.png');\n        const response = await profile.uploadAvatar(formData);\n        if (response?.data?.code === 200) {\n          accountStore.userInfo = _objectSpread(_objectSpread({}, accountStore.userInfo), {}, {\n            avatar: response.data.data.avatar\n          });\n          localStorage.setItem('userInfo', JSON.stringify(accountStore.userInfo));\n          showToast('头像上传成功', 'success');\n          accountStore.avatarUpdateTime = Date.now();\n          emit('success');\n          visible.value = false;\n        }\n      } catch (error) {\n        console.error('头像上传失败:', error);\n        if (error.response) {\n          console.error('Error response:', {\n            status: error.response.status,\n            data: error.response.data,\n            headers: error.response.headers\n          });\n        }\n        showToast(error.response?.data?.message || '头像上传失败', 'error');\n      } finally {\n        uploading.value = false;\n      }\n    };\n\n    // 重新选择图片\n    const handleReselect = () => {\n      cropImg.value = '';\n      fileInput.value.value = ''; // 清空文件输入\n    };\n\n    // 取消\n    const handleCancel = () => {\n      cropImg.value = '';\n      fileInput.value.value = '';\n      visible.value = false;\n    };\n\n    // 确认上传\n    const handleConfirm = () => {\n      if (!cropImg.value) {\n        showToast('请先选择图片', 'warning');\n        return;\n      }\n      handleCropUpload();\n    };\n    const __returned__ = {\n      props,\n      emit,\n      visible,\n      accountStore,\n      cropperRef,\n      cropImg,\n      uploading,\n      fileInput,\n      handleSelectImage,\n      cropImage,\n      handleCropUpload,\n      handleReselect,\n      handleCancel,\n      handleConfirm,\n      ref,\n      computed,\n      get VueCropper() {\n        return VueCropper;\n      },\n      get useAccountStore() {\n        return useAccountStore;\n      },\n      get profile() {\n        return profile;\n      },\n      get showToast() {\n        return showToast;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","VueCropper","useAccountStore","profile","showToast","props","__props","emit","__emit","visible","get","modelValue","set","val","accountStore","cropperRef","cropImg","uploading","fileInput","handleSelectImage","e","file","target","files","type","includes","reader","FileReader","onload","value","result","readAsDataURL","cropImage","handleCropUpload","blob","Promise","resolve","getCropBlob","data","formData","FormData","append","response","uploadAvatar","code","userInfo","_objectSpread","avatar","localStorage","setItem","JSON","stringify","avatarUpdateTime","Date","now","error","console","status","headers","message","handleReselect","handleCancel","handleConfirm"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/views/user/MyProfile/dialogs/AvatarUploadDialog.vue"],"sourcesContent":["<template>\n  <el-dialog\n    v-model=\"visible\"\n    title=\"上传头像\"\n    width=\"500px\"\n    :close-on-click-modal=\"false\"\n    :close-on-press-escape=\"false\"\n  >\n    <div class=\"avatar-upload-container\">\n      <!-- 上传按钮 -->\n      <div class=\"upload-btn\" v-if=\"!cropImg\">\n        <input\n          type=\"file\"\n          ref=\"fileInput\"\n          accept=\"image/*\"\n          @change=\"handleSelectImage\"\n          style=\"display: none\"\n        />\n        <el-button type=\"primary\" @click=\"$refs.fileInput.click()\">\n          选择图片\n        </el-button>\n      </div>\n      \n      <!-- 图片裁剪组件 -->\n      <vue-cropper v-if=\"cropImg\"\n        ref=\"cropperRef\"\n        :img=\"cropImg\"\n        :info=\"true\"\n        :autoCrop=\"true\"\n        :fixedBox=\"true\"\n        :centerBox=\"true\"\n        :fixed=\"true\"\n        :fixedNumber=\"[1, 1]\"\n        :canScale=\"false\"\n        :full=\"false\"\n        :outputType=\"'png'\"\n        @realTime=\"cropImage\"\n      />\n    </div>\n    <template #footer>\n      <div class=\"dialog-footer\">\n        <el-button @click=\"handleCancel\">取消</el-button>\n        <el-button v-if=\"cropImg\" @click=\"handleReselect\">重新选择</el-button>\n        <el-button type=\"primary\" @click=\"handleConfirm\" :loading=\"uploading\">\n          确认上传\n        </el-button>\n      </div>\n    </template>\n  </el-dialog>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue'\nimport { VueCropper } from 'vue-cropper'\nimport 'vue-cropper/dist/index.css'\nimport { useAccountStore } from '@/stores/account'\nimport profile from '@/api/profile'\nimport { showToast } from '@/components/ToastMessage'\n\nconst props = defineProps({\n  modelValue: Boolean\n})\n\nconst emit = defineEmits(['update:modelValue', 'success'])\n\nconst visible = computed({\n  get: () => props.modelValue,\n  set: (val) => emit('update:modelValue', val)\n})\n\nconst accountStore = useAccountStore()\nconst cropperRef = ref(null)\nconst cropImg = ref('')\nconst uploading = ref(false)\nconst fileInput = ref(null)\n\n// 选择图片\nconst handleSelectImage = (e) => {\n  const file = e.target.files[0]\n  if (!file) return\n  \n  if (!file.type.includes('image/')) {\n    showToast('请选择图片文件', 'warning')\n    return\n  }\n  \n  const reader = new FileReader()\n  reader.onload = (e) => {\n    cropImg.value = e.target.result\n  }\n  reader.readAsDataURL(file)\n}\n\n// 裁剪图片\nconst cropImage = () => {\n  // 实时预览\n}\n\n// 上传裁剪后的图片\nconst handleCropUpload = async () => {\n  try {\n    uploading.value = true\n    // 获取裁剪后的图片 blob 数据\n    const blob = await new Promise((resolve) => {\n      cropperRef.value.getCropBlob((data) => {\n        resolve(data)\n      })\n    })\n    \n    // 构建 FormData\n    const formData = new FormData()\n    formData.append('avatar', blob, 'avatar.png')\n    \n    const response = await profile.uploadAvatar(formData)\n    \n    if (response?.data?.code === 200) {\n      accountStore.userInfo = {\n        ...accountStore.userInfo,\n        avatar: response.data.data.avatar\n      }\n      localStorage.setItem('userInfo', JSON.stringify(accountStore.userInfo))\n      showToast('头像上传成功', 'success')\n      accountStore.avatarUpdateTime = Date.now()\n      emit('success')\n      visible.value = false\n    }\n  } catch (error) {\n    console.error('头像上传失败:', error)\n    if (error.response) {\n      console.error('Error response:', {\n        status: error.response.status,\n        data: error.response.data,\n        headers: error.response.headers\n      })\n    }\n    showToast(error.response?.data?.message || '头像上传失败', 'error')\n  } finally {\n    uploading.value = false\n  }\n}\n\n// 重新选择图片\nconst handleReselect = () => {\n  cropImg.value = ''\n  fileInput.value.value = '' // 清空文件输入\n}\n\n// 取消\nconst handleCancel = () => {\n  cropImg.value = ''\n  fileInput.value.value = ''\n  visible.value = false\n}\n\n// 确认上传\nconst handleConfirm = () => {\n  if (!cropImg.value) {\n    showToast('请先选择图片', 'warning')\n    return\n  }\n  handleCropUpload()\n}\n</script>\n\n<style scoped>\n.avatar-upload-container {\n  width: 100%;\n  height: 400px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.upload-btn {\n  text-align: center;\n}\n\n.cropper {\n  width: 100%;\n  height: 100%;\n}\n\n.dialog-footer {\n  display: flex;\n  justify-content: flex-end;\n  gap: 12px;\n  padding-top: 20px;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}