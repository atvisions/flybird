{"ast":null,"code":"import { defineStore } from 'pinia';\nimport { auth } from '@/api/auth';\nimport request from '@/utils/request';\nimport router from '@/router';\nimport { useAccountStore } from '@/stores/account';\nimport { useUserStore } from '@/stores/user';\nexport const useAuthStore = defineStore('auth', {\n  state: () => ({\n    isLoggedIn: false,\n    rememberMe: false,\n    token: null,\n    refreshToken: null,\n    tokenExpiresAt: null\n  }),\n  actions: {\n    async login(credentials, rememberMe = false) {\n      try {\n        console.log('Login attempt with:', {\n          account: credentials.account,\n          rememberMe\n        });\n        const response = await auth.loginWithPassword(credentials);\n        console.log('Login response:', response);\n        if (response) {\n          // 保存 token\n          this.token = response.token;\n          this.refreshToken = response.refresh;\n          localStorage.setItem('token', response.token);\n          localStorage.setItem('refresh_token', response.refresh);\n\n          // 设置请求头\n          request.defaults.headers.common['Authorization'] = `Bearer ${response.token}`;\n\n          // 设置登录状态\n          this.isLoggedIn = true;\n\n          // 登录成功后立即获取用户信息并存储\n          const accountStore = useAccountStore();\n          console.log('Fetching user info after login...');\n          await accountStore.fetchUserInfo();\n          console.log('User info fetched:', accountStore.userInfo);\n\n          // 记住账号功能\n          if (rememberMe) {\n            localStorage.setItem('remember_me', 'true');\n            localStorage.setItem('remembered_account', credentials.account);\n          }\n\n          // 显示登录成功提示\n          showToast('登录成功', 'success');\n\n          // 获取重定向地址\n          const redirect = router.currentRoute.value.query.redirect || '/user?tab=home';\n          // 执行重定向\n          router.push(redirect);\n          return true;\n        }\n        return false;\n      } catch (error) {\n        console.error('Login failed:', error);\n        console.error('Error details:', {\n          message: error.message,\n          response: error.response?.data,\n          status: error.response?.status\n        });\n        showToast(error.message || '登录失败，请稍后重试', 'error');\n        throw error;\n      }\n    },\n    async logout() {\n      try {\n        if (this.refreshToken) {\n          await auth.logout();\n        }\n      } finally {\n        this.clearAuth();\n        const accountStore = useAccountStore();\n        const userStore = useUserStore();\n        accountStore.clearUserInfo();\n        userStore.clearUserInfo();\n\n        // 清除所有相关的 localStorage 数据\n        const keysToRemove = ['token', 'refresh_token', 'token_expires_at', 'remember_me', 'remembered_account', 'userInfo', 'isLoggedIn', 'avatarUpdateTime', 'backgroundImage'\n        // 添加其他可能存在的 key\n        ];\n        keysToRemove.forEach(key => {\n          localStorage.removeItem(key);\n        });\n        router.push('/login');\n      }\n    },\n    clearAuth() {\n      // 清除请求头\n      delete request.defaults.headers.common['Authorization'];\n\n      // 重置状态\n      this.isLoggedIn = false;\n      this.token = null;\n      this.refreshToken = null;\n      this.tokenExpiresAt = null;\n      this.rememberMe = false;\n    },\n    // 检查 token 是否过期\n    isTokenExpired() {\n      return !this.tokenExpiresAt || new Date().getTime() > this.tokenExpiresAt;\n    },\n    // 从 localStorage 恢复认证状态\n    restoreAuth() {\n      const token = localStorage.getItem('token');\n      const refreshToken = localStorage.getItem('refresh_token');\n      const tokenExpiresAt = localStorage.getItem('token_expires_at');\n      const rememberMe = localStorage.getItem('remember_me') === 'true';\n      if (token && refreshToken && tokenExpiresAt) {\n        this.token = token;\n        this.refreshToken = refreshToken;\n        this.tokenExpiresAt = parseInt(tokenExpiresAt);\n        this.rememberMe = rememberMe;\n        this.isLoggedIn = !this.isTokenExpired();\n        if (this.isLoggedIn) {\n          request.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        }\n      }\n    }\n  }\n});","map":{"version":3,"names":["defineStore","auth","request","router","useAccountStore","useUserStore","useAuthStore","state","isLoggedIn","rememberMe","token","refreshToken","tokenExpiresAt","actions","login","credentials","console","log","account","response","loginWithPassword","refresh","localStorage","setItem","defaults","headers","common","accountStore","fetchUserInfo","userInfo","showToast","redirect","currentRoute","value","query","push","error","message","data","status","logout","clearAuth","userStore","clearUserInfo","keysToRemove","forEach","key","removeItem","isTokenExpired","Date","getTime","restoreAuth","getItem","parseInt"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/stores/auth.js"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { auth } from '@/api/auth'\nimport request from '@/utils/request'\nimport router from '@/router'\nimport { useAccountStore } from '@/stores/account'\nimport { useUserStore } from '@/stores/user'\n\nexport const useAuthStore = defineStore('auth', {\n  state: () => ({\n    isLoggedIn: false,\n    rememberMe: false,\n    token: null,\n    refreshToken: null,\n    tokenExpiresAt: null\n  }),\n\n  actions: {\n    async login(credentials, rememberMe = false) {\n      try {\n        console.log('Login attempt with:', { account: credentials.account, rememberMe })\n        const response = await auth.loginWithPassword(credentials)\n        console.log('Login response:', response)\n        \n        if (response) {\n          // 保存 token\n          this.token = response.token\n          this.refreshToken = response.refresh\n          localStorage.setItem('token', response.token)\n          localStorage.setItem('refresh_token', response.refresh)\n          \n          // 设置请求头\n          request.defaults.headers.common['Authorization'] = `Bearer ${response.token}`\n          \n          // 设置登录状态\n          this.isLoggedIn = true\n          \n          // 登录成功后立即获取用户信息并存储\n          const accountStore = useAccountStore()\n          console.log('Fetching user info after login...')\n          await accountStore.fetchUserInfo()\n          console.log('User info fetched:', accountStore.userInfo)\n          \n          // 记住账号功能\n          if (rememberMe) {\n            localStorage.setItem('remember_me', 'true')\n            localStorage.setItem('remembered_account', credentials.account)\n          }\n          \n          // 显示登录成功提示\n          showToast('登录成功', 'success')\n          \n          // 获取重定向地址\n          const redirect = router.currentRoute.value.query.redirect || '/user?tab=home'\n          // 执行重定向\n          router.push(redirect)\n          \n          return true\n        }\n        return false\n      } catch (error) {\n        console.error('Login failed:', error)\n        console.error('Error details:', {\n          message: error.message,\n          response: error.response?.data,\n          status: error.response?.status\n        })\n        showToast(error.message || '登录失败，请稍后重试', 'error')\n        throw error\n      }\n    },\n\n    async logout() {\n      try {\n        if (this.refreshToken) {\n          await auth.logout()\n        }\n      } finally {\n        this.clearAuth()\n        const accountStore = useAccountStore()\n        const userStore = useUserStore()\n        accountStore.clearUserInfo()\n        userStore.clearUserInfo()\n        \n        // 清除所有相关的 localStorage 数据\n        const keysToRemove = [\n          'token',\n          'refresh_token',\n          'token_expires_at',\n          'remember_me',\n          'remembered_account',\n          'userInfo',\n          'isLoggedIn',\n          'avatarUpdateTime',\n          'backgroundImage',\n          // 添加其他可能存在的 key\n        ]\n        \n        keysToRemove.forEach(key => {\n          localStorage.removeItem(key)\n        })\n        \n        router.push('/login')\n      }\n    },\n\n    clearAuth() {\n      // 清除请求头\n      delete request.defaults.headers.common['Authorization']\n      \n      // 重置状态\n      this.isLoggedIn = false\n      this.token = null\n      this.refreshToken = null\n      this.tokenExpiresAt = null\n      this.rememberMe = false\n    },\n\n    // 检查 token 是否过期\n    isTokenExpired() {\n      return !this.tokenExpiresAt || new Date().getTime() > this.tokenExpiresAt\n    },\n\n    // 从 localStorage 恢复认证状态\n    restoreAuth() {\n      const token = localStorage.getItem('token')\n      const refreshToken = localStorage.getItem('refresh_token')\n      const tokenExpiresAt = localStorage.getItem('token_expires_at')\n      const rememberMe = localStorage.getItem('remember_me') === 'true'\n\n      if (token && refreshToken && tokenExpiresAt) {\n        this.token = token\n        this.refreshToken = refreshToken\n        this.tokenExpiresAt = parseInt(tokenExpiresAt)\n        this.rememberMe = rememberMe\n        this.isLoggedIn = !this.isTokenExpired()\n        \n        if (this.isLoggedIn) {\n          request.defaults.headers.common['Authorization'] = `Bearer ${token}`\n        }\n      }\n    }\n  }\n}) "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}