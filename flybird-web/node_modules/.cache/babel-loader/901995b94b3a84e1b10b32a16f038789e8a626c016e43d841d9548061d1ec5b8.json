{"ast":null,"code":"import _objectSpread from \"/Users/liuzhao/Documents/Projects/flybird/flybird-web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { ref, computed } from 'vue';\nimport draggable from 'vuedraggable';\nimport SingleLayout from '../layouts/SingleLayout.vue';\nimport DoubleLayout from '../layouts/DoubleLayout.vue';\nimport TripleLayout from '../layouts/TripleLayout.vue';\nimport DesignElement from './DesignElement.vue';\nexport default {\n  __name: 'Canvas',\n  props: {\n    scale: {\n      type: Number,\n      default: 1\n    }\n  },\n  emits: ['element-select'],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    const props = __props;\n    const emit = __emit;\n\n    // 状态\n    const layouts = ref([]);\n    const isDragOver = ref(false);\n    const isDragging = ref(false);\n    const elements = ref([]);\n    const selectedElement = ref(null);\n\n    // 处理画布点击\n    const handleCanvasClick = e => {\n      if (e.target === e.currentTarget) {\n        selectedElement.value = null;\n        emit('element-select', null);\n      }\n    };\n\n    // 处理元素选择\n    const handleElementSelect = element => {\n      selectedElement.value = element;\n      emit('element-select', element);\n    };\n\n    // 处理元素更新\n    const handleElementUpdate = updatedElement => {\n      const index = elements.value.findIndex(el => el.id === updatedElement.id);\n      if (index > -1) {\n        elements.value[index] = _objectSpread({}, updatedElement);\n        if (selectedElement.value?.id === updatedElement.id) {\n          selectedElement.value = _objectSpread({}, updatedElement);\n        }\n      }\n    };\n\n    // 处理元素拖拽\n    const handleElementDrop = event => {\n      const elementType = event.dataTransfer.getData('element-type');\n      if (!elementType) return;\n      try {\n        const elementConfig = JSON.parse(event.dataTransfer.getData('element-config'));\n        const rect = event.currentTarget.getBoundingClientRect();\n        const x = (event.clientX - rect.left) / props.scale;\n        const y = (event.clientY - rect.top) / props.scale;\n        const newElement = {\n          id: Date.now().toString(),\n          type: elementType,\n          x,\n          y,\n          width: elementConfig.width || 100,\n          height: elementConfig.height || 100,\n          rotation: 0,\n          content: elementConfig.content,\n          placeholder: elementConfig.placeholder,\n          styles: elementConfig.styles || {}\n        };\n        elements.value.push(newElement);\n        // 自动选中新添加的元素\n        selectedElement.value = newElement;\n        emit('element-select', newElement);\n        isDragOver.value = false;\n      } catch (error) {\n        console.error('处理元素拖放时出错:', error);\n      }\n    };\n\n    // 处理拖拽开始\n    const handleDragStart = () => {\n      isDragging.value = true;\n    };\n\n    // 处理拖拽结束\n    const handleDragEnd = () => {\n      isDragging.value = false;\n      isDragOver.value = false;\n    };\n\n    // 处理拖拽进入\n    const handleDragEnter = event => {\n      event.preventDefault();\n      if (!isDragging.value) {\n        isDragOver.value = true;\n      }\n    };\n\n    // 处理拖拽离开\n    const handleDragLeave = event => {\n      event.preventDefault();\n      isDragOver.value = false;\n    };\n\n    // 处理组件变化\n    const handleChange = event => {\n      isDragOver.value = false;\n      if (event.added) {\n        try {\n          const component = event.added.element;\n          if (component.type === 'layout') {\n            const newLayout = processComponentData(component);\n            layouts.value.splice(event.added.newIndex, 1, newLayout);\n          }\n        } catch (error) {\n          console.error('Canvas - 处理组件时出错:', error);\n        }\n      } else if (event.removed) {\n        isDragOver.value = false;\n      }\n    };\n\n    // 获取布局组件\n    const getLayoutComponent = layout => {\n      const layoutMap = {\n        'grid': layout.config.columns === 12 ? SingleLayout : layout.config.areas.length === 2 ? DoubleLayout : TripleLayout,\n        'single': SingleLayout,\n        'double': DoubleLayout,\n        'triple': TripleLayout\n      };\n      return layoutMap[layout.config.type] || SingleLayout;\n    };\n\n    // 处理组件数据\n    const processComponentData = component => {\n      return {\n        id: Date.now(),\n        type: component.type,\n        name: component.name,\n        config: _objectSpread(_objectSpread({}, component.config), {}, {\n          type: component.name === '单栏布局' ? 'single' : component.name === '双栏布局' ? 'double' : 'triple',\n          layout: component.name === '单栏布局' ? 1 : component.name === '双栏布局' ? 2 : 3,\n          styles: component.styles || {},\n          components: []\n        })\n      };\n    };\n\n    // 移除布局\n    const removeLayout = layout => {\n      const index = layouts.value.findIndex(l => l.id === layout.id);\n      if (index > -1) {\n        layouts.value.splice(index, 1);\n        isDragOver.value = false;\n      }\n    };\n\n    // 更新布局配置\n    const updateLayoutConfig = (layoutId, config) => {\n      const layout = layouts.value.find(l => l.id === layoutId);\n      if (layout) {\n        layout.config = _objectSpread(_objectSpread({}, layout.config), config);\n      }\n    };\n\n    // 添加组件到布局\n    const addComponentToLayout = (layoutId, component, column) => {\n      const layout = layouts.value.find(l => l.id === layoutId);\n      if (layout) {\n        if (!layout.config.components) {\n          layout.config.components = [];\n        }\n        layout.config.components.push({\n          id: Date.now(),\n          type: component.type,\n          name: component.name,\n          column,\n          config: component.config || {}\n        });\n      }\n    };\n\n    // 导出布局数据\n    const exportLayoutData = () => {\n      return {\n        layouts: layouts.value.map(layout => ({\n          id: layout.id,\n          type: layout.type,\n          name: layout.name,\n          config: layout.config\n        })),\n        elements: elements.value.map(element => _objectSpread(_objectSpread({}, element), {}, {\n          dataBinding: element.dataBinding\n        }))\n      };\n    };\n\n    // 加载模板\n    const loadTemplate = (template, profileData) => {\n      // 加载布局\n      layouts.value = template.layouts || [];\n\n      // 加载设计元素\n      elements.value = (template.elements || []).map(element => {\n        // 如果元素有数据绑定,注入实际数据\n        if (element.dataBinding) {\n          const {\n            field\n          } = element.dataBinding;\n\n          // 根据元素类型设置实际内容\n          switch (element.type) {\n            case 'image':\n              element.content = profileData?.[field];\n              break;\n            case 'text':\n              element.content = profileData?.[field];\n              break;\n          }\n        }\n        return element;\n      });\n    };\n\n    // 计算内边距\n    const padding = computed(() => {\n      return props.scale < 1 ? `${Math.round(38 * props.scale)}px` : '38px';\n    });\n\n    // 更新元素\n    const updateElement = updatedElement => {\n      const index = elements.value.findIndex(el => el.id === updatedElement.id);\n      if (index > -1) {\n        elements.value[index] = updatedElement;\n      }\n    };\n\n    // 更新元素数据绑定\n    const updateElementDataBinding = (elementId, binding) => {\n      const element = elements.value.find(el => el.id === elementId);\n      if (element) {\n        element.dataBinding = binding;\n        // 更新选中元素的状态\n        if (selectedElement.value?.id === elementId) {\n          selectedElement.value = _objectSpread({}, element);\n        }\n      }\n    };\n\n    // 暴露方法给父组件\n    __expose({\n      loadTemplate,\n      exportLayoutData,\n      updateLayoutConfig,\n      addComponentToLayout,\n      removeLayout,\n      updateElementDataBinding\n    });\n    const __returned__ = {\n      props,\n      emit,\n      layouts,\n      isDragOver,\n      isDragging,\n      elements,\n      selectedElement,\n      handleCanvasClick,\n      handleElementSelect,\n      handleElementUpdate,\n      handleElementDrop,\n      handleDragStart,\n      handleDragEnd,\n      handleDragEnter,\n      handleDragLeave,\n      handleChange,\n      getLayoutComponent,\n      processComponentData,\n      removeLayout,\n      updateLayoutConfig,\n      addComponentToLayout,\n      exportLayoutData,\n      loadTemplate,\n      padding,\n      updateElement,\n      updateElementDataBinding,\n      ref,\n      computed,\n      get draggable() {\n        return draggable;\n      },\n      SingleLayout,\n      DoubleLayout,\n      TripleLayout,\n      DesignElement\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","draggable","SingleLayout","DoubleLayout","TripleLayout","DesignElement","props","__props","emit","__emit","layouts","isDragOver","isDragging","elements","selectedElement","handleCanvasClick","e","target","currentTarget","value","handleElementSelect","element","handleElementUpdate","updatedElement","index","findIndex","el","id","_objectSpread","handleElementDrop","event","elementType","dataTransfer","getData","elementConfig","JSON","parse","rect","getBoundingClientRect","x","clientX","left","scale","y","clientY","top","newElement","Date","now","toString","type","width","height","rotation","content","placeholder","styles","push","error","console","handleDragStart","handleDragEnd","handleDragEnter","preventDefault","handleDragLeave","handleChange","added","component","newLayout","processComponentData","splice","newIndex","removed","getLayoutComponent","layout","layoutMap","config","columns","areas","length","name","components","removeLayout","l","updateLayoutConfig","layoutId","find","addComponentToLayout","column","exportLayoutData","map","dataBinding","loadTemplate","template","profileData","field","padding","Math","round","updateElement","updateElementDataBinding","elementId","binding","__expose"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/views/resume-editor/components/Canvas.vue"],"sourcesContent":["<template>\n  <div class=\"canvas-container\">\n    <div class=\"canvas-wrapper\">\n      <div \n        class=\"canvas-content\" \n        :style=\"{ transform: `scale(${scale})` }\"\n        @dragover.prevent\n        @drop.prevent=\"handleElementDrop\"\n        @dragenter.prevent=\"handleDragEnter\"\n        @dragleave.prevent=\"handleDragLeave\"\n        @click.self=\"handleCanvasClick\"\n      >\n        <!-- 设计元素列表 -->\n        <template v-for=\"element in elements\" :key=\"element.id\">\n          <DesignElement\n            :element=\"element\"\n            :is-selected=\"selectedElement?.id === element.id\"\n            :scale=\"scale\"\n            @select=\"handleElementSelect\"\n            @update=\"handleElementUpdate\"\n          />\n        </template>\n\n        <!-- 布局列表 -->\n        <draggable\n          v-model=\"layouts\"\n          :group=\"{ name: 'layouts', pull: false, put: true }\"\n          item-key=\"id\"\n          class=\"canvas-drop-area\"\n          :class=\"{ 'drag-over': isDragOver }\"\n          :animation=\"200\"\n          ghost-class=\"ghost\"\n          @start=\"handleDragStart\"\n          @end=\"handleDragEnd\"\n          @change=\"handleChange\"\n        >\n          <template #item=\"{ element }\">\n            <div class=\"layout-wrapper\">\n              <div class=\"layout-actions\">\n                <v-btn\n                  icon=\"mdi-delete\"\n                  size=\"small\"\n                  color=\"error\"\n                  variant=\"text\"\n                  @click=\"removeLayout(element)\"\n                ></v-btn>\n              </div>\n              <component\n                :is=\"getLayoutComponent(element)\"\n                :config=\"element.config\"\n              ></component>\n            </div>\n          </template>\n\n          <template #header>\n            <div v-if=\"layouts.length === 0\" class=\"placeholder\">\n              <v-icon size=\"32\" class=\"mb-2\">mdi-plus</v-icon>\n              <span>拖拽布局到此处</span>\n            </div>\n          </template>\n        </draggable>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue'\nimport draggable from 'vuedraggable'\nimport SingleLayout from '../layouts/SingleLayout.vue'\nimport DoubleLayout from '../layouts/DoubleLayout.vue'\nimport TripleLayout from '../layouts/TripleLayout.vue'\nimport DesignElement from './DesignElement.vue'\n\nconst props = defineProps({\n  scale: {\n    type: Number,\n    default: 1\n  }\n})\n\nconst emit = defineEmits(['element-select'])\n\n// 状态\nconst layouts = ref([])\nconst isDragOver = ref(false)\nconst isDragging = ref(false)\nconst elements = ref([])\nconst selectedElement = ref(null)\n\n// 处理画布点击\nconst handleCanvasClick = (e) => {\n  if (e.target === e.currentTarget) {\n    selectedElement.value = null\n    emit('element-select', null)\n  }\n}\n\n// 处理元素选择\nconst handleElementSelect = (element) => {\n  selectedElement.value = element\n  emit('element-select', element)\n}\n\n// 处理元素更新\nconst handleElementUpdate = (updatedElement) => {\n  const index = elements.value.findIndex(el => el.id === updatedElement.id)\n  if (index > -1) {\n    elements.value[index] = { ...updatedElement }\n    if (selectedElement.value?.id === updatedElement.id) {\n      selectedElement.value = { ...updatedElement }\n    }\n  }\n}\n\n// 处理元素拖拽\nconst handleElementDrop = (event) => {\n  const elementType = event.dataTransfer.getData('element-type')\n  if (!elementType) return\n\n  try {\n    const elementConfig = JSON.parse(event.dataTransfer.getData('element-config'))\n    const rect = event.currentTarget.getBoundingClientRect()\n    const x = (event.clientX - rect.left) / props.scale\n    const y = (event.clientY - rect.top) / props.scale\n    \n    const newElement = {\n      id: Date.now().toString(),\n      type: elementType,\n      x,\n      y,\n      width: elementConfig.width || 100,\n      height: elementConfig.height || 100,\n      rotation: 0,\n      content: elementConfig.content,\n      placeholder: elementConfig.placeholder,\n      styles: elementConfig.styles || {}\n    }\n    \n    elements.value.push(newElement)\n    // 自动选中新添加的元素\n    selectedElement.value = newElement\n    emit('element-select', newElement)\n    isDragOver.value = false\n  } catch (error) {\n    console.error('处理元素拖放时出错:', error)\n  }\n}\n\n// 处理拖拽开始\nconst handleDragStart = () => {\n  isDragging.value = true\n}\n\n// 处理拖拽结束\nconst handleDragEnd = () => {\n  isDragging.value = false\n  isDragOver.value = false\n}\n\n// 处理拖拽进入\nconst handleDragEnter = (event) => {\n  event.preventDefault()\n  if (!isDragging.value) {\n    isDragOver.value = true\n  }\n}\n\n// 处理拖拽离开\nconst handleDragLeave = (event) => {\n  event.preventDefault()\n  isDragOver.value = false\n}\n\n// 处理组件变化\nconst handleChange = (event) => {\n  isDragOver.value = false\n  if (event.added) {\n    try {\n      const component = event.added.element\n      if (component.type === 'layout') {\n        const newLayout = processComponentData(component)\n        layouts.value.splice(event.added.newIndex, 1, newLayout)\n      }\n    } catch (error) {\n      console.error('Canvas - 处理组件时出错:', error)\n    }\n  } else if (event.removed) {\n    isDragOver.value = false\n  }\n}\n\n// 获取布局组件\nconst getLayoutComponent = (layout) => {\n  const layoutMap = {\n    'grid': layout.config.columns === 12 ? SingleLayout : \n           layout.config.areas.length === 2 ? DoubleLayout : TripleLayout,\n    'single': SingleLayout,\n    'double': DoubleLayout,\n    'triple': TripleLayout\n  }\n  return layoutMap[layout.config.type] || SingleLayout\n}\n\n// 处理组件数据\nconst processComponentData = (component) => {\n  return {\n    id: Date.now(),\n    type: component.type,\n    name: component.name,\n    config: {\n      ...component.config,\n      type: component.name === '单栏布局' ? 'single' : \n            component.name === '双栏布局' ? 'double' : 'triple',\n      layout: component.name === '单栏布局' ? 1 : \n             component.name === '双栏布局' ? 2 : 3,\n      styles: component.styles || {},\n      components: []\n    }\n  }\n}\n\n// 移除布局\nconst removeLayout = (layout) => {\n  const index = layouts.value.findIndex(l => l.id === layout.id)\n  if (index > -1) {\n    layouts.value.splice(index, 1)\n    isDragOver.value = false\n  }\n}\n\n// 更新布局配置\nconst updateLayoutConfig = (layoutId, config) => {\n  const layout = layouts.value.find(l => l.id === layoutId)\n  if (layout) {\n    layout.config = {\n      ...layout.config,\n      ...config\n    }\n  }\n}\n\n// 添加组件到布局\nconst addComponentToLayout = (layoutId, component, column) => {\n  const layout = layouts.value.find(l => l.id === layoutId)\n  if (layout) {\n    if (!layout.config.components) {\n      layout.config.components = []\n    }\n    layout.config.components.push({\n      id: Date.now(),\n      type: component.type,\n      name: component.name,\n      column,\n      config: component.config || {}\n    })\n  }\n}\n\n// 导出布局数据\nconst exportLayoutData = () => {\n  return {\n    layouts: layouts.value.map(layout => ({\n      id: layout.id,\n      type: layout.type,\n      name: layout.name,\n      config: layout.config\n    })),\n    elements: elements.value.map(element => ({\n      ...element,\n      dataBinding: element.dataBinding\n    }))\n  }\n}\n\n// 加载模板\nconst loadTemplate = (template, profileData) => {\n  // 加载布局\n  layouts.value = template.layouts || []\n  \n  // 加载设计元素\n  elements.value = (template.elements || []).map(element => {\n    // 如果元素有数据绑定,注入实际数据\n    if (element.dataBinding) {\n      const { field } = element.dataBinding\n      \n      // 根据元素类型设置实际内容\n      switch (element.type) {\n        case 'image':\n          element.content = profileData?.[field]\n          break\n        case 'text':\n          element.content = profileData?.[field]\n          break\n      }\n    }\n    return element\n  })\n}\n\n// 计算内边距\nconst padding = computed(() => {\n  return props.scale < 1 ? `${Math.round(38 * props.scale)}px` : '38px'\n})\n\n// 更新元素\nconst updateElement = (updatedElement) => {\n  const index = elements.value.findIndex(el => el.id === updatedElement.id)\n  if (index > -1) {\n    elements.value[index] = updatedElement\n  }\n}\n\n// 更新元素数据绑定\nconst updateElementDataBinding = (elementId, binding) => {\n  const element = elements.value.find(el => el.id === elementId)\n  if (element) {\n    element.dataBinding = binding\n    // 更新选中元素的状态\n    if (selectedElement.value?.id === elementId) {\n      selectedElement.value = { ...element }\n    }\n  }\n}\n\n// 暴露方法给父组件\ndefineExpose({\n  loadTemplate,\n  exportLayoutData,\n  updateLayoutConfig,\n  addComponentToLayout,\n  removeLayout,\n  updateElementDataBinding\n})\n</script>\n\n<style scoped>\n.canvas-container {\n  flex: 1;\n  overflow: hidden;\n  background: #f5f5f5;\n  position: relative;\n}\n\n.canvas-wrapper {\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  padding: 20px;\n}\n\n.canvas-content {\n  width: 794px; /* A4 纸宽度 */\n  min-height: 1123px; /* A4 纸高度 */\n  background: #ffffff;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\n  position: relative;\n  transform-origin: top center;\n}\n\n.canvas-drop-area {\n  min-height: 100px;\n  padding: 20px;\n  border: 2px dashed #dcdfe6;\n  border-radius: 4px;\n  margin: 10px;\n  transition: all 0.3s;\n}\n\n.canvas-drop-area.drag-over {\n  border-color: #409eff;\n  background: rgba(64, 158, 255, 0.1);\n}\n\n.placeholder {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  color: #909399;\n  font-size: 14px;\n  height: 100px;\n}\n\n.layout-wrapper {\n  position: relative;\n  margin-bottom: 10px;\n}\n\n.layout-actions {\n  position: absolute;\n  top: 4px;\n  right: 4px;\n  z-index: 1;\n  opacity: 0;\n  transition: opacity 0.3s;\n}\n\n.layout-wrapper:hover .layout-actions {\n  opacity: 1;\n}\n\n.ghost {\n  opacity: 0.5;\n  background: #c8ebfb;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}