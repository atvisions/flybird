{"ast":null,"code":"import { ref } from 'vue';\nimport { ElMessage } from 'element-plus';\nimport profile from '@/api/profile';\nimport { useProfileStore } from '@/stores/profile';\nexport function useProfileData() {\n  const loading = ref(false);\n  const basicInfo = ref(null);\n  const profileData = ref({});\n  const completionData = ref(null);\n  const profileStore = useProfileStore();\n\n  // 获取基本信息\n  const fetchBasicInfo = async () => {\n    try {\n      loading.value = true;\n      const response = await profile.getData();\n      if (response.data?.code === 200) {\n        basicInfo.value = response.data.data.basic_info;\n        profileData.value = response.data.data;\n        return basicInfo.value;\n      }\n    } catch (error) {\n      console.error('获取基本信息失败:', error);\n      ElMessage.error('获取基本信息失败');\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  // 获取模块数据\n  const fetchModuleData = async type => {\n    try {\n      loading.value = true;\n      const response = await profile.getData();\n      if (response.data?.code === 200) {\n        profileData.value = response.data.data;\n        return profileData.value[type];\n      }\n    } catch (error) {\n      console.error(`获取${type}数据失败:`, error);\n      ElMessage.error(`获取${type}数据失败`);\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  // 获取完整度数据\n  const fetchCompletionData = async () => {\n    try {\n      loading.value = true;\n      await profileStore.fetchCompleteness();\n      completionData.value = profileStore.completeness;\n      return completionData.value;\n    } catch (error) {\n      console.error('获取完整度数据失败:', error);\n      ElMessage.error('获取完整度数据失败');\n    } finally {\n      loading.value = false;\n    }\n  };\n  return {\n    loading,\n    basicInfo,\n    profileData,\n    completionData,\n    fetchBasicInfo,\n    fetchModuleData,\n    fetchCompletionData\n  };\n}","map":{"version":3,"names":["ref","ElMessage","profile","useProfileStore","useProfileData","loading","basicInfo","profileData","completionData","profileStore","fetchBasicInfo","value","response","getData","data","code","basic_info","error","console","fetchModuleData","type","fetchCompletionData","fetchCompleteness","completeness"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/composables/useProfileData.js"],"sourcesContent":["import { ref } from 'vue'\nimport { ElMessage } from 'element-plus'\nimport profile from '@/api/profile'\nimport { useProfileStore } from '@/stores/profile'\n\nexport function useProfileData() {\n  const loading = ref(false)\n  const basicInfo = ref(null)\n  const profileData = ref({})\n  const completionData = ref(null)\n  const profileStore = useProfileStore()\n\n  // 获取基本信息\n  const fetchBasicInfo = async () => {\n    try {\n      loading.value = true\n      const response = await profile.getData()\n      if (response.data?.code === 200) {\n        basicInfo.value = response.data.data.basic_info\n        profileData.value = response.data.data\n        return basicInfo.value\n      }\n    } catch (error) {\n      console.error('获取基本信息失败:', error)\n      ElMessage.error('获取基本信息失败')\n    } finally {\n      loading.value = false\n    }\n  }\n\n  // 获取模块数据\n  const fetchModuleData = async (type) => {\n    try {\n      loading.value = true\n      const response = await profile.getData()\n      if (response.data?.code === 200) {\n        profileData.value = response.data.data\n        return profileData.value[type]\n      }\n    } catch (error) {\n      console.error(`获取${type}数据失败:`, error)\n      ElMessage.error(`获取${type}数据失败`)\n    } finally {\n      loading.value = false\n    }\n  }\n\n  // 获取完整度数据\n  const fetchCompletionData = async () => {\n    try {\n      loading.value = true\n      await profileStore.fetchCompleteness()\n      completionData.value = profileStore.completeness\n      return completionData.value\n    } catch (error) {\n      console.error('获取完整度数据失败:', error)\n      ElMessage.error('获取完整度数据失败')\n    } finally {\n      loading.value = false\n    }\n  }\n\n  return {\n    loading,\n    basicInfo,\n    profileData,\n    completionData,\n    fetchBasicInfo,\n    fetchModuleData,\n    fetchCompletionData\n  }\n} "],"mappings":"AAAA,SAASA,GAAG,QAAQ,KAAK;AACzB,SAASC,SAAS,QAAQ,cAAc;AACxC,OAAOC,OAAO,MAAM,eAAe;AACnC,SAASC,eAAe,QAAQ,kBAAkB;AAElD,OAAO,SAASC,cAAcA,CAAA,EAAG;EAC/B,MAAMC,OAAO,GAAGL,GAAG,CAAC,KAAK,CAAC;EAC1B,MAAMM,SAAS,GAAGN,GAAG,CAAC,IAAI,CAAC;EAC3B,MAAMO,WAAW,GAAGP,GAAG,CAAC,CAAC,CAAC,CAAC;EAC3B,MAAMQ,cAAc,GAAGR,GAAG,CAAC,IAAI,CAAC;EAChC,MAAMS,YAAY,GAAGN,eAAe,CAAC,CAAC;;EAEtC;EACA,MAAMO,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACFL,OAAO,CAACM,KAAK,GAAG,IAAI;MACpB,MAAMC,QAAQ,GAAG,MAAMV,OAAO,CAACW,OAAO,CAAC,CAAC;MACxC,IAAID,QAAQ,CAACE,IAAI,EAAEC,IAAI,KAAK,GAAG,EAAE;QAC/BT,SAAS,CAACK,KAAK,GAAGC,QAAQ,CAACE,IAAI,CAACA,IAAI,CAACE,UAAU;QAC/CT,WAAW,CAACI,KAAK,GAAGC,QAAQ,CAACE,IAAI,CAACA,IAAI;QACtC,OAAOR,SAAS,CAACK,KAAK;MACxB;IACF,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;MACjChB,SAAS,CAACgB,KAAK,CAAC,UAAU,CAAC;IAC7B,CAAC,SAAS;MACRZ,OAAO,CAACM,KAAK,GAAG,KAAK;IACvB;EACF,CAAC;;EAED;EACA,MAAMQ,eAAe,GAAG,MAAOC,IAAI,IAAK;IACtC,IAAI;MACFf,OAAO,CAACM,KAAK,GAAG,IAAI;MACpB,MAAMC,QAAQ,GAAG,MAAMV,OAAO,CAACW,OAAO,CAAC,CAAC;MACxC,IAAID,QAAQ,CAACE,IAAI,EAAEC,IAAI,KAAK,GAAG,EAAE;QAC/BR,WAAW,CAACI,KAAK,GAAGC,QAAQ,CAACE,IAAI,CAACA,IAAI;QACtC,OAAOP,WAAW,CAACI,KAAK,CAACS,IAAI,CAAC;MAChC;IACF,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,KAAKG,IAAI,OAAO,EAAEH,KAAK,CAAC;MACtChB,SAAS,CAACgB,KAAK,CAAC,KAAKG,IAAI,MAAM,CAAC;IAClC,CAAC,SAAS;MACRf,OAAO,CAACM,KAAK,GAAG,KAAK;IACvB;EACF,CAAC;;EAED;EACA,MAAMU,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI;MACFhB,OAAO,CAACM,KAAK,GAAG,IAAI;MACpB,MAAMF,YAAY,CAACa,iBAAiB,CAAC,CAAC;MACtCd,cAAc,CAACG,KAAK,GAAGF,YAAY,CAACc,YAAY;MAChD,OAAOf,cAAc,CAACG,KAAK;IAC7B,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;MAClChB,SAAS,CAACgB,KAAK,CAAC,WAAW,CAAC;IAC9B,CAAC,SAAS;MACRZ,OAAO,CAACM,KAAK,GAAG,KAAK;IACvB;EACF,CAAC;EAED,OAAO;IACLN,OAAO;IACPC,SAAS;IACTC,WAAW;IACXC,cAAc;IACdE,cAAc;IACdS,eAAe;IACfE;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}