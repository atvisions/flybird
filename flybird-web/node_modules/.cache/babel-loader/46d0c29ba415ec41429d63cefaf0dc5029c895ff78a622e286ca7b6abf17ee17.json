{"ast":null,"code":"import _objectSpread from \"/Users/liuzhao/Documents/Projects/flybird/flybird-web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport { ref, watch, computed } from 'vue';\nexport default {\n  __name: 'PropertyPanel',\n  props: {\n    selectedElement: {\n      type: Object,\n      default: null\n    },\n    dataFields: {\n      type: Array,\n      default: () => []\n    }\n  },\n  emits: ['update'],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n    const props = __props;\n    const emit = __emit;\n\n    // 属性状态\n    const borderRadius = ref(0);\n    const backgroundColor = ref('#409EFF');\n    const width = ref(200);\n    const height = ref(200);\n\n    // 文字相关状态\n    const textColor = ref('#333333');\n    const fontSize = ref(16);\n    const textAlign = ref('left');\n    const isBold = ref(false);\n    const fontFamily = ref('Microsoft YaHei');\n\n    // 字体选项\n    const fontFamilies = [{\n      title: '微软雅黑',\n      value: '\"Microsoft YaHei\", \"PingFang SC\", \"Hiragino Sans GB\"'\n    }, {\n      title: '宋体',\n      value: 'SimSun, \"Songti SC\"'\n    }, {\n      title: '黑体',\n      value: 'SimHei, \"Heiti SC\"'\n    }, {\n      title: '楷体',\n      value: 'KaiTi, \"Kaiti SC\"'\n    }, {\n      title: '仿宋',\n      value: 'FangSong, \"STFangsong\"'\n    }, {\n      title: 'Arial',\n      value: 'Arial, \"Helvetica Neue\", Helvetica'\n    }, {\n      title: 'Times New Roman',\n      value: '\"Times New Roman\", Times, serif'\n    }, {\n      title: '思源黑体',\n      value: '\"Source Han Sans CN\", \"Noto Sans CJK SC\"'\n    }];\n    const dataBinding = ref('');\n\n    // 计算属性\n    const panelTitle = computed(() => {\n      if (!props.selectedElement) return '';\n      switch (props.selectedElement.type) {\n        case 'image':\n          return '图片属性';\n        case 'shape':\n          return '形状属性';\n        default:\n          return '元素属性';\n      }\n    });\n    const showBorderRadius = computed(() => {\n      return props.selectedElement?.type === 'image' || props.selectedElement?.type === 'shape' && props.selectedElement?.shapeType !== 'triangle';\n    });\n    const showBackgroundColor = computed(() => {\n      return props.selectedElement?.type === 'shape';\n    });\n\n    // 将数据字段按组分类\n    const groupedDataFields = computed(() => {\n      const groups = {};\n      props.dataFields.forEach(field => {\n        if (!groups[field.group]) {\n          groups[field.group] = [];\n        }\n        groups[field.group].push(field);\n      });\n      const result = [];\n      Object.keys(groups).forEach(group => {\n        // 添加组标题\n        result.push({\n          type: 'group',\n          label: group,\n          field: null\n        });\n        // 添加组内字段\n        result.push(...groups[group]);\n      });\n      return result;\n    });\n\n    // 监听选中元素变化\n    watch(() => props.selectedElement, newElement => {\n      if (newElement) {\n        // 更新圆角值\n        borderRadius.value = parseInt(newElement.styles?.borderRadius || 0);\n        // 更新背景色\n        backgroundColor.value = newElement.styles?.backgroundColor || '#409EFF';\n        // 更新尺寸\n        width.value = newElement.width;\n        height.value = newElement.height;\n        // 更新文字样式\n        if (newElement.type === 'text') {\n          textColor.value = newElement.styles?.color || '#333333';\n          fontSize.value = parseInt(newElement.styles?.fontSize) || 16;\n          textAlign.value = newElement.styles?.textAlign || 'left';\n          isBold.value = newElement.styles?.fontWeight === 'bold';\n          fontFamily.value = newElement.styles?.fontFamily || 'Microsoft YaHei';\n        }\n      }\n    }, {\n      immediate: true\n    });\n\n    // 监听圆角变化\n    watch(borderRadius, newValue => {\n      handleStyleChange('borderRadius', `${newValue}px`);\n    });\n\n    // 监听背景色变化\n    watch(backgroundColor, newValue => {\n      handleStyleChange('backgroundColor', newValue);\n    });\n\n    // 监听尺寸变化\n    watch([width, height], () => {\n      handleSizeChange();\n    });\n\n    // 监听文字颜色变化\n    watch(textColor, newValue => {\n      handleStyleChange('color', newValue);\n    });\n\n    // 监听字体大小变化\n    watch(fontSize, newValue => {\n      handleStyleChange('fontSize', `${newValue}px`);\n    });\n\n    // 监听对齐方式变化\n    watch(textAlign, newValue => {\n      handleStyleChange('textAlign', newValue);\n    });\n\n    // 监听字体粗细变化\n    watch(isBold, newValue => {\n      handleStyleChange('fontWeight', newValue ? 'bold' : 'normal');\n    });\n\n    // 监听字体变化\n    watch(fontFamily, newValue => {\n      handleStyleChange('fontFamily', newValue);\n    });\n\n    // 应用数据绑定\n    const applyDataBinding = () => {\n      if (!props.selectedElement || props.selectedElement.type !== 'text' || !dataBinding.value) return;\n      const field = dataFields.find(f => f.field === dataBinding.value);\n      if (!field) return;\n      emit('update', _objectSpread(_objectSpread({}, props.selectedElement), {}, {\n        content: `{{${dataBinding.value}}}`,\n        dataBinding: {\n          field: dataBinding.value,\n          label: field.label\n        }\n      }));\n\n      // 清空选择\n      dataBinding.value = '';\n    };\n\n    // 监听选中元素变化时，重置数据绑定选择\n    watch(() => props.selectedElement, () => {\n      dataBinding.value = '';\n    }, {\n      immediate: true\n    });\n\n    // 处理样式变化\n    const handleStyleChange = (property, value) => {\n      if (!props.selectedElement) return;\n      emit('update', _objectSpread(_objectSpread({}, props.selectedElement), {}, {\n        styles: _objectSpread(_objectSpread({}, props.selectedElement.styles), {}, {\n          [property]: value\n        })\n      }));\n    };\n\n    // 处理尺寸变化\n    const handleSizeChange = () => {\n      if (!props.selectedElement) return;\n      emit('update', _objectSpread(_objectSpread({}, props.selectedElement), {}, {\n        width: width.value,\n        height: height.value\n      }));\n    };\n\n    // 处理层级变化\n    const handleZIndexChange = direction => {\n      if (!props.selectedElement) return;\n      const currentZIndex = parseInt(props.selectedElement.styles?.zIndex || 0);\n      const newZIndex = direction === 'up' ? currentZIndex + 1 : currentZIndex - 1;\n      emit('update', _objectSpread(_objectSpread({}, props.selectedElement), {}, {\n        styles: _objectSpread(_objectSpread({}, props.selectedElement.styles), {}, {\n          zIndex: newZIndex\n        })\n      }));\n    };\n    const __returned__ = {\n      props,\n      emit,\n      borderRadius,\n      backgroundColor,\n      width,\n      height,\n      textColor,\n      fontSize,\n      textAlign,\n      isBold,\n      fontFamily,\n      fontFamilies,\n      dataBinding,\n      panelTitle,\n      showBorderRadius,\n      showBackgroundColor,\n      groupedDataFields,\n      applyDataBinding,\n      handleStyleChange,\n      handleSizeChange,\n      handleZIndexChange,\n      ref,\n      watch,\n      computed\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watch","computed","props","__props","emit","__emit","borderRadius","backgroundColor","width","height","textColor","fontSize","textAlign","isBold","fontFamily","fontFamilies","title","value","dataBinding","panelTitle","selectedElement","type","showBorderRadius","shapeType","showBackgroundColor","groupedDataFields","groups","dataFields","forEach","field","group","push","result","Object","keys","label","newElement","parseInt","styles","color","fontWeight","immediate","newValue","handleStyleChange","handleSizeChange","applyDataBinding","find","f","_objectSpread","content","property","handleZIndexChange","direction","currentZIndex","zIndex","newZIndex"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/views/resume-editor/components/PropertyPanel.vue"],"sourcesContent":["<template>\n  <div class=\"property-panel\">\n    <template v-if=\"selectedElement\">\n      <div class=\"panel-header\">\n        <h3 class=\"panel-title\">{{ panelTitle }}</h3>\n      </div>\n      \n      <div class=\"panel-content\">\n        <!-- 圆角设置 -->\n        <div class=\"form-item\" v-if=\"showBorderRadius\">\n          <label>圆角</label>\n          <div class=\"slider-wrapper\">\n            <div class=\"d-flex align-center\">\n              <v-slider\n                v-model=\"borderRadius\"\n                :min=\"0\"\n                :max=\"100\"\n                :step=\"1\"\n                hide-details\n                class=\"mr-2\"\n              ></v-slider>\n              <v-text-field\n                v-model=\"borderRadius\"\n                type=\"number\"\n                style=\"width: 70px\"\n                density=\"compact\"\n                hide-details\n                variant=\"outlined\"\n              ></v-text-field>\n            </div>\n          </div>\n        </div>\n\n        <!-- 背景色设置 -->\n        <div class=\"form-item\" v-if=\"showBackgroundColor\">\n          <label>背景色</label>\n          <v-color-picker\n            v-model=\"backgroundColor\"\n            hide-inputs\n            mode=\"hex\"\n            width=\"100%\"\n            class=\"mt-2\"\n          ></v-color-picker>\n        </div>\n\n        <!-- 文字样式设置 -->\n        <template v-if=\"selectedElement?.type === 'text'\">\n          <div class=\"form-item\">\n            <label>文字颜色</label>\n            <v-color-picker\n              v-model=\"textColor\"\n              hide-inputs\n              mode=\"hex\"\n              width=\"100%\"\n              class=\"mt-2\"\n            ></v-color-picker>\n          </div>\n\n          <div class=\"form-item\">\n            <label>字体大小</label>\n            <v-slider\n              v-model=\"fontSize\"\n              :min=\"12\"\n              :max=\"72\"\n              :step=\"1\"\n              hide-details\n              class=\"mr-2\"\n            >\n              <template v-slot:append>\n                <v-text-field\n                  v-model=\"fontSize\"\n                  type=\"number\"\n                  style=\"width: 70px\"\n                  density=\"compact\"\n                  hide-details\n                  variant=\"outlined\"\n                ></v-text-field>\n              </template>\n            </v-slider>\n          </div>\n\n          <div class=\"form-item\">\n            <label>对齐方式</label>\n            <div class=\"d-flex gap-2\">\n              <v-btn-toggle\n                v-model=\"textAlign\"\n                density=\"compact\"\n                color=\"primary\"\n              >\n                <v-btn value=\"left\">\n                  <v-icon>mdi-format-align-left</v-icon>\n                </v-btn>\n                <v-btn value=\"center\">\n                  <v-icon>mdi-format-align-center</v-icon>\n                </v-btn>\n                <v-btn value=\"right\">\n                  <v-icon>mdi-format-align-right</v-icon>\n                </v-btn>\n              </v-btn-toggle>\n            </div>\n          </div>\n\n          <div class=\"form-item\">\n            <label>字体粗细</label>\n            <v-switch\n              v-model=\"isBold\"\n              color=\"primary\"\n              hide-details\n              label=\"加粗\"\n              density=\"compact\"\n              inset\n            ></v-switch>\n          </div>\n\n          <div class=\"form-item\">\n            <label>字体</label>\n            <v-select\n              v-model=\"fontFamily\"\n              :items=\"fontFamilies\"\n              item-title=\"title\"\n              item-value=\"value\"\n              density=\"compact\"\n              hide-details\n              variant=\"outlined\"\n            ></v-select>\n          </div>\n\n          <!-- 数据绑定 -->\n          <div class=\"form-item\">\n            <label>数据绑定</label>\n            <div class=\"d-flex gap-2\">\n              <v-select\n                v-model=\"dataBinding\"\n                :items=\"groupedDataFields\"\n                density=\"compact\"\n                hide-details\n                variant=\"outlined\"\n                placeholder=\"选择要绑定的字段\"\n                clearable\n                class=\"flex-grow-1\"\n                item-title=\"label\"\n                item-value=\"field\"\n              >\n                <template v-slot:item=\"{ item, props }\">\n                  <v-list-item\n                    v-if=\"item.raw.type === 'group'\"\n                    :title=\"item.raw.label\"\n                    disabled\n                    class=\"text-primary\"\n                  ></v-list-item>\n                  <v-list-item\n                    v-else\n                    v-bind=\"props\"\n                    :title=\"item.raw.label\"\n                    :value=\"item.raw.field\"\n                  ></v-list-item>\n                </template>\n              </v-select>\n              <v-btn\n                variant=\"outlined\"\n                density=\"compact\"\n                @click=\"applyDataBinding\"\n                :disabled=\"!dataBinding\"\n              >\n                绑定\n              </v-btn>\n            </div>\n            <div class=\"mt-2 text-caption text-grey\">\n              提示：绑定后的文本将显示为 {{字段名}}，用户使用模板时会自动替换为对应的数据\n            </div>\n          </div>\n        </template>\n\n        <!-- 尺寸信息 -->\n        <div class=\"form-item\">\n          <label>尺寸</label>\n          <div class=\"size-inputs\">\n            <v-text-field\n              v-model.number=\"width\"\n              type=\"number\"\n              label=\"宽度\"\n              density=\"compact\"\n              hide-details\n              variant=\"outlined\"\n            ></v-text-field>\n            <v-text-field\n              v-model.number=\"height\"\n              type=\"number\"\n              label=\"高度\"\n              density=\"compact\"\n              hide-details\n              variant=\"outlined\"\n            ></v-text-field>\n          </div>\n        </div>\n\n        <!-- 层级控制 -->\n        <div class=\"form-item\">\n          <label>层级</label>\n          <div class=\"d-flex gap-2\">\n            <v-btn\n              variant=\"outlined\"\n              density=\"compact\"\n              prepend-icon=\"mdi-arrow-up\"\n              @click=\"handleZIndexChange('up')\"\n            >\n              上移一层\n            </v-btn>\n            <v-btn\n              variant=\"outlined\"\n              density=\"compact\"\n              prepend-icon=\"mdi-arrow-down\"\n              @click=\"handleZIndexChange('down')\"\n            >\n              下移一层\n            </v-btn>\n          </div>\n        </div>\n      </div>\n    </template>\n    \n    <div v-else class=\"empty-state\">\n      <v-icon icon=\"mdi-select\" size=\"40\" color=\"grey-lighten-1\"></v-icon>\n      <p>请选择一个元素</p>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, watch, computed } from 'vue'\n\nconst props = defineProps({\n  selectedElement: {\n    type: Object,\n    default: null\n  },\n  dataFields: {\n    type: Array,\n    default: () => []\n  }\n})\n\nconst emit = defineEmits(['update'])\n\n// 属性状态\nconst borderRadius = ref(0)\nconst backgroundColor = ref('#409EFF')\nconst width = ref(200)\nconst height = ref(200)\n\n// 文字相关状态\nconst textColor = ref('#333333')\nconst fontSize = ref(16)\nconst textAlign = ref('left')\nconst isBold = ref(false)\nconst fontFamily = ref('Microsoft YaHei')\n\n// 字体选项\nconst fontFamilies = [\n  { title: '微软雅黑', value: '\"Microsoft YaHei\", \"PingFang SC\", \"Hiragino Sans GB\"' },\n  { title: '宋体', value: 'SimSun, \"Songti SC\"' },\n  { title: '黑体', value: 'SimHei, \"Heiti SC\"' },\n  { title: '楷体', value: 'KaiTi, \"Kaiti SC\"' },\n  { title: '仿宋', value: 'FangSong, \"STFangsong\"' },\n  { title: 'Arial', value: 'Arial, \"Helvetica Neue\", Helvetica' },\n  { title: 'Times New Roman', value: '\"Times New Roman\", Times, serif' },\n  { title: '思源黑体', value: '\"Source Han Sans CN\", \"Noto Sans CJK SC\"' }\n]\n\nconst dataBinding = ref('')\n\n// 计算属性\nconst panelTitle = computed(() => {\n  if (!props.selectedElement) return ''\n  switch (props.selectedElement.type) {\n    case 'image':\n      return '图片属性'\n    case 'shape':\n      return '形状属性'\n    default:\n      return '元素属性'\n  }\n})\n\nconst showBorderRadius = computed(() => {\n  return props.selectedElement?.type === 'image' || \n         (props.selectedElement?.type === 'shape' && props.selectedElement?.shapeType !== 'triangle')\n})\n\nconst showBackgroundColor = computed(() => {\n  return props.selectedElement?.type === 'shape'\n})\n\n// 将数据字段按组分类\nconst groupedDataFields = computed(() => {\n  const groups = {}\n  props.dataFields.forEach(field => {\n    if (!groups[field.group]) {\n      groups[field.group] = []\n    }\n    groups[field.group].push(field)\n  })\n\n  const result = []\n  Object.keys(groups).forEach(group => {\n    // 添加组标题\n    result.push({\n      type: 'group',\n      label: group,\n      field: null\n    })\n    // 添加组内字段\n    result.push(...groups[group])\n  })\n\n  return result\n})\n\n// 监听选中元素变化\nwatch(() => props.selectedElement, (newElement) => {\n  if (newElement) {\n    // 更新圆角值\n    borderRadius.value = parseInt(newElement.styles?.borderRadius || 0)\n    // 更新背景色\n    backgroundColor.value = newElement.styles?.backgroundColor || '#409EFF'\n    // 更新尺寸\n    width.value = newElement.width\n    height.value = newElement.height\n    // 更新文字样式\n    if (newElement.type === 'text') {\n      textColor.value = newElement.styles?.color || '#333333'\n      fontSize.value = parseInt(newElement.styles?.fontSize) || 16\n      textAlign.value = newElement.styles?.textAlign || 'left'\n      isBold.value = newElement.styles?.fontWeight === 'bold'\n      fontFamily.value = newElement.styles?.fontFamily || 'Microsoft YaHei'\n    }\n  }\n}, { immediate: true })\n\n// 监听圆角变化\nwatch(borderRadius, (newValue) => {\n  handleStyleChange('borderRadius', `${newValue}px`)\n})\n\n// 监听背景色变化\nwatch(backgroundColor, (newValue) => {\n  handleStyleChange('backgroundColor', newValue)\n})\n\n// 监听尺寸变化\nwatch([width, height], () => {\n  handleSizeChange()\n})\n\n// 监听文字颜色变化\nwatch(textColor, (newValue) => {\n  handleStyleChange('color', newValue)\n})\n\n// 监听字体大小变化\nwatch(fontSize, (newValue) => {\n  handleStyleChange('fontSize', `${newValue}px`)\n})\n\n// 监听对齐方式变化\nwatch(textAlign, (newValue) => {\n  handleStyleChange('textAlign', newValue)\n})\n\n// 监听字体粗细变化\nwatch(isBold, (newValue) => {\n  handleStyleChange('fontWeight', newValue ? 'bold' : 'normal')\n})\n\n// 监听字体变化\nwatch(fontFamily, (newValue) => {\n  handleStyleChange('fontFamily', newValue)\n})\n\n// 应用数据绑定\nconst applyDataBinding = () => {\n  if (!props.selectedElement || props.selectedElement.type !== 'text' || !dataBinding.value) return\n  \n  const field = dataFields.find(f => f.field === dataBinding.value)\n  if (!field) return\n\n  emit('update', {\n    ...props.selectedElement,\n    content: `{{${dataBinding.value}}}`,\n    dataBinding: {\n      field: dataBinding.value,\n      label: field.label\n    }\n  })\n\n  // 清空选择\n  dataBinding.value = ''\n}\n\n// 监听选中元素变化时，重置数据绑定选择\nwatch(() => props.selectedElement, () => {\n  dataBinding.value = ''\n}, { immediate: true })\n\n// 处理样式变化\nconst handleStyleChange = (property, value) => {\n  if (!props.selectedElement) return\n  \n  emit('update', {\n    ...props.selectedElement,\n    styles: {\n      ...props.selectedElement.styles,\n      [property]: value\n    }\n  })\n}\n\n// 处理尺寸变化\nconst handleSizeChange = () => {\n  if (!props.selectedElement) return\n  \n  emit('update', {\n    ...props.selectedElement,\n    width: width.value,\n    height: height.value\n  })\n}\n\n// 处理层级变化\nconst handleZIndexChange = (direction) => {\n  if (!props.selectedElement) return\n  \n  const currentZIndex = parseInt(props.selectedElement.styles?.zIndex || 0)\n  const newZIndex = direction === 'up' ? currentZIndex + 1 : currentZIndex - 1\n  \n  emit('update', {\n    ...props.selectedElement,\n    styles: {\n      ...props.selectedElement.styles,\n      zIndex: newZIndex\n    }\n  })\n}\n</script>\n\n<style scoped>\n.property-panel {\n  width: 300px;\n  height: 100%;\n  border-left: 1px solid #e0e0e0;\n  background: #ffffff;\n  display: flex;\n  flex-direction: column;\n}\n\n.panel-header {\n  padding: 16px;\n  border-bottom: 1px solid #e0e0e0;\n}\n\n.panel-title {\n  font-size: 16px;\n  font-weight: 500;\n  color: #333;\n  margin: 0;\n}\n\n.panel-content {\n  flex: 1;\n  padding: 16px;\n  overflow-y: auto;\n}\n\n.form-item {\n  margin-bottom: 20px;\n}\n\n.form-item label {\n  display: block;\n  font-size: 14px;\n  color: #606266;\n  margin-bottom: 8px;\n}\n\n.slider-wrapper {\n  padding: 0 8px;\n}\n\n.size-inputs {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 12px;\n}\n\n.empty-state {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  color: #909399;\n  gap: 12px;\n}\n\n.empty-state p {\n  font-size: 14px;\n  margin: 0;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}