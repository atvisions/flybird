{"ast":null,"code":"import request from '@/utils/request';\nexport const auth = {\n  // 密码登录\n  loginWithPassword: async function (data) {\n    try {\n      // 打印请求数据\n      console.log('Login request data:', {\n        account: data.account,\n        password: '***' // 不打印实际密码\n      });\n      const response = await request.post('/api/v1/users/auth/login/password/', {\n        account: data.account,\n        password: data.password\n      });\n      return this.handleLoginResponse(response);\n    } catch (error) {\n      // 打印错误详情\n      console.error('Login error:', {\n        status: error.response?.status,\n        data: error.response?.data\n      });\n      if (error.response) {\n        const {\n          data\n        } = error.response;\n        // 处理后端返回的错误信息\n        if (data.message) {\n          throw new Error(data.message);\n        } else if (data.error_code === 'invalid_password') {\n          throw new Error('密码错误，请重新输入');\n        } else if (data.error_code === 'phone_not_registered') {\n          throw new Error('该手机号未注册');\n        } else {\n          throw new Error(data.detail || '登录失败，请稍后重试');\n        }\n      }\n      // 如果是网络错误，返回网络错误提示\n      throw new Error('网络连接失败，请检查网络设置');\n    }\n  },\n  // 退出登录\n  logout: async () => {\n    const refreshToken = localStorage.getItem('refresh_token');\n    if (!refreshToken) return;\n    try {\n      await request.post('/api/v1/users/auth/logout/', {\n        refresh: refreshToken\n      });\n    } finally {\n      // 清除所有相关的本地存储数据\n      localStorage.removeItem('token');\n      localStorage.removeItem('refresh_token');\n      localStorage.removeItem('token_expires_at');\n      // 清除用户相关数据\n      localStorage.removeItem('remember_me');\n      localStorage.removeItem('remembered_account');\n      localStorage.removeItem('userInfo');\n      // 清除其他可能存在的数据\n      localStorage.removeItem('isLoggedIn');\n      // 清除请求头中的 token\n      delete request.defaults.headers.common['Authorization'];\n    }\n  },\n  // 刷新 token\n  refreshToken: data => {\n    return request.post('/api/v1/users/auth/token/refresh/', data);\n  },\n  // 更新用户名（昵称）\n  updateUsername: data => {\n    return request.post('/api/v1/users/account/username/', data);\n  },\n  // 发送验证码\n  sendVerifyCode: data => {\n    return request({\n      url: '/api/v1/users/auth/sms/send/',\n      method: 'post',\n      data: {\n        phone: data.phone,\n        scene: data.scene,\n        type: 'sms'\n      }\n    });\n  },\n  // 重置密码\n  resetPassword: data => {\n    // 打印请求数据以便调试\n    console.log('Reset password request data:', {\n      phone: data.phone,\n      code: data.code,\n      new_password: '***',\n      confirm_password: '***'\n    });\n    return request({\n      url: '/api/v1/users/auth/password/reset/',\n      method: 'post',\n      data: {\n        phone: data.phone,\n        code: data.code,\n        new_password: data.new_password,\n        confirm_password: data.confirm_password\n      }\n    }).then(response => {\n      console.log('Reset password success response:', response.data);\n      return response;\n    }).catch(error => {\n      console.log('Reset password error response:', error.response?.data);\n      // 处理错误响应\n      const errorData = error.response?.data;\n      if (errorData) {\n        // 如果错误信息在 code 字段中\n        if (errorData.code && Array.isArray(errorData.code)) {\n          throw new Error(errorData.code[0]);\n        }\n        // 如果错误信息在其他字段中\n        for (const key in errorData) {\n          if (Array.isArray(errorData[key])) {\n            throw new Error(errorData[key][0]);\n          }\n        }\n        // 如果有直接的错误消息\n        if (errorData.message) {\n          throw new Error(errorData.message);\n        }\n      }\n      throw error;\n    });\n  },\n  // 注册\n  register: data => {\n    return request({\n      url: '/api/v1/users/auth/register/',\n      method: 'post',\n      data: {\n        phone: data.phone,\n        code: data.code,\n        password: data.password,\n        confirm_password: data.confirmPassword\n      }\n    });\n  },\n  handleLoginResponse(response) {\n    if (response?.data?.code === 200) {\n      const userData = response.data.data;\n      // 设置请求头的 Authorization\n      const token = userData.access;\n      if (token) {\n        request.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      }\n      return {\n        token: token,\n        refresh: userData.refresh,\n        userInfo: {\n          id: userData.id,\n          uid: userData.uid,\n          username: userData.username,\n          avatar: userData.avatar\n        }\n      };\n    }\n    console.error('Login response error:', response?.data);\n    throw new Error(response?.data?.message || '登录失败');\n  }\n};\nexport default auth;","map":{"version":3,"names":["request","auth","loginWithPassword","data","console","log","account","password","response","post","handleLoginResponse","error","status","message","Error","error_code","detail","logout","refreshToken","localStorage","getItem","refresh","removeItem","defaults","headers","common","updateUsername","sendVerifyCode","url","method","phone","scene","type","resetPassword","code","new_password","confirm_password","then","catch","errorData","Array","isArray","key","register","confirmPassword","userData","token","access","userInfo","id","uid","username","avatar"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/api/auth.js"],"sourcesContent":["import request from '@/utils/request'\n\nexport const auth = {\n  // 密码登录\n  loginWithPassword: async function(data) {\n    try {\n      // 打印请求数据\n      console.log('Login request data:', {\n        account: data.account,\n        password: '***'  // 不打印实际密码\n      })\n\n      const response = await request.post('/api/v1/users/auth/login/password/', {\n        account: data.account,\n        password: data.password\n      })\n      return this.handleLoginResponse(response)\n    } catch (error) {\n      // 打印错误详情\n      console.error('Login error:', {\n        status: error.response?.status,\n        data: error.response?.data\n      })\n      \n      if (error.response) {\n        const { data } = error.response\n        // 处理后端返回的错误信息\n        if (data.message) {\n          throw new Error(data.message)\n        } else if (data.error_code === 'invalid_password') {\n          throw new Error('密码错误，请重新输入')\n        } else if (data.error_code === 'phone_not_registered') {\n          throw new Error('该手机号未注册')\n        } else {\n          throw new Error(data.detail || '登录失败，请稍后重试')\n        }\n      }\n      // 如果是网络错误，返回网络错误提示\n      throw new Error('网络连接失败，请检查网络设置')\n    }\n  },\n  \n  // 退出登录\n  logout: async () => {\n    const refreshToken = localStorage.getItem('refresh_token')\n    if (!refreshToken) return\n    try {\n      await request.post('/api/v1/users/auth/logout/', { refresh: refreshToken })\n    } finally {\n      // 清除所有相关的本地存储数据\n      localStorage.removeItem('token')\n      localStorage.removeItem('refresh_token')\n      localStorage.removeItem('token_expires_at')\n      // 清除用户相关数据\n      localStorage.removeItem('remember_me')\n      localStorage.removeItem('remembered_account')\n      localStorage.removeItem('userInfo')\n      // 清除其他可能存在的数据\n      localStorage.removeItem('isLoggedIn')\n      // 清除请求头中的 token\n      delete request.defaults.headers.common['Authorization']\n    }\n  },\n  \n  // 刷新 token\n  refreshToken: (data) => {\n    return request.post('/api/v1/users/auth/token/refresh/', data)\n  },\n  \n  // 更新用户名（昵称）\n  updateUsername: (data) => {\n    return request.post('/api/v1/users/account/username/', data)\n  },\n  \n  // 发送验证码\n  sendVerifyCode: (data) => {\n    return request({\n      url: '/api/v1/users/auth/sms/send/',\n      method: 'post',\n      data: {\n        phone: data.phone,\n        scene: data.scene,\n        type: 'sms'\n      }\n    })\n  },\n  \n  // 重置密码\n  resetPassword: (data) => {\n    // 打印请求数据以便调试\n    console.log('Reset password request data:', {\n      phone: data.phone,\n      code: data.code,\n      new_password: '***',\n      confirm_password: '***'\n    })\n\n    return request({\n      url: '/api/v1/users/auth/password/reset/',\n      method: 'post',\n      data: {\n        phone: data.phone,\n        code: data.code,\n        new_password: data.new_password,\n        confirm_password: data.confirm_password\n      }\n    }).then(response => {\n      console.log('Reset password success response:', response.data)\n      return response\n    }).catch(error => {\n      console.log('Reset password error response:', error.response?.data)\n      // 处理错误响应\n      const errorData = error.response?.data\n      if (errorData) {\n        // 如果错误信息在 code 字段中\n        if (errorData.code && Array.isArray(errorData.code)) {\n          throw new Error(errorData.code[0])\n        }\n        // 如果错误信息在其他字段中\n        for (const key in errorData) {\n          if (Array.isArray(errorData[key])) {\n            throw new Error(errorData[key][0])\n          }\n        }\n        // 如果有直接的错误消息\n        if (errorData.message) {\n          throw new Error(errorData.message)\n        }\n      }\n      throw error\n    })\n  },\n  \n  // 注册\n  register: (data) => {\n    return request({\n      url: '/api/v1/users/auth/register/',\n      method: 'post',\n      data: {\n        phone: data.phone,\n        code: data.code,\n        password: data.password,\n        confirm_password: data.confirmPassword\n      }\n    })\n  },\n  \n  handleLoginResponse(response) {\n    if (response?.data?.code === 200) {\n      const userData = response.data.data\n      // 设置请求头的 Authorization\n      const token = userData.access\n      if (token) {\n        request.defaults.headers.common['Authorization'] = `Bearer ${token}`\n      }\n      \n      return {\n        token: token,\n        refresh: userData.refresh,\n        userInfo: {\n          id: userData.id,\n          uid: userData.uid,\n          username: userData.username,\n          avatar: userData.avatar\n        }\n      }\n    }\n    console.error('Login response error:', response?.data)\n    throw new Error(response?.data?.message || '登录失败')\n  }\n}\n\nexport default auth "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}