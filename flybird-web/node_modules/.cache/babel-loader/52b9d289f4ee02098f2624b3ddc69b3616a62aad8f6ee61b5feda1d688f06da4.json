{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport { defineStore } from 'pinia';\nimport { auth } from '@/api/auth';\nimport request from '@/utils/request';\nimport { useRouter } from 'vue-router';\nimport { useAccountStore } from '@/stores/account';\nimport { useUserStore } from '@/stores/user';\nimport { showToast } from '@/components/ToastMessage';\nimport { STORAGE_KEYS } from '@/utils/storage';\nexport const useAuthStore = defineStore('auth', {\n  state: () => ({\n    isLoggedIn: false,\n    rememberMe: false,\n    token: localStorage.getItem('token') || null,\n    refreshToken: null,\n    tokenExpiresAt: null\n  }),\n  getters: {\n    // 添加 getter，替代直接访问 isLoggedIn\n    isAuthenticated: state => {\n      const isValid = state.isLoggedIn && !!state.token && !state.isTokenExpired();\n      return isValid;\n    },\n    // 获取记住的账号\n    rememberedAccount: () => localStorage.getItem('remembered_account'),\n    // 获取当前 token\n    currentToken: state => state.token,\n    // 检查是否需要刷新 token\n    needsTokenRefresh: state => {\n      if (!state.tokenExpiresAt) return false;\n      // 如果 token 将在 5 分钟内过期，就需要刷新\n      const fiveMinutes = 5 * 60 * 1000;\n      return new Date().getTime() + fiveMinutes > state.tokenExpiresAt;\n    }\n  },\n  actions: {\n    async login(credentials, rememberMe = false) {\n      try {\n        console.log('Login attempt with:', {\n          account: credentials.account,\n          rememberMe\n        });\n        const response = await auth.loginWithPassword(credentials);\n        console.log('Login response:', response);\n        if (response) {\n          // 保存 token\n          this.token = response.token;\n          this.refreshToken = response.refresh;\n          localStorage.setItem('token', response.token);\n          localStorage.setItem('refresh_token', response.refresh);\n\n          // 设置请求头\n          request.defaults.headers.common['Authorization'] = `Bearer ${response.token}`;\n\n          // 设置登录状态\n          this.isLoggedIn = true;\n\n          // 登录成功后立即获取用户信息并存储\n          const accountStore = useAccountStore();\n          console.log('Fetching user info after login...');\n          await accountStore.fetchUserInfo();\n          console.log('User info fetched:', accountStore.userInfo);\n\n          // 记住账号功能\n          if (rememberMe) {\n            localStorage.setItem('remember_me', 'true');\n            localStorage.setItem('remembered_account', credentials.account);\n          }\n\n          // 显示登录成功提示\n          showToast('登录成功', 'success');\n\n          // 获取重定向地址\n          const urlParams = new URLSearchParams(window.location.search);\n          const redirect = urlParams.get('redirect');\n\n          // 如果有重定向地址，则跳转到重定向地址，否则跳转到用户中心\n          window.location.href = redirect || '/user?tab=home';\n          return true;\n        }\n        return false;\n      } catch (error) {\n        console.error('Login failed:', error);\n\n        // 更详细的错误处理\n        if (error.response?.status === 401) {\n          throw new Error('账号或密码错误');\n        } else if (error.response?.status === 429) {\n          throw new Error('登录尝试次数过多，请稍后再试');\n        } else if (error.response?.data?.message) {\n          throw new Error(error.response.data.message);\n        } else {\n          throw new Error('登录失败，请稍后重试');\n        }\n      }\n    },\n    async logout() {\n      try {\n        // 清除所有 localStorage - 移到最前面\n        localStorage.clear();\n        if (this.refreshToken) {\n          try {\n            await auth.logout();\n          } catch (error) {\n            console.error('Logout API error:', error);\n            // 即使 API 调用失败，继续清理本地状态\n          }\n        }\n\n        // 清除 store 状态\n        this.clearAuth();\n        const accountStore = useAccountStore();\n        const userStore = useUserStore();\n        accountStore.clearUserInfo();\n        userStore.clearUserInfo();\n\n        // 清除请求头中的 token\n        delete request.defaults.headers.common['Authorization'];\n\n        // 使用 window.location 强制跳转\n        window.location.href = '/login';\n        showToast('已退出登录', 'success');\n      } catch (error) {\n        console.error('Logout failed:', error);\n        showToast('退出登录失败，请重试', 'error');\n      }\n    },\n    clearAuth() {\n      // 清除请求头\n      delete request.defaults.headers.common['Authorization'];\n\n      // 重置状态\n      this.isLoggedIn = false;\n      this.token = null;\n      this.refreshToken = null;\n      this.tokenExpiresAt = null;\n      this.rememberMe = false;\n\n      // 确保清除所有认证相关的本地存储\n      Object.values(STORAGE_KEYS).forEach(key => {\n        localStorage.removeItem(key);\n      });\n    },\n    // 检查 token 是否过期\n    isTokenExpired() {\n      // 如果没有设置过期时间，默认认为 token 有效\n      if (!this.tokenExpiresAt) return false;\n      const now = new Date().getTime();\n      const isExpired = now > this.tokenExpiresAt;\n      console.log('Token expiry check:', {\n        now,\n        expiresAt: this.tokenExpiresAt,\n        isExpired\n      });\n      return isExpired;\n    },\n    // 从 localStorage 恢复认证状态\n    restoreAuth() {\n      const token = localStorage.getItem('token');\n      const refreshToken = localStorage.getItem('refresh_token');\n      const tokenExpiresAt = localStorage.getItem('token_expires_at');\n      const rememberMe = localStorage.getItem('remember_me') === 'true';\n      if (token && refreshToken) {\n        this.token = token;\n        this.refreshToken = refreshToken;\n        this.tokenExpiresAt = tokenExpiresAt ? parseInt(tokenExpiresAt) : null;\n        this.rememberMe = rememberMe;\n        this.isLoggedIn = true;\n\n        // 设置请求头\n        request.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        return true;\n      } else {\n        console.log('Auth restore failed: No token found');\n        return false;\n      }\n    },\n    async register(data) {\n      try {\n        const response = await auth.register(data);\n        if (response?.data?.code === 200) {\n          const userData = response.data.data;\n          // 保存 token\n          this.token = userData.access;\n          this.refreshToken = userData.refresh;\n          localStorage.setItem('token', userData.access);\n          localStorage.setItem('refresh_token', userData.refresh);\n          localStorage.setItem('isLoggedIn', 'true');\n\n          // 设置请求头\n          request.defaults.headers.common['Authorization'] = `Bearer ${userData.access}`;\n\n          // 设置登录状态\n          this.isLoggedIn = true;\n\n          // 初始化用户数据\n          const accountStore = useAccountStore();\n          accountStore.userInfo = {\n            id: userData.id,\n            uid: userData.uid,\n            username: userData.username || `FB${userData.uid}`,\n            phone: userData.phone,\n            email: null,\n            avatar: null,\n            position: null,\n            bio: null,\n            is_vip: false,\n            is_staff: false,\n            background_image: null\n          };\n\n          // 保存到本地存储\n          localStorage.setItem('userInfo', JSON.stringify(accountStore.userInfo));\n          showToast('注册成功', 'success');\n\n          // 跳转到用户中心\n          window.location.replace('/user?tab=home');\n          return true;\n        }\n        throw new Error(response?.data?.message || '注册失败');\n      } catch (error) {\n        console.error('Registration failed:', error);\n        let errorMsg = '注册失败，请稍后重试';\n        if (error.response?.data) {\n          const errorData = error.response.data;\n          if (typeof errorData === 'object') {\n            // 处理字段级别的错误\n            if (errorData.code) {\n              errorMsg = Array.isArray(errorData.code) ? errorData.code[0] : errorData.code;\n            } else if (errorData.phone) {\n              errorMsg = Array.isArray(errorData.phone) ? errorData.phone[0] : errorData.phone;\n            } else if (errorData.password) {\n              errorMsg = Array.isArray(errorData.password) ? errorData.password[0] : errorData.password;\n            } else if (errorData.confirm_password) {\n              errorMsg = Array.isArray(errorData.confirm_password) ? errorData.confirm_password[0] : errorData.confirm_password;\n            }\n          }\n        }\n        this.clearAuth();\n        const accountStore = useAccountStore();\n        accountStore.clearUserInfo();\n        showToast(String(errorMsg), 'error'); // 确保转换为字符串\n        throw new Error(errorMsg);\n      }\n    },\n    async refreshAuthToken() {\n      try {\n        if (!this.refreshToken) {\n          throw new Error('No refresh token available');\n        }\n        const response = await auth.refreshToken(this.refreshToken);\n        if (response?.token) {\n          this.token = response.token;\n          localStorage.setItem('token', response.token);\n          request.defaults.headers.common['Authorization'] = `Bearer ${response.token}`;\n\n          // 更新过期时间\n          if (response.expires_in) {\n            this.tokenExpiresAt = new Date().getTime() + response.expires_in * 1000;\n            localStorage.setItem('token_expires_at', this.tokenExpiresAt.toString());\n          }\n          return true;\n        }\n        return false;\n      } catch (error) {\n        console.error('Token refresh failed:', error);\n        // 如果刷新失败，清除认证状态并重定向到登录页\n        this.clearAuth();\n        window.location.href = `/login?redirect=${encodeURIComponent(window.location.pathname)}`;\n        throw error;\n      }\n    },\n    async initialize() {\n      const restored = this.restoreAuth();\n      if (restored) {\n        // 如果已登录，获取用户信息\n        try {\n          const accountStore = useAccountStore();\n          await accountStore.fetchUserInfo();\n        } catch (error) {\n          console.error('Failed to fetch user info during initialization:', error);\n          // 如果获取用户信息失败，可能是 token 已失效\n          this.clearAuth();\n        }\n      }\n    }\n  }\n});","map":{"version":3,"names":["defineStore","auth","request","useRouter","useAccountStore","useUserStore","showToast","STORAGE_KEYS","useAuthStore","state","isLoggedIn","rememberMe","token","localStorage","getItem","refreshToken","tokenExpiresAt","getters","isAuthenticated","isValid","isTokenExpired","rememberedAccount","currentToken","needsTokenRefresh","fiveMinutes","Date","getTime","actions","login","credentials","console","log","account","response","loginWithPassword","refresh","setItem","defaults","headers","common","accountStore","fetchUserInfo","userInfo","urlParams","URLSearchParams","window","location","search","redirect","get","href","error","status","Error","data","message","logout","clear","clearAuth","userStore","clearUserInfo","Object","values","forEach","key","removeItem","now","isExpired","expiresAt","restoreAuth","parseInt","register","code","userData","access","id","uid","username","phone","email","avatar","position","bio","is_vip","is_staff","background_image","JSON","stringify","replace","errorMsg","errorData","Array","isArray","password","confirm_password","String","refreshAuthToken","expires_in","toString","encodeURIComponent","pathname","initialize","restored"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/stores/auth.js"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { auth } from '@/api/auth'\nimport request from '@/utils/request'\nimport { useRouter } from 'vue-router'\nimport { useAccountStore } from '@/stores/account'\nimport { useUserStore } from '@/stores/user'\nimport { showToast } from '@/components/ToastMessage'\nimport { STORAGE_KEYS } from '@/utils/storage'\n\nexport const useAuthStore = defineStore('auth', {\n  state: () => ({\n    isLoggedIn: false,\n    rememberMe: false,\n    token: localStorage.getItem('token') || null,\n    refreshToken: null,\n    tokenExpiresAt: null\n  }),\n\n  getters: {\n    // 添加 getter，替代直接访问 isLoggedIn\n    isAuthenticated: (state) => {\n      const isValid = state.isLoggedIn && !!state.token && !state.isTokenExpired()\n      return isValid\n    },\n    \n    // 获取记住的账号\n    rememberedAccount: () => localStorage.getItem('remembered_account'),\n    \n    // 获取当前 token\n    currentToken: (state) => state.token,\n    \n    // 检查是否需要刷新 token\n    needsTokenRefresh: (state) => {\n      if (!state.tokenExpiresAt) return false\n      // 如果 token 将在 5 分钟内过期，就需要刷新\n      const fiveMinutes = 5 * 60 * 1000\n      return new Date().getTime() + fiveMinutes > state.tokenExpiresAt\n    }\n  },\n\n  actions: {\n    async login(credentials, rememberMe = false) {\n      try {\n        console.log('Login attempt with:', { account: credentials.account, rememberMe })\n        const response = await auth.loginWithPassword(credentials)\n        console.log('Login response:', response)\n        \n        if (response) {\n          // 保存 token\n          this.token = response.token\n          this.refreshToken = response.refresh\n          localStorage.setItem('token', response.token)\n          localStorage.setItem('refresh_token', response.refresh)\n          \n          // 设置请求头\n          request.defaults.headers.common['Authorization'] = `Bearer ${response.token}`\n          \n          // 设置登录状态\n          this.isLoggedIn = true\n          \n          // 登录成功后立即获取用户信息并存储\n          const accountStore = useAccountStore()\n          console.log('Fetching user info after login...')\n          await accountStore.fetchUserInfo()\n          \n          console.log('User info fetched:', accountStore.userInfo)\n          \n          // 记住账号功能\n          if (rememberMe) {\n            localStorage.setItem('remember_me', 'true')\n            localStorage.setItem('remembered_account', credentials.account)\n          }\n          \n          // 显示登录成功提示\n          showToast('登录成功', 'success')\n          \n          // 获取重定向地址\n          const urlParams = new URLSearchParams(window.location.search)\n          const redirect = urlParams.get('redirect')\n          \n          // 如果有重定向地址，则跳转到重定向地址，否则跳转到用户中心\n          window.location.href = redirect || '/user?tab=home'\n          \n          return true\n        }\n        return false\n      } catch (error) {\n        console.error('Login failed:', error)\n        \n        // 更详细的错误处理\n        if (error.response?.status === 401) {\n          throw new Error('账号或密码错误')\n        } else if (error.response?.status === 429) {\n          throw new Error('登录尝试次数过多，请稍后再试')\n        } else if (error.response?.data?.message) {\n          throw new Error(error.response.data.message)\n        } else {\n          throw new Error('登录失败，请稍后重试')\n        }\n      }\n    },\n\n    async logout() {\n      try {\n        // 清除所有 localStorage - 移到最前面\n        localStorage.clear()\n        \n        if (this.refreshToken) {\n          try {\n            await auth.logout()\n          } catch (error) {\n            console.error('Logout API error:', error)\n            // 即使 API 调用失败，继续清理本地状态\n          }\n        }\n        \n        // 清除 store 状态\n        this.clearAuth()\n        const accountStore = useAccountStore()\n        const userStore = useUserStore()\n        accountStore.clearUserInfo()\n        userStore.clearUserInfo()\n        \n        // 清除请求头中的 token\n        delete request.defaults.headers.common['Authorization']\n        \n        // 使用 window.location 强制跳转\n        window.location.href = '/login'\n        \n        showToast('已退出登录', 'success')\n      } catch (error) {\n        console.error('Logout failed:', error)\n        showToast('退出登录失败，请重试', 'error')\n      }\n    },\n\n    clearAuth() {\n      // 清除请求头\n      delete request.defaults.headers.common['Authorization']\n      \n      // 重置状态\n      this.isLoggedIn = false\n      this.token = null\n      this.refreshToken = null\n      this.tokenExpiresAt = null\n      this.rememberMe = false\n      \n      // 确保清除所有认证相关的本地存储\n      Object.values(STORAGE_KEYS).forEach(key => {\n        localStorage.removeItem(key)\n      })\n    },\n\n    // 检查 token 是否过期\n    isTokenExpired() {\n      // 如果没有设置过期时间，默认认为 token 有效\n      if (!this.tokenExpiresAt) return false\n      const now = new Date().getTime()\n      const isExpired = now > this.tokenExpiresAt\n      console.log('Token expiry check:', {\n        now,\n        expiresAt: this.tokenExpiresAt,\n        isExpired\n      })\n      return isExpired\n    },\n\n    // 从 localStorage 恢复认证状态\n    restoreAuth() {\n      const token = localStorage.getItem('token')\n      const refreshToken = localStorage.getItem('refresh_token')\n      const tokenExpiresAt = localStorage.getItem('token_expires_at')\n      const rememberMe = localStorage.getItem('remember_me') === 'true'\n\n\n      if (token && refreshToken) {\n        this.token = token\n        this.refreshToken = refreshToken\n        this.tokenExpiresAt = tokenExpiresAt ? parseInt(tokenExpiresAt) : null\n        this.rememberMe = rememberMe\n        this.isLoggedIn = true\n        \n        // 设置请求头\n        request.defaults.headers.common['Authorization'] = `Bearer ${token}`\n        return true\n      } else {\n        console.log('Auth restore failed: No token found')\n        return false\n      }\n    },\n\n    async register(data) {\n      try {\n        const response = await auth.register(data)\n        \n        if (response?.data?.code === 200) {\n          const userData = response.data.data\n          // 保存 token\n          this.token = userData.access\n          this.refreshToken = userData.refresh\n          localStorage.setItem('token', userData.access)\n          localStorage.setItem('refresh_token', userData.refresh)\n          localStorage.setItem('isLoggedIn', 'true')\n          \n          // 设置请求头\n          request.defaults.headers.common['Authorization'] = `Bearer ${userData.access}`\n          \n          // 设置登录状态\n          this.isLoggedIn = true\n          \n          // 初始化用户数据\n          const accountStore = useAccountStore()\n          accountStore.userInfo = {\n            id: userData.id,\n            uid: userData.uid,\n            username: userData.username || `FB${userData.uid}`,\n            phone: userData.phone,\n            email: null,\n            avatar: null,\n            position: null,\n            bio: null,\n            is_vip: false,\n            is_staff: false,\n            background_image: null\n          }\n          \n          // 保存到本地存储\n          localStorage.setItem('userInfo', JSON.stringify(accountStore.userInfo))\n          \n          showToast('注册成功', 'success')\n          \n          // 跳转到用户中心\n          window.location.replace('/user?tab=home')\n          \n          return true\n        }\n        throw new Error(response?.data?.message || '注册失败')\n      } catch (error) {\n        console.error('Registration failed:', error)\n        let errorMsg = '注册失败，请稍后重试'\n        \n        if (error.response?.data) {\n          const errorData = error.response.data\n          if (typeof errorData === 'object') {\n            // 处理字段级别的错误\n            if (errorData.code) {\n              errorMsg = Array.isArray(errorData.code) ? errorData.code[0] : errorData.code\n            } else if (errorData.phone) {\n              errorMsg = Array.isArray(errorData.phone) ? errorData.phone[0] : errorData.phone\n            } else if (errorData.password) {\n              errorMsg = Array.isArray(errorData.password) ? errorData.password[0] : errorData.password\n            } else if (errorData.confirm_password) {\n              errorMsg = Array.isArray(errorData.confirm_password) ? errorData.confirm_password[0] : errorData.confirm_password\n            }\n          }\n        }\n        \n        this.clearAuth()\n        const accountStore = useAccountStore()\n        accountStore.clearUserInfo()\n        showToast(String(errorMsg), 'error')  // 确保转换为字符串\n        throw new Error(errorMsg)\n      }\n    },\n\n    async refreshAuthToken() {\n      try {\n        if (!this.refreshToken) {\n          throw new Error('No refresh token available')\n        }\n\n        const response = await auth.refreshToken(this.refreshToken)\n        \n        if (response?.token) {\n          this.token = response.token\n          localStorage.setItem('token', response.token)\n          request.defaults.headers.common['Authorization'] = `Bearer ${response.token}`\n          \n          // 更新过期时间\n          if (response.expires_in) {\n            this.tokenExpiresAt = new Date().getTime() + (response.expires_in * 1000)\n            localStorage.setItem('token_expires_at', this.tokenExpiresAt.toString())\n          }\n          \n          return true\n        }\n        return false\n      } catch (error) {\n        console.error('Token refresh failed:', error)\n        // 如果刷新失败，清除认证状态并重定向到登录页\n        this.clearAuth()\n        window.location.href = `/login?redirect=${encodeURIComponent(window.location.pathname)}`\n        throw error\n      }\n    },\n\n    async initialize() {\n      const restored = this.restoreAuth()\n      \n      if (restored) {\n        // 如果已登录，获取用户信息\n        try {\n          const accountStore = useAccountStore()\n          await accountStore.fetchUserInfo()\n        } catch (error) {\n          console.error('Failed to fetch user info during initialization:', error)\n          // 如果获取用户信息失败，可能是 token 已失效\n          this.clearAuth()\n        }\n      }\n\n    }\n  }\n}) "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}