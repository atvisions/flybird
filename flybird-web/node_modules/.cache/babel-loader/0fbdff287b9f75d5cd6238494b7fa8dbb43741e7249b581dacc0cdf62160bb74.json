{"ast":null,"code":"import _objectSpread from \"/Users/liuzhao/Documents/Projects/flybird/flybird-web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { createStore } from 'vuex';\nimport { STORAGE_KEYS } from '@/utils/storage';\nimport profile from '@/api/profile';\nimport request from '@/utils/request';\nimport router from '../router';\nimport { storage } from '@/utils/storage';\nimport { getExpirationInfo } from '@/utils/auth';\nimport defaultAvatar from '@/assets/images/default-avatar.png';\nimport { useUserStore } from '@/stores/user';\nimport { useAccountStore } from '@/stores/account';\nexport default createStore({\n  state: {\n    basicInfo: null,\n    isLoadingUserInfo: false,\n    lastUserInfoFetch: null\n  },\n  mutations: {\n    SET_AUTH(state, isAuthenticated) {\n      state.isAuthenticated = isAuthenticated;\n    },\n    SET_USER_INFO(state, userInfo) {\n      // 深度合并更新\n      if (state.userInfo) {\n        state.userInfo = _objectSpread(_objectSpread({}, state.userInfo), {}, {\n          code: userInfo.code,\n          message: userInfo.message,\n          data: _objectSpread(_objectSpread({}, state.userInfo.data), {}, {\n            user: _objectSpread(_objectSpread({}, state.userInfo.data?.user), userInfo.data?.user)\n          }, userInfo.data)\n        });\n      } else {\n        state.userInfo = userInfo;\n      }\n    },\n    SET_BASIC_INFO(state, basicInfo) {\n      state.basicInfo = _objectSpread(_objectSpread({}, state.basicInfo), basicInfo);\n    },\n    SET_AVATAR_UPDATE_TIME(state, timestamp) {\n      state.avatarUpdateTime = timestamp;\n    },\n    SET_TOKEN(state, token) {\n      state.token = token;\n      state.isAuthenticated = !!token;\n    },\n    SET_REFRESH_TOKEN(state, refreshToken) {\n      state.refreshToken = refreshToken;\n    },\n    SET_USER(state, user) {\n      const userStore = useUserStore();\n      userStore.userInfo = user;\n      state.userInfo = user;\n    },\n    SET_LOGGED_IN(state, status) {\n      const userStore = useUserStore();\n      userStore.isLoggedIn = status;\n      state.isAuthenticated = status;\n    },\n    SET_AUTHENTICATED(state, isAuthenticated) {\n      state.isAuthenticated = isAuthenticated;\n    },\n    CLEAR_USER_INFO(state) {\n      state.userInfo = null;\n    },\n    CLEAR_BASIC_INFO(state) {\n      state.basicInfo = null;\n    },\n    UPDATE_BASIC_INFO(state, basicInfo) {\n      if (state.userInfo?.data) {\n        state.userInfo.data.basic_info = _objectSpread(_objectSpread({}, state.userInfo.data.basic_info), basicInfo);\n      }\n    },\n    UPDATE_AVATAR(state, avatarUrl) {\n      if (state.userInfo?.data?.basic_info) {\n        state.userInfo.data.basic_info.avatar = avatarUrl;\n      }\n    },\n    UPDATE_BACKGROUND(state, backgroundUrl) {\n      if (state.userInfo?.data?.basic_info) {\n        state.userInfo.data.basic_info.background = backgroundUrl;\n      }\n    },\n    SET_LOADING_USER_INFO(state, isLoading) {\n      state.isLoadingUserInfo = isLoading;\n    },\n    SET_LAST_USER_INFO_FETCH(state, timestamp) {\n      state.lastUserInfoFetch = timestamp;\n    }\n  },\n  getters: {\n    userAvatar: state => {\n      return state.userInfo?.data?.basic_info?.avatar || defaultAvatar;\n    },\n    userName: state => {\n      return state.userInfo?.data?.basic_info?.nickname || '未设置昵称';\n    },\n    userNickname: state => {\n      return state.userInfo?.data?.basic_info?.nickname || '未设置昵称';\n    },\n    userPhone: state => {\n      return state.userInfo?.data?.basic_info?.phone;\n    },\n    username: state => state.basicInfo?.username,\n    avatar: state => state.basicInfo?.avatar\n  },\n  actions: {\n    async checkAuth({\n      commit,\n      dispatch\n    }) {\n      try {\n        const userStore = useUserStore();\n        const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n        if (!token) {\n          commit('SET_LOGGED_IN', false);\n          return false;\n        }\n        request.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        try {\n          const accountStore = useAccountStore();\n          const response = await accountStore.fetchUserInfo();\n          commit('SET_LOGGED_IN', true);\n          return true;\n        } catch (error) {\n          if (error.response?.status === 401) {\n            const refreshSuccess = await dispatch('refreshToken');\n            if (refreshSuccess) {\n              await accountStore.fetchUserInfo();\n              commit('SET_LOGGED_IN', true);\n              return true;\n            }\n          }\n          commit('SET_LOGGED_IN', false);\n          return false;\n        }\n      } catch (error) {\n        console.error('Auth check failed:', error);\n        commit('SET_LOGGED_IN', false);\n        return false;\n      }\n    },\n    async fetchUserInfo({\n      commit,\n      state\n    }) {\n      // 如果正在加载，返回\n      if (state.isLoadingUserInfo) {\n        return;\n      }\n\n      // 如果数据已经存在且在5分钟内获取过，直接返回\n      const now = Date.now();\n      if (state.userInfo && state.lastUserInfoFetch && now - state.lastUserInfoFetch < 5 * 60 * 1000) {\n        return state.userInfo;\n      }\n      try {\n        commit('SET_LOADING_USER_INFO', true);\n        const response = await user.getUserInfo();\n        if (response.data?.code === 200) {\n          commit('SET_USER_INFO', response.data);\n          commit('SET_LAST_USER_INFO_FETCH', now);\n          return response.data;\n        }\n      } catch (error) {\n        console.error('获取用户信息失败:', error);\n        throw error;\n      } finally {\n        commit('SET_LOADING_USER_INFO', false);\n      }\n    },\n    async updateBasicInfo({\n      commit\n    }, {\n      type,\n      data\n    }) {\n      try {\n        let response;\n        if (type === 'avatar') {\n          response = await profile.uploadAvatar(data);\n        } else if (type === 'background') {\n          response = await profile.uploadBackground(data);\n        } else if (type === 'basic') {\n          response = await profile.updateModule('basic_info', data);\n        } else {\n          throw new Error('未知的更新类型');\n        }\n        if (response?.data?.code === 200) {\n          if (type === 'avatar' || type === 'background') {\n            commit('SET_AVATAR_UPDATE_TIME', Date.now());\n          }\n          if (type === 'basic') {\n            commit('UPDATE_BASIC_INFO', response.data.data);\n          } else {\n            const {\n              user,\n              basic_info\n            } = response.data.data;\n            if (user) {\n              commit('SET_USER_INFO', user);\n            }\n            if (basic_info) {\n              commit('SET_BASIC_INFO', basic_info);\n            }\n          }\n          return response;\n        }\n        throw new Error(response?.data?.message || '更新失败');\n      } catch (error) {\n        console.error('Failed to update basic info:', error);\n        throw error;\n      }\n    },\n    async logout({\n      commit\n    }) {\n      try {\n        await auth.logout();\n      } catch (error) {\n        console.error('Logout failed:', error);\n      } finally {\n        // 清理状态\n        commit('SET_TOKEN', null);\n        commit('SET_REFRESH_TOKEN', null);\n        commit('SET_USER', null);\n        commit('SET_LOGGED_IN', false);\n        commit('CLEAR_USER_INFO');\n        commit('CLEAR_BASIC_INFO');\n\n        // 使用 storage 服务清除认证信息\n        storage.clearAuth();\n\n        // 清除请求头\n        delete request.defaults.headers.common['Authorization'];\n\n        // 跳转到登录页\n        router.push('/login');\n      }\n    },\n    async fetchCompleteness({\n      commit\n    }) {\n      try {\n        const response = await profile.getCompleteness();\n        if (response.data?.code === 200) {\n          commit('SET_COMPLETENESS', response.data);\n          return response.data;\n        }\n      } catch (error) {\n        console.error('获取完整度失败:', error);\n      }\n    },\n    async login({\n      commit\n    }, {\n      access,\n      refresh,\n      rememberMe = false\n    }) {\n      try {\n        // 使用 storage 服务保存认证信息，它会处理过期时间\n        storage.saveAuth({\n          access,\n          refresh\n        }, rememberMe);\n\n        // 设置请求头\n        request.defaults.headers.common['Authorization'] = `Bearer ${access}`;\n\n        // 更新 store 状态\n        commit('SET_TOKEN', access);\n        commit('SET_REFRESH_TOKEN', refresh);\n        commit('SET_LOGGED_IN', true);\n\n        // 获取用户信息\n        try {\n          const userInfoResponse = await this.dispatch('fetchUserInfo');\n          if (userInfoResponse?.data?.user && rememberMe) {\n            storage.savePhone(userInfoResponse.data.user.phone, true);\n          }\n        } catch (error) {\n          console.warn('获取用户信息失败，但不影响登录状态:', error);\n        }\n      } catch (error) {\n        console.error('登录失败:', error);\n        throw error;\n      }\n    },\n    async refreshToken({\n      commit,\n      state\n    }) {\n      try {\n        const refreshToken = localStorage.getItem(STORAGE_KEYS.REFRESH_TOKEN);\n        if (!refreshToken) {\n          throw new Error('No refresh token');\n        }\n        const response = await auth.refreshToken({\n          refresh: refreshToken\n        });\n        if (response.data?.code === 200) {\n          const {\n            access\n          } = response.data.data;\n\n          // 使用 storage 服务保存认证信息\n          // 保持原有的记住我状态\n          const rememberMe = localStorage.getItem(STORAGE_KEYS.REMEMBER_ME) === 'true';\n          storage.saveAuth({\n            access,\n            refresh: refreshToken // 保持原有的 refresh token\n          }, rememberMe);\n\n          // 更新 store 状态\n          commit('SET_TOKEN', access);\n          return true;\n        }\n        return false;\n      } catch (error) {\n        console.error('Token refresh failed:', error);\n        // 清除所有认证状态\n        commit('SET_TOKEN', null);\n        commit('SET_REFRESH_TOKEN', null);\n        commit('SET_USER', null);\n        commit('SET_LOGGED_IN', false);\n\n        // 使用 storage 服务清除认证信息\n        storage.clearAuth();\n        return false;\n      }\n    },\n    async updateAvatar({\n      commit\n    }, formData) {\n      try {\n        const response = await profile.uploadAvatar(formData);\n        if (response.data?.code === 200) {\n          const avatarUrl = response.data.data.avatar;\n          commit('UPDATE_AVATAR', avatarUrl);\n          return avatarUrl;\n        }\n        throw new Error(response.data?.message || '更新头像失败');\n      } catch (error) {\n        console.error('Failed to update avatar:', error);\n        throw error;\n      }\n    },\n    async updateBackground({\n      commit\n    }, formData) {\n      try {\n        const response = await profile.uploadBackground(formData);\n        if (response.data?.code === 200) {\n          const backgroundUrl = response.data.data.background;\n          commit('UPDATE_BACKGROUND', backgroundUrl);\n          return backgroundUrl;\n        }\n        throw new Error(response.data?.message || '更新背景图失败');\n      } catch (error) {\n        console.error('Failed to update background:', error);\n        throw error;\n      }\n    },\n    async getUserInfo({\n      commit\n    }) {\n      try {\n        const response = await user.getUserInfo();\n        if (response.data?.code === 200) {\n          commit('SET_USER_INFO', response.data);\n        }\n        return response;\n      } catch (error) {\n        console.error('获取用户信息失败:', error);\n        throw error;\n      }\n    }\n  }\n});","map":{"version":3,"names":["createStore","STORAGE_KEYS","profile","request","router","storage","getExpirationInfo","defaultAvatar","useUserStore","useAccountStore","state","basicInfo","isLoadingUserInfo","lastUserInfoFetch","mutations","SET_AUTH","isAuthenticated","SET_USER_INFO","userInfo","_objectSpread","code","message","data","user","SET_BASIC_INFO","SET_AVATAR_UPDATE_TIME","timestamp","avatarUpdateTime","SET_TOKEN","token","SET_REFRESH_TOKEN","refreshToken","SET_USER","userStore","SET_LOGGED_IN","status","isLoggedIn","SET_AUTHENTICATED","CLEAR_USER_INFO","CLEAR_BASIC_INFO","UPDATE_BASIC_INFO","basic_info","UPDATE_AVATAR","avatarUrl","avatar","UPDATE_BACKGROUND","backgroundUrl","background","SET_LOADING_USER_INFO","isLoading","SET_LAST_USER_INFO_FETCH","getters","userAvatar","userName","nickname","userNickname","userPhone","phone","username","actions","checkAuth","commit","dispatch","localStorage","getItem","TOKEN","defaults","headers","common","accountStore","response","fetchUserInfo","error","refreshSuccess","console","now","Date","getUserInfo","updateBasicInfo","type","uploadAvatar","uploadBackground","updateModule","Error","logout","auth","clearAuth","push","fetchCompleteness","getCompleteness","login","access","refresh","rememberMe","saveAuth","userInfoResponse","savePhone","warn","REFRESH_TOKEN","REMEMBER_ME","updateAvatar","formData","updateBackground"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\nimport { STORAGE_KEYS } from '@/utils/storage'\nimport profile from '@/api/profile'\nimport request from '@/utils/request'\nimport router from '../router'\nimport { storage } from '@/utils/storage'\nimport { getExpirationInfo } from '@/utils/auth'\nimport defaultAvatar from '@/assets/images/default-avatar.png'\nimport { useUserStore } from '@/stores/user'\nimport { useAccountStore } from '@/stores/account'\n\nexport default createStore({\n  state: {\n    basicInfo: null,\n    isLoadingUserInfo: false,\n    lastUserInfoFetch: null\n  },\n\n  mutations: {\n    SET_AUTH(state, isAuthenticated) {\n      state.isAuthenticated = isAuthenticated\n    },\n\n    SET_USER_INFO(state, userInfo) {\n      // 深度合并更新\n      if (state.userInfo) {\n        state.userInfo = {\n          ...state.userInfo,\n          code: userInfo.code,\n          message: userInfo.message,\n          data: {\n            ...state.userInfo.data,\n            user: {\n              ...state.userInfo.data?.user,\n              ...userInfo.data?.user\n            },\n            ...userInfo.data\n          }\n        }\n      } else {\n        state.userInfo = userInfo\n      }\n    },\n\n    SET_BASIC_INFO(state, basicInfo) {\n      state.basicInfo = {\n        ...state.basicInfo,\n        ...basicInfo\n      }\n    },\n\n    SET_AVATAR_UPDATE_TIME(state, timestamp) {\n      state.avatarUpdateTime = timestamp\n    },\n\n    SET_TOKEN(state, token) {\n      state.token = token\n      state.isAuthenticated = !!token\n    },\n\n    SET_REFRESH_TOKEN(state, refreshToken) {\n      state.refreshToken = refreshToken\n    },\n\n    SET_USER(state, user) {\n      const userStore = useUserStore()\n      userStore.userInfo = user\n      state.userInfo = user\n    },\n\n    SET_LOGGED_IN(state, status) {\n      const userStore = useUserStore()\n      userStore.isLoggedIn = status\n      state.isAuthenticated = status\n    },\n\n    SET_AUTHENTICATED(state, isAuthenticated) {\n      state.isAuthenticated = isAuthenticated\n    },\n\n    CLEAR_USER_INFO(state) {\n      state.userInfo = null\n    },\n\n    CLEAR_BASIC_INFO(state) {\n      state.basicInfo = null\n    },\n\n    UPDATE_BASIC_INFO(state, basicInfo) {\n      if (state.userInfo?.data) {\n        state.userInfo.data.basic_info = {\n          ...state.userInfo.data.basic_info,\n          ...basicInfo\n        }\n      }\n    },\n\n    UPDATE_AVATAR(state, avatarUrl) {\n      if (state.userInfo?.data?.basic_info) {\n        state.userInfo.data.basic_info.avatar = avatarUrl\n      }\n    },\n\n    UPDATE_BACKGROUND(state, backgroundUrl) {\n      if (state.userInfo?.data?.basic_info) {\n        state.userInfo.data.basic_info.background = backgroundUrl\n      }\n    },\n\n    SET_LOADING_USER_INFO(state, isLoading) {\n      state.isLoadingUserInfo = isLoading\n    },\n\n    SET_LAST_USER_INFO_FETCH(state, timestamp) {\n      state.lastUserInfoFetch = timestamp\n    }\n  },\n\n  getters: {\n    userAvatar: state => {\n      return state.userInfo?.data?.basic_info?.avatar || defaultAvatar\n    },\n\n    userName: state => {\n      return state.userInfo?.data?.basic_info?.nickname || '未设置昵称'\n    },\n\n    userNickname: state => {\n      return state.userInfo?.data?.basic_info?.nickname || '未设置昵称'\n    },\n\n    userPhone: state => {\n      return state.userInfo?.data?.basic_info?.phone\n    },\n\n    username: state => state.basicInfo?.username,\n\n    avatar: state => state.basicInfo?.avatar\n  },\n\n  actions: {\n    async checkAuth({ commit, dispatch }) {\n      try {\n        const userStore = useUserStore()\n        const token = localStorage.getItem(STORAGE_KEYS.TOKEN)\n        if (!token) {\n          commit('SET_LOGGED_IN', false)\n          return false\n        }\n\n        request.defaults.headers.common['Authorization'] = `Bearer ${token}`\n        \n        try {\n          const accountStore = useAccountStore()\n          const response = await accountStore.fetchUserInfo()\n          commit('SET_LOGGED_IN', true)\n          return true\n        } catch (error) {\n          if (error.response?.status === 401) {\n            const refreshSuccess = await dispatch('refreshToken')\n            if (refreshSuccess) {\n              await accountStore.fetchUserInfo()\n              commit('SET_LOGGED_IN', true)\n              return true\n            }\n          }\n          commit('SET_LOGGED_IN', false)\n          return false\n        }\n      } catch (error) {\n        console.error('Auth check failed:', error)\n        commit('SET_LOGGED_IN', false)\n        return false\n      }\n    },\n\n    async fetchUserInfo({ commit, state }) {\n      // 如果正在加载，返回\n      if (state.isLoadingUserInfo) {\n        return\n      }\n      \n      // 如果数据已经存在且在5分钟内获取过，直接返回\n      const now = Date.now()\n      if (state.userInfo && state.lastUserInfoFetch && \n          (now - state.lastUserInfoFetch) < 5 * 60 * 1000) {\n        return state.userInfo\n      }\n\n      try {\n        commit('SET_LOADING_USER_INFO', true)\n        const response = await user.getUserInfo()\n        \n        if (response.data?.code === 200) {\n          commit('SET_USER_INFO', response.data)\n          commit('SET_LAST_USER_INFO_FETCH', now)\n          return response.data\n        }\n      } catch (error) {\n        console.error('获取用户信息失败:', error)\n        throw error\n      } finally {\n        commit('SET_LOADING_USER_INFO', false)\n      }\n    },\n\n    async updateBasicInfo({ commit }, { type, data }) {\n      try {\n        let response\n        if (type === 'avatar') {\n          response = await profile.uploadAvatar(data)\n        } else if (type === 'background') {\n          response = await profile.uploadBackground(data)\n        } else if (type === 'basic') {\n          response = await profile.updateModule('basic_info', data)\n        } else {\n          throw new Error('未知的更新类型')\n        }\n\n        if (response?.data?.code === 200) {\n          if (type === 'avatar' || type === 'background') {\n            commit('SET_AVATAR_UPDATE_TIME', Date.now())\n          }\n          if (type === 'basic') {\n            commit('UPDATE_BASIC_INFO', response.data.data)\n          } else {\n            const { user, basic_info } = response.data.data\n            if (user) {\n              commit('SET_USER_INFO', user)\n            }\n            if (basic_info) {\n              commit('SET_BASIC_INFO', basic_info)\n            }\n          }\n          return response\n        }\n        throw new Error(response?.data?.message || '更新失败')\n      } catch (error) {\n        console.error('Failed to update basic info:', error)\n        throw error\n      }\n    },\n\n    async logout({ commit }) {\n      try {\n        await auth.logout()\n      } catch (error) {\n        console.error('Logout failed:', error)\n      } finally {\n        // 清理状态\n        commit('SET_TOKEN', null)\n        commit('SET_REFRESH_TOKEN', null)\n        commit('SET_USER', null)\n        commit('SET_LOGGED_IN', false)\n        commit('CLEAR_USER_INFO')\n        commit('CLEAR_BASIC_INFO')\n        \n        // 使用 storage 服务清除认证信息\n        storage.clearAuth()\n        \n        // 清除请求头\n        delete request.defaults.headers.common['Authorization']\n        \n        // 跳转到登录页\n        router.push('/login')\n      }\n    },\n\n    async fetchCompleteness({ commit }) {\n      try {\n        const response = await profile.getCompleteness()\n        if (response.data?.code === 200) {\n          commit('SET_COMPLETENESS', response.data)\n          return response.data\n        }\n      } catch (error) {\n        console.error('获取完整度失败:', error)\n      }\n    },\n\n    async login({ commit }, { access, refresh, rememberMe = false }) {\n      try {\n        // 使用 storage 服务保存认证信息，它会处理过期时间\n        storage.saveAuth({ access, refresh }, rememberMe)\n        \n        // 设置请求头\n        request.defaults.headers.common['Authorization'] = `Bearer ${access}`\n        \n        // 更新 store 状态\n        commit('SET_TOKEN', access)\n        commit('SET_REFRESH_TOKEN', refresh)\n        commit('SET_LOGGED_IN', true)\n\n        // 获取用户信息\n        try {\n          const userInfoResponse = await this.dispatch('fetchUserInfo')\n          if (userInfoResponse?.data?.user && rememberMe) {\n            storage.savePhone(userInfoResponse.data.user.phone, true)\n          }\n        } catch (error) {\n          console.warn('获取用户信息失败，但不影响登录状态:', error)\n        }\n      } catch (error) {\n        console.error('登录失败:', error)\n        throw error\n      }\n    },\n\n    async refreshToken({ commit, state }) {\n      try {\n        const refreshToken = localStorage.getItem(STORAGE_KEYS.REFRESH_TOKEN)\n        if (!refreshToken) {\n          throw new Error('No refresh token')\n        }\n\n        const response = await auth.refreshToken({ refresh: refreshToken })\n        \n        if (response.data?.code === 200) {\n          const { access } = response.data.data\n          \n          // 使用 storage 服务保存认证信息\n          // 保持原有的记住我状态\n          const rememberMe = localStorage.getItem(STORAGE_KEYS.REMEMBER_ME) === 'true'\n          storage.saveAuth({ \n            access, \n            refresh: refreshToken  // 保持原有的 refresh token\n          }, rememberMe)\n          \n          // 更新 store 状态\n          commit('SET_TOKEN', access)\n          \n          return true\n        }\n        return false\n      } catch (error) {\n        console.error('Token refresh failed:', error)\n        // 清除所有认证状态\n        commit('SET_TOKEN', null)\n        commit('SET_REFRESH_TOKEN', null)\n        commit('SET_USER', null)\n        commit('SET_LOGGED_IN', false)\n        \n        // 使用 storage 服务清除认证信息\n        storage.clearAuth()\n        \n        return false\n      }\n    },\n\n    async updateAvatar({ commit }, formData) {\n      try {\n        const response = await profile.uploadAvatar(formData)\n        if (response.data?.code === 200) {\n          const avatarUrl = response.data.data.avatar\n          commit('UPDATE_AVATAR', avatarUrl)\n          return avatarUrl\n        }\n        throw new Error(response.data?.message || '更新头像失败')\n      } catch (error) {\n        console.error('Failed to update avatar:', error)\n        throw error\n      }\n    },\n\n    async updateBackground({ commit }, formData) {\n      try {\n        const response = await profile.uploadBackground(formData)\n        if (response.data?.code === 200) {\n          const backgroundUrl = response.data.data.background\n          commit('UPDATE_BACKGROUND', backgroundUrl)\n          return backgroundUrl\n        }\n        throw new Error(response.data?.message || '更新背景图失败')\n      } catch (error) {\n        console.error('Failed to update background:', error)\n        throw error\n      }\n    },\n\n    async getUserInfo({ commit }) {\n      try {\n        const response = await user.getUserInfo()\n        if (response.data?.code === 200) {\n          commit('SET_USER_INFO', response.data)\n        }\n        return response\n      } catch (error) {\n        console.error('获取用户信息失败:', error)\n        throw error\n      }\n    }\n  }\n})"],"mappings":";AAAA,SAASA,WAAW,QAAQ,MAAM;AAClC,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,OAAOC,OAAO,MAAM,eAAe;AACnC,OAAOC,OAAO,MAAM,iBAAiB;AACrC,OAAOC,MAAM,MAAM,WAAW;AAC9B,SAASC,OAAO,QAAQ,iBAAiB;AACzC,SAASC,iBAAiB,QAAQ,cAAc;AAChD,OAAOC,aAAa,MAAM,oCAAoC;AAC9D,SAASC,YAAY,QAAQ,eAAe;AAC5C,SAASC,eAAe,QAAQ,kBAAkB;AAElD,eAAeT,WAAW,CAAC;EACzBU,KAAK,EAAE;IACLC,SAAS,EAAE,IAAI;IACfC,iBAAiB,EAAE,KAAK;IACxBC,iBAAiB,EAAE;EACrB,CAAC;EAEDC,SAAS,EAAE;IACTC,QAAQA,CAACL,KAAK,EAAEM,eAAe,EAAE;MAC/BN,KAAK,CAACM,eAAe,GAAGA,eAAe;IACzC,CAAC;IAEDC,aAAaA,CAACP,KAAK,EAAEQ,QAAQ,EAAE;MAC7B;MACA,IAAIR,KAAK,CAACQ,QAAQ,EAAE;QAClBR,KAAK,CAACQ,QAAQ,GAAAC,aAAA,CAAAA,aAAA,KACTT,KAAK,CAACQ,QAAQ;UACjBE,IAAI,EAAEF,QAAQ,CAACE,IAAI;UACnBC,OAAO,EAAEH,QAAQ,CAACG,OAAO;UACzBC,IAAI,EAAAH,aAAA,CAAAA,aAAA,KACCT,KAAK,CAACQ,QAAQ,CAACI,IAAI;YACtBC,IAAI,EAAAJ,aAAA,CAAAA,aAAA,KACCT,KAAK,CAACQ,QAAQ,CAACI,IAAI,EAAEC,IAAI,GACzBL,QAAQ,CAACI,IAAI,EAAEC,IAAI;UACvB,GACEL,QAAQ,CAACI,IAAI;QACjB,EACF;MACH,CAAC,MAAM;QACLZ,KAAK,CAACQ,QAAQ,GAAGA,QAAQ;MAC3B;IACF,CAAC;IAEDM,cAAcA,CAACd,KAAK,EAAEC,SAAS,EAAE;MAC/BD,KAAK,CAACC,SAAS,GAAAQ,aAAA,CAAAA,aAAA,KACVT,KAAK,CAACC,SAAS,GACfA,SAAS,CACb;IACH,CAAC;IAEDc,sBAAsBA,CAACf,KAAK,EAAEgB,SAAS,EAAE;MACvChB,KAAK,CAACiB,gBAAgB,GAAGD,SAAS;IACpC,CAAC;IAEDE,SAASA,CAAClB,KAAK,EAAEmB,KAAK,EAAE;MACtBnB,KAAK,CAACmB,KAAK,GAAGA,KAAK;MACnBnB,KAAK,CAACM,eAAe,GAAG,CAAC,CAACa,KAAK;IACjC,CAAC;IAEDC,iBAAiBA,CAACpB,KAAK,EAAEqB,YAAY,EAAE;MACrCrB,KAAK,CAACqB,YAAY,GAAGA,YAAY;IACnC,CAAC;IAEDC,QAAQA,CAACtB,KAAK,EAAEa,IAAI,EAAE;MACpB,MAAMU,SAAS,GAAGzB,YAAY,CAAC,CAAC;MAChCyB,SAAS,CAACf,QAAQ,GAAGK,IAAI;MACzBb,KAAK,CAACQ,QAAQ,GAAGK,IAAI;IACvB,CAAC;IAEDW,aAAaA,CAACxB,KAAK,EAAEyB,MAAM,EAAE;MAC3B,MAAMF,SAAS,GAAGzB,YAAY,CAAC,CAAC;MAChCyB,SAAS,CAACG,UAAU,GAAGD,MAAM;MAC7BzB,KAAK,CAACM,eAAe,GAAGmB,MAAM;IAChC,CAAC;IAEDE,iBAAiBA,CAAC3B,KAAK,EAAEM,eAAe,EAAE;MACxCN,KAAK,CAACM,eAAe,GAAGA,eAAe;IACzC,CAAC;IAEDsB,eAAeA,CAAC5B,KAAK,EAAE;MACrBA,KAAK,CAACQ,QAAQ,GAAG,IAAI;IACvB,CAAC;IAEDqB,gBAAgBA,CAAC7B,KAAK,EAAE;MACtBA,KAAK,CAACC,SAAS,GAAG,IAAI;IACxB,CAAC;IAED6B,iBAAiBA,CAAC9B,KAAK,EAAEC,SAAS,EAAE;MAClC,IAAID,KAAK,CAACQ,QAAQ,EAAEI,IAAI,EAAE;QACxBZ,KAAK,CAACQ,QAAQ,CAACI,IAAI,CAACmB,UAAU,GAAAtB,aAAA,CAAAA,aAAA,KACzBT,KAAK,CAACQ,QAAQ,CAACI,IAAI,CAACmB,UAAU,GAC9B9B,SAAS,CACb;MACH;IACF,CAAC;IAED+B,aAAaA,CAAChC,KAAK,EAAEiC,SAAS,EAAE;MAC9B,IAAIjC,KAAK,CAACQ,QAAQ,EAAEI,IAAI,EAAEmB,UAAU,EAAE;QACpC/B,KAAK,CAACQ,QAAQ,CAACI,IAAI,CAACmB,UAAU,CAACG,MAAM,GAAGD,SAAS;MACnD;IACF,CAAC;IAEDE,iBAAiBA,CAACnC,KAAK,EAAEoC,aAAa,EAAE;MACtC,IAAIpC,KAAK,CAACQ,QAAQ,EAAEI,IAAI,EAAEmB,UAAU,EAAE;QACpC/B,KAAK,CAACQ,QAAQ,CAACI,IAAI,CAACmB,UAAU,CAACM,UAAU,GAAGD,aAAa;MAC3D;IACF,CAAC;IAEDE,qBAAqBA,CAACtC,KAAK,EAAEuC,SAAS,EAAE;MACtCvC,KAAK,CAACE,iBAAiB,GAAGqC,SAAS;IACrC,CAAC;IAEDC,wBAAwBA,CAACxC,KAAK,EAAEgB,SAAS,EAAE;MACzChB,KAAK,CAACG,iBAAiB,GAAGa,SAAS;IACrC;EACF,CAAC;EAEDyB,OAAO,EAAE;IACPC,UAAU,EAAE1C,KAAK,IAAI;MACnB,OAAOA,KAAK,CAACQ,QAAQ,EAAEI,IAAI,EAAEmB,UAAU,EAAEG,MAAM,IAAIrC,aAAa;IAClE,CAAC;IAED8C,QAAQ,EAAE3C,KAAK,IAAI;MACjB,OAAOA,KAAK,CAACQ,QAAQ,EAAEI,IAAI,EAAEmB,UAAU,EAAEa,QAAQ,IAAI,OAAO;IAC9D,CAAC;IAEDC,YAAY,EAAE7C,KAAK,IAAI;MACrB,OAAOA,KAAK,CAACQ,QAAQ,EAAEI,IAAI,EAAEmB,UAAU,EAAEa,QAAQ,IAAI,OAAO;IAC9D,CAAC;IAEDE,SAAS,EAAE9C,KAAK,IAAI;MAClB,OAAOA,KAAK,CAACQ,QAAQ,EAAEI,IAAI,EAAEmB,UAAU,EAAEgB,KAAK;IAChD,CAAC;IAEDC,QAAQ,EAAEhD,KAAK,IAAIA,KAAK,CAACC,SAAS,EAAE+C,QAAQ;IAE5Cd,MAAM,EAAElC,KAAK,IAAIA,KAAK,CAACC,SAAS,EAAEiC;EACpC,CAAC;EAEDe,OAAO,EAAE;IACP,MAAMC,SAASA,CAAC;MAAEC,MAAM;MAAEC;IAAS,CAAC,EAAE;MACpC,IAAI;QACF,MAAM7B,SAAS,GAAGzB,YAAY,CAAC,CAAC;QAChC,MAAMqB,KAAK,GAAGkC,YAAY,CAACC,OAAO,CAAC/D,YAAY,CAACgE,KAAK,CAAC;QACtD,IAAI,CAACpC,KAAK,EAAE;UACVgC,MAAM,CAAC,eAAe,EAAE,KAAK,CAAC;UAC9B,OAAO,KAAK;QACd;QAEA1D,OAAO,CAAC+D,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUvC,KAAK,EAAE;QAEpE,IAAI;UACF,MAAMwC,YAAY,GAAG5D,eAAe,CAAC,CAAC;UACtC,MAAM6D,QAAQ,GAAG,MAAMD,YAAY,CAACE,aAAa,CAAC,CAAC;UACnDV,MAAM,CAAC,eAAe,EAAE,IAAI,CAAC;UAC7B,OAAO,IAAI;QACb,CAAC,CAAC,OAAOW,KAAK,EAAE;UACd,IAAIA,KAAK,CAACF,QAAQ,EAAEnC,MAAM,KAAK,GAAG,EAAE;YAClC,MAAMsC,cAAc,GAAG,MAAMX,QAAQ,CAAC,cAAc,CAAC;YACrD,IAAIW,cAAc,EAAE;cAClB,MAAMJ,YAAY,CAACE,aAAa,CAAC,CAAC;cAClCV,MAAM,CAAC,eAAe,EAAE,IAAI,CAAC;cAC7B,OAAO,IAAI;YACb;UACF;UACAA,MAAM,CAAC,eAAe,EAAE,KAAK,CAAC;UAC9B,OAAO,KAAK;QACd;MACF,CAAC,CAAC,OAAOW,KAAK,EAAE;QACdE,OAAO,CAACF,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;QAC1CX,MAAM,CAAC,eAAe,EAAE,KAAK,CAAC;QAC9B,OAAO,KAAK;MACd;IACF,CAAC;IAED,MAAMU,aAAaA,CAAC;MAAEV,MAAM;MAAEnD;IAAM,CAAC,EAAE;MACrC;MACA,IAAIA,KAAK,CAACE,iBAAiB,EAAE;QAC3B;MACF;;MAEA;MACA,MAAM+D,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;MACtB,IAAIjE,KAAK,CAACQ,QAAQ,IAAIR,KAAK,CAACG,iBAAiB,IACxC8D,GAAG,GAAGjE,KAAK,CAACG,iBAAiB,GAAI,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE;QACnD,OAAOH,KAAK,CAACQ,QAAQ;MACvB;MAEA,IAAI;QACF2C,MAAM,CAAC,uBAAuB,EAAE,IAAI,CAAC;QACrC,MAAMS,QAAQ,GAAG,MAAM/C,IAAI,CAACsD,WAAW,CAAC,CAAC;QAEzC,IAAIP,QAAQ,CAAChD,IAAI,EAAEF,IAAI,KAAK,GAAG,EAAE;UAC/ByC,MAAM,CAAC,eAAe,EAAES,QAAQ,CAAChD,IAAI,CAAC;UACtCuC,MAAM,CAAC,0BAA0B,EAAEc,GAAG,CAAC;UACvC,OAAOL,QAAQ,CAAChD,IAAI;QACtB;MACF,CAAC,CAAC,OAAOkD,KAAK,EAAE;QACdE,OAAO,CAACF,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;QACjC,MAAMA,KAAK;MACb,CAAC,SAAS;QACRX,MAAM,CAAC,uBAAuB,EAAE,KAAK,CAAC;MACxC;IACF,CAAC;IAED,MAAMiB,eAAeA,CAAC;MAAEjB;IAAO,CAAC,EAAE;MAAEkB,IAAI;MAAEzD;IAAK,CAAC,EAAE;MAChD,IAAI;QACF,IAAIgD,QAAQ;QACZ,IAAIS,IAAI,KAAK,QAAQ,EAAE;UACrBT,QAAQ,GAAG,MAAMpE,OAAO,CAAC8E,YAAY,CAAC1D,IAAI,CAAC;QAC7C,CAAC,MAAM,IAAIyD,IAAI,KAAK,YAAY,EAAE;UAChCT,QAAQ,GAAG,MAAMpE,OAAO,CAAC+E,gBAAgB,CAAC3D,IAAI,CAAC;QACjD,CAAC,MAAM,IAAIyD,IAAI,KAAK,OAAO,EAAE;UAC3BT,QAAQ,GAAG,MAAMpE,OAAO,CAACgF,YAAY,CAAC,YAAY,EAAE5D,IAAI,CAAC;QAC3D,CAAC,MAAM;UACL,MAAM,IAAI6D,KAAK,CAAC,SAAS,CAAC;QAC5B;QAEA,IAAIb,QAAQ,EAAEhD,IAAI,EAAEF,IAAI,KAAK,GAAG,EAAE;UAChC,IAAI2D,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,YAAY,EAAE;YAC9ClB,MAAM,CAAC,wBAAwB,EAAEe,IAAI,CAACD,GAAG,CAAC,CAAC,CAAC;UAC9C;UACA,IAAII,IAAI,KAAK,OAAO,EAAE;YACpBlB,MAAM,CAAC,mBAAmB,EAAES,QAAQ,CAAChD,IAAI,CAACA,IAAI,CAAC;UACjD,CAAC,MAAM;YACL,MAAM;cAAEC,IAAI;cAAEkB;YAAW,CAAC,GAAG6B,QAAQ,CAAChD,IAAI,CAACA,IAAI;YAC/C,IAAIC,IAAI,EAAE;cACRsC,MAAM,CAAC,eAAe,EAAEtC,IAAI,CAAC;YAC/B;YACA,IAAIkB,UAAU,EAAE;cACdoB,MAAM,CAAC,gBAAgB,EAAEpB,UAAU,CAAC;YACtC;UACF;UACA,OAAO6B,QAAQ;QACjB;QACA,MAAM,IAAIa,KAAK,CAACb,QAAQ,EAAEhD,IAAI,EAAED,OAAO,IAAI,MAAM,CAAC;MACpD,CAAC,CAAC,OAAOmD,KAAK,EAAE;QACdE,OAAO,CAACF,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpD,MAAMA,KAAK;MACb;IACF,CAAC;IAED,MAAMY,MAAMA,CAAC;MAAEvB;IAAO,CAAC,EAAE;MACvB,IAAI;QACF,MAAMwB,IAAI,CAACD,MAAM,CAAC,CAAC;MACrB,CAAC,CAAC,OAAOZ,KAAK,EAAE;QACdE,OAAO,CAACF,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACxC,CAAC,SAAS;QACR;QACAX,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC;QACzBA,MAAM,CAAC,mBAAmB,EAAE,IAAI,CAAC;QACjCA,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC;QACxBA,MAAM,CAAC,eAAe,EAAE,KAAK,CAAC;QAC9BA,MAAM,CAAC,iBAAiB,CAAC;QACzBA,MAAM,CAAC,kBAAkB,CAAC;;QAE1B;QACAxD,OAAO,CAACiF,SAAS,CAAC,CAAC;;QAEnB;QACA,OAAOnF,OAAO,CAAC+D,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;;QAEvD;QACAhE,MAAM,CAACmF,IAAI,CAAC,QAAQ,CAAC;MACvB;IACF,CAAC;IAED,MAAMC,iBAAiBA,CAAC;MAAE3B;IAAO,CAAC,EAAE;MAClC,IAAI;QACF,MAAMS,QAAQ,GAAG,MAAMpE,OAAO,CAACuF,eAAe,CAAC,CAAC;QAChD,IAAInB,QAAQ,CAAChD,IAAI,EAAEF,IAAI,KAAK,GAAG,EAAE;UAC/ByC,MAAM,CAAC,kBAAkB,EAAES,QAAQ,CAAChD,IAAI,CAAC;UACzC,OAAOgD,QAAQ,CAAChD,IAAI;QACtB;MACF,CAAC,CAAC,OAAOkD,KAAK,EAAE;QACdE,OAAO,CAACF,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;MAClC;IACF,CAAC;IAED,MAAMkB,KAAKA,CAAC;MAAE7B;IAAO,CAAC,EAAE;MAAE8B,MAAM;MAAEC,OAAO;MAAEC,UAAU,GAAG;IAAM,CAAC,EAAE;MAC/D,IAAI;QACF;QACAxF,OAAO,CAACyF,QAAQ,CAAC;UAAEH,MAAM;UAAEC;QAAQ,CAAC,EAAEC,UAAU,CAAC;;QAEjD;QACA1F,OAAO,CAAC+D,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUuB,MAAM,EAAE;;QAErE;QACA9B,MAAM,CAAC,WAAW,EAAE8B,MAAM,CAAC;QAC3B9B,MAAM,CAAC,mBAAmB,EAAE+B,OAAO,CAAC;QACpC/B,MAAM,CAAC,eAAe,EAAE,IAAI,CAAC;;QAE7B;QACA,IAAI;UACF,MAAMkC,gBAAgB,GAAG,MAAM,IAAI,CAACjC,QAAQ,CAAC,eAAe,CAAC;UAC7D,IAAIiC,gBAAgB,EAAEzE,IAAI,EAAEC,IAAI,IAAIsE,UAAU,EAAE;YAC9CxF,OAAO,CAAC2F,SAAS,CAACD,gBAAgB,CAACzE,IAAI,CAACC,IAAI,CAACkC,KAAK,EAAE,IAAI,CAAC;UAC3D;QACF,CAAC,CAAC,OAAOe,KAAK,EAAE;UACdE,OAAO,CAACuB,IAAI,CAAC,oBAAoB,EAAEzB,KAAK,CAAC;QAC3C;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdE,OAAO,CAACF,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;QAC7B,MAAMA,KAAK;MACb;IACF,CAAC;IAED,MAAMzC,YAAYA,CAAC;MAAE8B,MAAM;MAAEnD;IAAM,CAAC,EAAE;MACpC,IAAI;QACF,MAAMqB,YAAY,GAAGgC,YAAY,CAACC,OAAO,CAAC/D,YAAY,CAACiG,aAAa,CAAC;QACrE,IAAI,CAACnE,YAAY,EAAE;UACjB,MAAM,IAAIoD,KAAK,CAAC,kBAAkB,CAAC;QACrC;QAEA,MAAMb,QAAQ,GAAG,MAAMe,IAAI,CAACtD,YAAY,CAAC;UAAE6D,OAAO,EAAE7D;QAAa,CAAC,CAAC;QAEnE,IAAIuC,QAAQ,CAAChD,IAAI,EAAEF,IAAI,KAAK,GAAG,EAAE;UAC/B,MAAM;YAAEuE;UAAO,CAAC,GAAGrB,QAAQ,CAAChD,IAAI,CAACA,IAAI;;UAErC;UACA;UACA,MAAMuE,UAAU,GAAG9B,YAAY,CAACC,OAAO,CAAC/D,YAAY,CAACkG,WAAW,CAAC,KAAK,MAAM;UAC5E9F,OAAO,CAACyF,QAAQ,CAAC;YACfH,MAAM;YACNC,OAAO,EAAE7D,YAAY,CAAE;UACzB,CAAC,EAAE8D,UAAU,CAAC;;UAEd;UACAhC,MAAM,CAAC,WAAW,EAAE8B,MAAM,CAAC;UAE3B,OAAO,IAAI;QACb;QACA,OAAO,KAAK;MACd,CAAC,CAAC,OAAOnB,KAAK,EAAE;QACdE,OAAO,CAACF,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7C;QACAX,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC;QACzBA,MAAM,CAAC,mBAAmB,EAAE,IAAI,CAAC;QACjCA,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC;QACxBA,MAAM,CAAC,eAAe,EAAE,KAAK,CAAC;;QAE9B;QACAxD,OAAO,CAACiF,SAAS,CAAC,CAAC;QAEnB,OAAO,KAAK;MACd;IACF,CAAC;IAED,MAAMc,YAAYA,CAAC;MAAEvC;IAAO,CAAC,EAAEwC,QAAQ,EAAE;MACvC,IAAI;QACF,MAAM/B,QAAQ,GAAG,MAAMpE,OAAO,CAAC8E,YAAY,CAACqB,QAAQ,CAAC;QACrD,IAAI/B,QAAQ,CAAChD,IAAI,EAAEF,IAAI,KAAK,GAAG,EAAE;UAC/B,MAAMuB,SAAS,GAAG2B,QAAQ,CAAChD,IAAI,CAACA,IAAI,CAACsB,MAAM;UAC3CiB,MAAM,CAAC,eAAe,EAAElB,SAAS,CAAC;UAClC,OAAOA,SAAS;QAClB;QACA,MAAM,IAAIwC,KAAK,CAACb,QAAQ,CAAChD,IAAI,EAAED,OAAO,IAAI,QAAQ,CAAC;MACrD,CAAC,CAAC,OAAOmD,KAAK,EAAE;QACdE,OAAO,CAACF,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChD,MAAMA,KAAK;MACb;IACF,CAAC;IAED,MAAM8B,gBAAgBA,CAAC;MAAEzC;IAAO,CAAC,EAAEwC,QAAQ,EAAE;MAC3C,IAAI;QACF,MAAM/B,QAAQ,GAAG,MAAMpE,OAAO,CAAC+E,gBAAgB,CAACoB,QAAQ,CAAC;QACzD,IAAI/B,QAAQ,CAAChD,IAAI,EAAEF,IAAI,KAAK,GAAG,EAAE;UAC/B,MAAM0B,aAAa,GAAGwB,QAAQ,CAAChD,IAAI,CAACA,IAAI,CAACyB,UAAU;UACnDc,MAAM,CAAC,mBAAmB,EAAEf,aAAa,CAAC;UAC1C,OAAOA,aAAa;QACtB;QACA,MAAM,IAAIqC,KAAK,CAACb,QAAQ,CAAChD,IAAI,EAAED,OAAO,IAAI,SAAS,CAAC;MACtD,CAAC,CAAC,OAAOmD,KAAK,EAAE;QACdE,OAAO,CAACF,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpD,MAAMA,KAAK;MACb;IACF,CAAC;IAED,MAAMK,WAAWA,CAAC;MAAEhB;IAAO,CAAC,EAAE;MAC5B,IAAI;QACF,MAAMS,QAAQ,GAAG,MAAM/C,IAAI,CAACsD,WAAW,CAAC,CAAC;QACzC,IAAIP,QAAQ,CAAChD,IAAI,EAAEF,IAAI,KAAK,GAAG,EAAE;UAC/ByC,MAAM,CAAC,eAAe,EAAES,QAAQ,CAAChD,IAAI,CAAC;QACxC;QACA,OAAOgD,QAAQ;MACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdE,OAAO,CAACF,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;QACjC,MAAMA,KAAK;MACb;IACF;EACF;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}