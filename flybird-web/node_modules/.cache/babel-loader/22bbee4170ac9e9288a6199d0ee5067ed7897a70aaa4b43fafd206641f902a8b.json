{"ast":null,"code":"import { createCommentVNode as _createCommentVNode } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _createCommentVNode(\" No changes to template section \");\n}","map":{"version":3,"names":["_createCommentVNode"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/views/user/MyProfile/index.vue"],"sourcesContent":["<!-- src/views/user/MyProfile/index.vue -->\n<template>\n  <!-- No changes to template section -->\n</template>\n\n<script setup>\nimport { ref, onMounted, computed, watch, nextTick, onUnmounted } from 'vue'\nimport { useModules } from '@/composables/useModules'\nimport { useProfileData } from '@/composables/useProfileData'\nimport useLoading from '@/composables/useLoading'\nimport profile from '@/api/profile'\nimport { ElMessage } from 'element-plus'\nimport { eventBus } from '@/utils/eventBus'\nimport { useProfileStore } from '@/stores/profile'\nimport { useAuthStore } from '@/stores/auth'\nimport {\n  Dialog,\n  DialogPanel,\n  DialogTitle,\n  TransitionChild,\n  TransitionRoot\n} from '@headlessui/vue'\nimport {\n  PlusIcon,\n  ExclamationTriangleIcon,\n  DocumentTextIcon,\n  XMarkIcon\n} from '@heroicons/vue/24/outline'\nimport { ALL_MODULES } from '@/constants'\n\n// 组件导入\nimport BasicInfo from './components/BasicInfo.vue'\nimport ResumeStatus from './components/ResumeStatus.vue'\nimport ModuleList from './components/ModuleList.vue'\nimport EditWorkExperienceDialog from './dialogs/EditWorkExperienceDialog.vue'\nimport EditBasicDialog from './dialogs/EditBasicDialog.vue'\nimport EditJobIntentionDialog from './dialogs/EditJobIntentionDialog.vue'\nimport EditSocialLinkDialog from './dialogs/EditSocialLinkDialog.vue'\nimport EditPortfolioDialog from './dialogs/EditPortfolioDialog.vue'\nimport AIOptimizeDialog from './dialogs/AIOptimizeDialog.vue'\nimport EditEducationDialog from './dialogs/EditEducationDialog.vue'\nimport EditProjectDialog from './dialogs/EditProjectDialog.vue'\nimport EditCertificateDialog from './dialogs/EditCertificateDialog.vue'\nimport EditSkillDialog from './dialogs/EditSkillDialog.vue'\nimport EditLanguageDialog from './dialogs/EditLanguageDialog.vue'\n\n\n// 获取数据相关\nconst profileLoading = ref(false)\nconst profileData = ref(null)\nconst completionData = ref(null)\nconst bioExpanded = ref(false)\nconst showBioExpandButton = ref(false)\nconst profileStore = useProfileStore()\n\n// 布局数据\nconst layoutData = ref({})\n\n// 布局状态\nconst layoutStatus = computed(() => {\n  return layoutData.value || {}\n})\n\n// 使用组合式函数\nconst { \n  loading: modulesLoading,\n  modules,\n  fetchModulesData\n} = useModules(layoutData)\n\nconst {\n  fetchCompletionData\n} = useProfileData()\n\n// 使用 loading 组合式函数\nconst { loading, withLoading } = useLoading()\n\n// 当前编辑的模块\nconst currentModule = ref(null)\nconst editFormData = ref({})\nconst showEditModal = ref(false)\n\n// 弹窗状态\nconst showWorkExperienceDialog = ref(false)\nconst showJobIntentionDialog = ref(false)\nconst editJobIntentionData = ref({})\nconst editWorkExperienceData = ref({})\nconst showAIOptimizeDialog = ref(false)\nconst showEducationDialog = ref(false)\nconst editEducationData = ref({})\nconst showProjectDialog = ref(false)\nconst editProjectData = ref({})\nconst showCertificateDialog = ref(false)\nconst editCertificateData = ref({})\nconst showSkillDialog = ref(false)\nconst editSkillData = ref({})\nconst showLanguageDialog = ref(false)\nconst editLanguageData = ref({})\n\n// 确认对话框状态\nconst showConfirmDialog = ref(false)\nconst confirmMessage = ref('')\nconst confirmCallback = ref(null)\n\n// 显示确认对话框\nconst showConfirm = (message, callback) => {\n  confirmMessage.value = message\n  confirmCallback.value = callback\n  showConfirmDialog.value = true\n}\n\n// 处理确认\nconst handleConfirm = async () => {\n  if (confirmCallback.value) {\n    await confirmCallback.value()\n  }\n  showConfirmDialog.value = false\n}\n\n// 计算激活的模块\nconst activeModules = computed(() => {\n  if (!modules.value) return []\n  const active = modules.value.filter(module => {\n    // 只显示布局中明确设置为 visible: true 的模块\n    const layout = layoutData.value[module.type]\n    return layout?.visible === true\n  }).sort((a, b) => {\n    const orderA = layoutData.value[a.type]?.order || 999\n    const orderB = layoutData.value[b.type]?.order || 999\n    return orderA - orderB\n  })\n  return active\n})\n\n// 计算未激活的模块\nconst inactiveModules = computed(() => {\n  if (!modules.value) return []\n  const inactive = modules.value.filter(module => {\n    // 只显示布局中明确设置为 visible: false 的模块\n    const layout = layoutData.value[module.type]\n    return layout?.visible === false\n  })\n  return inactive\n})\n\n// 定义模块类型\nconst moduleTypes = Object.keys(ALL_MODULES)\n\n// 初始化数据\nconst initData = async () => {\n  if (profileLoading.value) return // 防止重复加载\n  \n  try {\n    profileLoading.value = true\n    \n    // 获取布局数据 - 只在 layoutData 为空时获取\n    if (!layoutData.value || Object.keys(layoutData.value).length === 0) {\n      await fetchLayoutData()\n    }\n    \n    // 获取档案数据 - 只在 profileData 为空时获取\n    if (!profileData.value || Object.keys(profileData.value).length === 0) {\n      await fetchProfileData()\n    }\n    \n    // 获取完整度数据 - 只在 completionData 为空时获取\n    if (!completionData.value || completionData.value.total_score === 0) {\n      await fetchCompletenessData()\n    }\n  } catch (error) {\n    console.error('初始化数据失败:', error)\n    ElMessage.error('初始化数据失败')\n  } finally {\n    profileLoading.value = false\n  }\n}\n\n// 获取档案数据\nconst fetchProfileData = async (forceRefresh = false) => {\n  try {\n    // 如果不是强制刷新，且 store 中已有数据且不为空，直接使用\n    if (!forceRefresh && profileStore.basicInfo && Object.keys(profileStore.basicInfo).length > 0) {\n      profileData.value = profileStore.basicInfo\n      return\n    }\n\n    const response = await profile.getData()\n    if (response.data?.code === 200) {\n      // 更新档案数据\n      profileData.value = response.data.data\n      // 更新 profileStore 中的数据\n      profileStore.setBasicInfo(response.data.data)\n    }\n  } catch (error) {\n    console.error('获取档案数据失败:', error)\n  }\n}\n\n// 获取完整度数据\nconst fetchCompletenessData = async () => {\n  try {\n    // 如果 store 中已有数据且不为空，直接使用\n    if (profileStore.completeness && profileStore.completeness.total_score > 0) {\n      completionData.value = profileStore.completeness\n      return\n    }\n\n    await profileStore.fetchCompleteness()\n    completionData.value = profileStore.completeness\n  } catch (error) {\n    console.error('获取完整度数据失败:', error)\n  }\n}\n\n// 获取布局数据\nconst fetchLayoutData = async () => {\n  try {\n    // 如果已有布局数据且不为空，直接使用\n    if (layoutData.value && Object.keys(layoutData.value).length > 0) {\n      return\n    }\n\n    const response = await profile.getLayout()\n    if (response.data?.code === 200) {\n      const layout = response.data.data.layout || {}\n      layoutData.value = layout\n    }\n  } catch (error) {\n    console.error('获取布局数据失败:', error)\n  }\n}\n\n// 更新数据处理函数\nconst handleUpdate = async (updateInfo) => {\n  try {\n    if (updateInfo?.type === 'avatar') {\n      // 直接更新头像，不需要重新请求数据\n      if (profileData.value?.basic_info) {\n        profileData.value.basic_info.avatar = updateInfo.value\n        // 同步更新 store 中的数据\n        if (profileStore.basicInfo?.basic_info) {\n          profileStore.setBasicInfo({\n            ...profileStore.basicInfo,\n            basic_info: {\n              ...profileStore.basicInfo.basic_info,\n              avatar: updateInfo.value\n            }\n          })\n        }\n        await nextTick()\n      }\n      return\n    }\n    \n    // 根据更新类型选择性地刷新数据\n    switch (updateInfo?.type) {\n      case 'basic':\n        await fetchProfileData()\n        break\n      case 'completeness':\n        await fetchCompletenessData()\n        break\n      case 'layout':\n        await fetchLayoutData()\n        break\n      default:\n        // 如果没有指定类型，则完整刷新\n        await initData()\n    }\n  } catch (error) {\n    console.error('更新失败:', error)\n  }\n}\n\n// 处理编辑\nconst handleEdit = (type, data) => {\n  // 根据类型显示对应的弹窗\n  switch (type) {\n    case 'basic_info':\n      currentModule.value = { type }\n      editFormData.value = data || {}\n      showEditModal.value = true\n      break\n    case 'job_intention':\n      editJobIntentionData.value = data || {}\n      showJobIntentionDialog.value = true\n      break\n    case 'work_experience':\n      // 确保日期格式正确\n      const formattedData = {\n        ...data,\n        start_date: data.start_date?.split('T')[0] || null,\n        end_date: data.end_date?.split('T')[0] || null\n      }\n      editWorkExperienceData.value = formattedData\n      showWorkExperienceDialog.value = true\n      break\n    case 'education':\n      editEducationData.value = data || {}\n      showEducationDialog.value = true\n      break\n    case 'project':\n      editProjectData.value = data || {}\n      showProjectDialog.value = true\n      break\n    case 'certificate':\n      editCertificateData.value = data || {}\n      showCertificateDialog.value = true\n      break\n    case 'skill':\n      editSkillData.value = data || {}\n      showSkillDialog.value = true\n      break\n    case 'language':\n      editLanguageData.value = data || {}\n      showLanguageDialog.value = true\n      break\n    default:\n      currentModule.value = { type }\n      editFormData.value = data || {}\n      showEditModal.value = true\n      break\n  }\n}\n\n// 处理个人简介展开/收起\nconst toggleBioExpand = () => {\n  bioExpanded.value = !bioExpanded.value\n}\n\n// 处理工作经历提交\nconst handleWorkExperienceSubmit = async (data) => {\n  try {\n    await profile.updateModule('work_experience', data)\n    ElMessage.success('保存成功')\n    showWorkExperienceDialog.value = false\n    await initData()\n  } catch (error) {\n    console.error('保存失败:', error)\n    ElMessage.error('保存失败，请重试')\n  }\n}\n\n// 获取模块显示名称\nconst getModuleName = (type) => {\n  const moduleNames = {\n    basic_info: '基本信息',\n    job_intention: '求职意向',\n    work_experience: '工作经历',\n    education: '教育经历',\n    project: '项目经历',\n    skill: '专业技能',\n    certificate: '证书奖项',\n    language: '语言能力',\n    portfolio: '作品展示',\n    social_link: '社交主页'\n  }\n  return moduleNames[type] || type\n}\n\n// 处理提交\nconst handleSubmit = async (data) => {\n  try {\n    await withLoading(async () => {\n      const type = currentModule.value?.type\n      console.log('提交数据:', { type, data })\n\n      // 使用统一的 updateModule 方法\n      const response = await profile.updateModule(type, data)\n      \n      if (response.data?.code === 200) {\n        ElMessage.success('保存成功')\n        showEditModal.value = false\n        // 重新获取数据\n        await initData()\n      } else {\n        throw new Error(response.data?.message || '保存失败')\n      }\n    })\n  } catch (error) {\n    console.error('保存失败:', error)\n    if (error.response?.data?.errors) {\n      const errorMessages = Object.entries(error.response.data.errors)\n        .map(([field, messages]) => `${field}: ${messages.join(', ')}`)\n        .join('\\n')\n      ElMessage.error(errorMessages)\n    } else {\n      ElMessage.error(error.message || '保存失败，请重试')\n    }\n  }\n}\n\n// 处理添加\nconst handleAdd = (type) => {\n  currentModule.value = { type }\n  \n  // 根据类型显示对应的弹窗并清空数据\n  switch (type) {\n    case 'work_experience':\n      editWorkExperienceData.value = {  // 重置为空对象\n        name: '',\n        company: '',\n        position: '',\n        start_date: null,\n        end_date: null,\n        description: '',\n        is_current: false\n      }\n      showWorkExperienceDialog.value = true\n      break\n      \n    case 'education':\n      editEducationData.value = {  // 重置为空对象\n        school: '',\n        major: '',\n        degree: '',\n        start_date: null,\n        end_date: null,\n        description: ''\n      }\n      showEducationDialog.value = true\n      break\n      \n    case 'project':\n      editProjectData.value = {  // 重置为空对象\n        name: '',\n        role: '',\n        start_date: null,\n        end_date: null,\n        description: '',\n        technologies: ''\n      }\n      showProjectDialog.value = true\n      break\n      \n    case 'certificate':\n      editCertificateData.value = {  // 重置为空对象\n        name: '',\n        issuing_authority: '',\n        issue_date: null,\n        expiry_date: null,\n        description: ''\n      }\n      showCertificateDialog.value = true\n      break\n      \n    case 'skill':\n      editSkillData.value = {  // 重置为空对象\n        name: '',\n        level: '初级',\n        description: '',\n        projects: '',\n        order: 0\n      }\n      showSkillDialog.value = true\n      break\n      \n    case 'language':\n      editLanguageData.value = {  // 重置为空对象\n        language: '',\n        proficiency: '',\n        certificates: ''\n      }\n      showLanguageDialog.value = true\n      break\n      \n    case 'job_intention':\n      editJobIntentionData.value = {  // 重置为空对象\n        position: '',\n        industry: '',\n        location: '',\n        salary_range: '',\n        job_type: '',\n        description: ''\n      }\n      showJobIntentionDialog.value = true\n      break\n      \n    default:\n      editFormData.value = {}  // 其他类型直接清空\n      showEditModal.value = true\n      break\n  }\n}\n\n// 处理移除模块\nconst handleModuleRemove = async (type, id) => {\n  try {\n    if (id) {\n      // 显示删除确认对话框\n      showDeleteConfirm(type, id)\n    } else {\n      // 获取当前所有可见模块的配置\n      const updatedLayout = {}\n      \n      // 保持现有可见模块的配置\n      Object.keys(layoutData.value).forEach(moduleType => {\n        if (moduleType !== type && layoutData.value[moduleType].visible) {\n          updatedLayout[moduleType] = layoutData.value[moduleType]\n        }\n      })\n      \n      // 添加要移除的模块配置\n      updatedLayout[type] = {\n        visible: false,\n        order: 999  // 移到未激活模块区域\n      }\n\n      // 提交布局更新\n      const response = await profile.updateLayout(updatedLayout)\n      if (response.data?.code === 200) {\n        // 立即更新本地布局数据\n        layoutData.value = response.data.data.layout\n        // 立即更新模块列表\n        await nextTick()\n        ElMessage.success('模块已隐藏')\n      } else {\n        throw new Error('保存布局失败')\n      }\n    }\n  } catch (error) {\n    if (error !== 'cancel') {\n      console.error('删除失败:', error)\n      if (error.response?.data?.message) {\n        ElMessage.error(error.response.data.message)\n      } else {\n        ElMessage.error('删除失败，请重试')\n      }\n    }\n  }\n}\n\n// 处理删除确认\nconst handleDeleteConfirm = async () => {\n  try {\n    const { type, id } = currentDeleteItem.value\n    await profile.deleteModuleItem(type, id)\n    ElMessage.success('删除成功')\n    await initData()\n  } catch (error) {\n    console.error('删除失败:', error)\n    ElMessage.error('删除失败，请重试')\n  } finally {\n    closeDeleteConfirm()\n  }\n}\n\nconst handleJobIntentionSubmit = async (data) => {\n  try {\n    await profile.updateModule('job_intention', data)\n    ElMessage.success('保存成功')\n    showJobIntentionDialog.value = false\n    // 重新获取完整数据\n    await initData()\n  } catch (error) {\n    console.error('保存失败:', error)\n    ElMessage.error('保存失败，请重试')\n  }\n}\n\n// 处理教育经历提交\nconst handleEducationSubmit = async (data) => {\n  try {\n    await profile.updateModule('education', data)\n    ElMessage.success('保存成功')\n    showEducationDialog.value = false\n    await initData()\n  } catch (error) {\n    console.error('保存失败:', error)\n    ElMessage.error('保存失败，请重试')\n  }\n}\n\nconst handleAIOptimize = async () => {\n  // AI优化逻辑\n}\n\nconst showDeleteConfirmDialog = ref(false)\nconst currentDeleteItem = ref(null)\n\nconst showDeleteConfirm = (type, id) => {\n  showDeleteConfirmDialog.value = true\n  currentDeleteItem.value = { type, id }\n}\n\nconst closeDeleteConfirm = () => {\n  showDeleteConfirmDialog.value = false\n  currentDeleteItem.value = null\n}\n\n// 处理添加模块\nconst handleAddModule = async (type) => {\n  try {\n    // 获取当前所有可见模块的配置\n    const updatedLayout = { ...layoutData.value }\n    \n    // 更新要添加的模块配置\n    updatedLayout[type] = {\n      visible: true,\n      order: Object.values(updatedLayout).filter(m => m.visible).length + 1\n    }\n\n    // 提交布局更新\n    const response = await profile.updateLayout(updatedLayout)\n    if (response.data?.code === 200) {\n      // 立即更新本地布局数据\n      layoutData.value = response.data.data.layout\n      // 立即更新模块列表\n      await nextTick()\n      ElMessage.success('模块已添加')\n    } else {\n      throw new Error('保存布局失败')\n    }\n  } catch (error) {\n    console.error('添加模块失败:', error)\n    ElMessage.error('添加失败，请重试')\n  }\n}\n\n// 处理项目经历提交\nconst handleProjectSubmit = async (data) => {\n  try {\n    await profile.updateModule('project', data)\n    ElMessage.success('保存成功')\n    showProjectDialog.value = false\n    await initData()\n  } catch (error) {\n    console.error('保存失败:', error)\n    ElMessage.error('保存失败，请重试')\n  }\n}\n\n// 处理证书奖项提交\nconst handleCertificateSubmit = async (data) => {\n  try {\n    await profile.updateModule('certificate', data)\n    ElMessage.success('保存成功')\n    showCertificateDialog.value = false\n    await initData()\n  } catch (error) {\n    console.error('保存失败:', error)\n    ElMessage.error('保存失败，请重试')\n  }\n}\n\n// 处理专业技能提交\nconst handleSkillSubmit = async (data) => {\n  try {\n    // 确保数据格式正确\n    const skillData = {\n      name: data.name?.trim(),\n      level: data.level || '初级',\n      description: data.description?.trim() || '',\n      projects: data.projects || '',\n      order: data.order || 0\n    }\n\n    if (data.id) {\n      await profile.updateModule('skills', { ...skillData, id: data.id })\n    } else {\n      await profile.updateModule('skills', skillData)\n    }\n    \n    ElMessage.success('保存成功')\n    showSkillDialog.value = false\n    await initData()\n  } catch (error) {\n    console.error('保存失败:', error)\n    if (error.response?.data?.errors) {\n      const errorMessages = Object.entries(error.response.data.errors)\n        .map(([field, messages]) => `${field}: ${messages.join(', ')}`)\n        .join('\\n')\n      ElMessage.error(errorMessages)\n    } else {\n      ElMessage.error('保存失败，请重试')\n    }\n  }\n}\n\n// 处理语言能力提交\nconst handleLanguageSubmit = async (data) => {\n  try {\n    await profile.updateModule('language', data)\n    ElMessage.success('保存成功')\n    showLanguageDialog.value = false\n    await initData()\n  } catch (error) {\n    console.error('保存失败:', error)\n    ElMessage.error('保存失败，请重试')\n  }\n}\n\n// 监听数据变化\nwatch(() => profileData.value, (newData) => {\n  if (newData) {\n    updateModules(newData)\n  }\n}, { deep: true })\n\n// 处理模块数据更新\nconst updateModules = (data) => {\n  if (!data) return\n  \n  // 根据布局状态过滤和排序模块\n  const activeModulesList = moduleTypes\n    .filter(type => layoutData.value[type]?.visible)\n    .sort((a, b) => {\n      const orderA = layoutData.value[a]?.order || 999\n      const orderB = layoutData.value[b]?.order || 999\n      return orderA - orderB\n    })\n    .map(type => ({\n      type,\n      data: data[type],\n      name: ALL_MODULES[type].name,\n      editable: true\n    }))\n  \n  const inactiveModulesList = moduleTypes\n    .filter(type => !layoutData.value[type]?.visible)\n    .map(type => ({\n      type,\n      name: ALL_MODULES[type].name\n    }))\n  \n  // 更新模块数据\n  modules.value = [...activeModulesList, ...inactiveModulesList]\n}\n\n// 组件挂载时初始化数据和事件监听\nonMounted(async () => {\n  // 只在用户已登录时加载数据\n  const authStore = useAuthStore()\n  if (authStore.isAuthenticated) {\n    await initData()\n  }\n  \n  // 监听档案更新事件\n  eventBus.on('profile-updated', handleProfileUpdate)\n})\n\n// 组件卸载时清理事件监听\nonUnmounted(() => {\n  eventBus.off('profile-updated', handleProfileUpdate)\n})\n\n// 处理档案更新\nconst handleProfileUpdate = async () => {\n  if (!profileLoading.value) {\n    await fetchProfileData()\n  }\n}\n\n// 监听认证状态变化\nconst authStore = useAuthStore()\nwatch(() => authStore.isAuthenticated, async (isAuthenticated) => {\n  if (isAuthenticated) {\n    await initData()\n  } else {\n    // 清空数据\n    profileData.value = {}\n    completionData.value = {\n      total_score: 0,\n      dimensions: {},\n      suggestions: []\n    }\n    layoutData.value = {}\n  }\n})\n\n// 移除事件监听\nonUnmounted(() => {\n  eventBus.off('profile-updated')\n})\n\n// 监听数据变化\nwatch(() => completionData.value, (newData, oldData) => {\n  // 只在数据真正变化时才触发事件\n  if (newData && (!oldData || \n      newData.total_score !== oldData.total_score || \n      JSON.stringify(newData.dimensions) !== JSON.stringify(oldData.dimensions))) {\n    // 更新父组件的数据\n    eventBus.emit('completeness-updated', newData)\n  }\n}, { deep: true })\n\n// 添加删除处理函数\nconst handleDelete = async (type, id) => {\n  try {\n    console.log('MyProfile - 处理删除:', type, id)\n    // 只刷新相关模块数据\n    if (type && id) {\n      // 更新档案数据\n      await fetchProfileData()\n      // 更新完整度数据\n      await fetchCompletenessData()\n    }\n  } catch (error) {\n    console.error('刷新数据失败:', error)\n    ElMessage.error('刷新数据失败')\n  }\n}\n\n// 处理模块数据保存\nconst handleModuleSave = async (type, data) => {\n  try {\n    showEditDialog.value = false\n    \n    let response\n    if (data.id) {\n      // 编辑\n      response = await profile.updateModule(type, data)\n    } else {\n      // 新增\n      response = await profile.addModuleItem(type, data)\n    }\n\n    // 确保返回数据正确\n    if (response && response.data) {\n      // 刷新模块数据\n      await fetchModulesData()\n      ElMessage.success(data.id ? '更新成功' : '添加成功')\n    } else {\n      throw new Error('保存失败')\n    }\n  } catch (error) {\n    console.error('保存失败:', error)\n    ElMessage.error(error.message || '保存失败')\n  }\n}\n\n// 处理模块编辑\nconst handleModuleEdit = async (type, data) => {\n  try {\n    let response\n    if (type === 'basic_info') {\n      response = await profileStore.updateBasicInfo(data)\n    } else {\n      response = await profile.updateModule(type, data)\n    }\n\n    if (response.data?.code === 200) {\n      // 统一更新档案数据\n      if (type === 'basic_info') {\n        profileData.value = response.data.data\n      } else {\n        profileData.value = {\n          ...profileData.value,\n          [type]: response.data.data\n        }\n      }\n      // 更新完整度数据\n      await fetchCompletenessData()\n      ElMessage.success('保存成功')\n    }\n  } catch (error) {\n    console.error('保存失败:', error)\n    ElMessage.error('保存失败，请重试')\n  }\n}\n\n// 欢迎横幅状态\nconst hideWelcomeBanner = ref(localStorage.getItem('hideWelcomeBanner') === 'true')\n\n// 关闭欢迎横幅\nconst closeWelcomeBanner = () => {\n  hideWelcomeBanner.value = true\n  localStorage.setItem('hideWelcomeBanner', 'true')\n}\n\n// 监听布局数据变化\nwatch(() => layoutData.value, (newLayout) => {\n  if (newLayout) {\n    // 当布局数据变化时，立即更新模块列表\n    updateModules(profileData.value)\n  }\n}, { deep: true })\n</script>"],"mappings":";;SAEEA,mBAAA,oCAAuC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}