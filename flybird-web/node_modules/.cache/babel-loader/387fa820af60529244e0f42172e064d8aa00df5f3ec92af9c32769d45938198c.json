{"ast":null,"code":"import axios from 'axios';\nimport { STORAGE_KEYS } from '@/utils/storage';\n\n// 定义不需要token的公开路径\nconst publicPaths = ['/api/users/login/', '/api/users/register/', '/api/articles/',\n// 文章列表\n'/api/topics/',\n// 话题列表\n'/api/users/profile/',\n// 用户公开信息\n'/api/portfolio/',\n// 作品集公开访问\n'/api/qa/' // 问答列表\n];\nconst request = axios.create({\n  baseURL: 'http://192.168.3.16:8000',\n  timeout: 5000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器\nrequest.interceptors.request.use(config => {\n  // 检查是否是公开路径\n  const isPublicPath = publicPaths.some(path => config.url.includes(path));\n\n  // 如果不是公开路径，才需要添加token\n  if (!isPublicPath) {\n    const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nrequest.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // 处理401未授权的情况\n  if (error.response?.status === 401) {\n    // 如果不是公开路径才清除token并跳转\n    const isPublicPath = publicPaths.some(path => error.config.url.includes(path));\n    if (!isPublicPath) {\n      localStorage.removeItem(STORAGE_KEYS.TOKEN);\n      if (!window.location.pathname.includes('/login')) {\n        window.location.href = '/login';\n      }\n    }\n  }\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","STORAGE_KEYS","publicPaths","request","create","baseURL","timeout","headers","interceptors","use","config","isPublicPath","some","path","url","includes","token","localStorage","getItem","TOKEN","error","Promise","reject","response","status","removeItem","window","location","pathname","href"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport { STORAGE_KEYS } from '@/utils/storage'\n\n// 定义不需要token的公开路径\nconst publicPaths = [\n  '/api/users/login/',\n  '/api/users/register/',\n  '/api/articles/',  // 文章列表\n  '/api/topics/',    // 话题列表\n  '/api/users/profile/', // 用户公开信息\n  '/api/portfolio/',  // 作品集公开访问\n  '/api/qa/',        // 问答列表\n]\n\nconst request = axios.create({\n  baseURL: 'http://192.168.3.16:8000',\n  timeout: 5000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n\n// 请求拦截器\nrequest.interceptors.request.use(\n  config => {\n    // 检查是否是公开路径\n    const isPublicPath = publicPaths.some(path => config.url.includes(path))\n    \n    // 如果不是公开路径，才需要添加token\n    if (!isPublicPath) {\n      const token = localStorage.getItem(STORAGE_KEYS.TOKEN)\n      if (token) {\n        config.headers['Authorization'] = `Bearer ${token}`\n      }\n    }\n    return config\n  },\n  error => {\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\nrequest.interceptors.response.use(\n  response => {\n    return response\n  },\n  error => {\n    // 处理401未授权的情况\n    if (error.response?.status === 401) {\n      // 如果不是公开路径才清除token并跳转\n      const isPublicPath = publicPaths.some(path => error.config.url.includes(path))\n      if (!isPublicPath) {\n        localStorage.removeItem(STORAGE_KEYS.TOKEN)\n        if (!window.location.pathname.includes('/login')) {\n          window.location.href = '/login'\n        }\n      }\n    }\n    return Promise.reject(error)\n  }\n)\n\nexport default request"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,iBAAiB;;AAE9C;AACA,MAAMC,WAAW,GAAG,CAClB,mBAAmB,EACnB,sBAAsB,EACtB,gBAAgB;AAAG;AACnB,cAAc;AAAK;AACnB,qBAAqB;AAAE;AACvB,iBAAiB;AAAG;AACpB,UAAU,CAAS;AAAA,CACpB;AAED,MAAMC,OAAO,GAAGH,KAAK,CAACI,MAAM,CAAC;EAC3BC,OAAO,EAAE,0BAA0B;EACnCC,OAAO,EAAE,IAAI;EACbC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAJ,OAAO,CAACK,YAAY,CAACL,OAAO,CAACM,GAAG,CAC9BC,MAAM,IAAI;EACR;EACA,MAAMC,YAAY,GAAGT,WAAW,CAACU,IAAI,CAACC,IAAI,IAAIH,MAAM,CAACI,GAAG,CAACC,QAAQ,CAACF,IAAI,CAAC,CAAC;;EAExE;EACA,IAAI,CAACF,YAAY,EAAE;IACjB,MAAMK,KAAK,GAAGC,YAAY,CAACC,OAAO,CAACjB,YAAY,CAACkB,KAAK,CAAC;IACtD,IAAIH,KAAK,EAAE;MACTN,MAAM,CAACH,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUS,KAAK,EAAE;IACrD;EACF;EACA,OAAON,MAAM;AACf,CAAC,EACDU,KAAK,IAAI;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAjB,OAAO,CAACK,YAAY,CAACe,QAAQ,CAACd,GAAG,CAC/Bc,QAAQ,IAAI;EACV,OAAOA,QAAQ;AACjB,CAAC,EACDH,KAAK,IAAI;EACP;EACA,IAAIA,KAAK,CAACG,QAAQ,EAAEC,MAAM,KAAK,GAAG,EAAE;IAClC;IACA,MAAMb,YAAY,GAAGT,WAAW,CAACU,IAAI,CAACC,IAAI,IAAIO,KAAK,CAACV,MAAM,CAACI,GAAG,CAACC,QAAQ,CAACF,IAAI,CAAC,CAAC;IAC9E,IAAI,CAACF,YAAY,EAAE;MACjBM,YAAY,CAACQ,UAAU,CAACxB,YAAY,CAACkB,KAAK,CAAC;MAC3C,IAAI,CAACO,MAAM,CAACC,QAAQ,CAACC,QAAQ,CAACb,QAAQ,CAAC,QAAQ,CAAC,EAAE;QAChDW,MAAM,CAACC,QAAQ,CAACE,IAAI,GAAG,QAAQ;MACjC;IACF;EACF;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAejB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}