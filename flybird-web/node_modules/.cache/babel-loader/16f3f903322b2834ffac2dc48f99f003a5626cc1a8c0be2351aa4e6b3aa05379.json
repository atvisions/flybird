{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createVNode as _createVNode, createCommentVNode as _createCommentVNode, createBlock as _createBlock, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"articles-view\"\n};\nconst _hoisted_2 = {\n  class: \"space-y-4\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [$setup.loading ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 0\n  }, _renderList(3, n => {\n    return _createVNode($setup[\"ContentCardSkeleton\"], {\n      key: n\n    });\n  }), 64 /* STABLE_FRAGMENT */)) : (_openBlock(true), _createElementBlock(_Fragment, {\n    key: 1\n  }, _renderList($setup.articles, article => {\n    return _openBlock(), _createBlock($setup[\"ArticleCard\"], {\n      key: article.id,\n      article: article\n    }, null, 8 /* PROPS */, [\"article\"]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","$setup","loading","_Fragment","key","_renderList","n","_createVNode","articles","article","_createBlock","id"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/views/community/ArticlesView.vue"],"sourcesContent":["<template>\n  <div class=\"articles-view\">\n    <div class=\"space-y-4\">\n      <ContentCardSkeleton v-if=\"loading\" v-for=\"n in 3\" :key=\"n\" />\n      \n      <ArticleCard v-else\n        v-for=\"article in articles\"\n        :key=\"article.id\"\n        :article=\"article\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue'\nimport ContentCardSkeleton from '@/components/skeletons/ContentCardSkeleton.vue'\nimport ArticleCard from '@/components/community/ArticleCard.vue'\n\nconst loading = ref(true)\nconst articles = ref([])\n\n// 获取文章列表\nconst fetchArticles = async () => {\n  try {\n    // 获取数据的逻辑\n    await new Promise(resolve => setTimeout(resolve, 1000)) // 模拟加载\n  } finally {\n    loading.value = false\n  }\n}\n\nonMounted(() => {\n  fetchArticles()\n})\n</script> "],"mappings":";;EACOA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAW;;uBADxBC,mBAAA,CAUM,OAVNC,UAUM,GATJC,mBAAA,CAQM,OARNC,UAQM,GAPuBC,MAAA,CAAAC,OAAO,I,cAAlCL,mBAAA,CAA8DM,SAAA;IAHpEC,GAAA;EAAA,GAAAC,WAAA,CAGsD,CAAC,EAANC,CAAC;WAA5CC,YAAA,CAA8DN,MAAA;MAAVG,GAAG,EAAEE;IAAC;sDAE1DT,mBAAA,CAIEM,SAAA;IATRC,GAAA;EAAA,GAAAC,WAAA,CAM0BJ,MAAA,CAAAO,QAAQ,EAAnBC,OAAO;yBADhBC,YAAA,CAIET,MAAA;MAFCG,GAAG,EAAEK,OAAO,CAACE,EAAE;MACfF,OAAO,EAAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}