{"ast":null,"code":"import _objectSpread from \"/Users/liuzhao/Documents/Projects/flybird/flybird-web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/liuzhao/Documents/Projects/flybird/flybird-web/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"a\"];\n// Utilities\nimport { HexToHSV, HSLtoHSV, HSVtoHex, HSVtoHSL, HSVtoRGB, RGBtoHSV } from \"../../../util/colorUtils.mjs\";\nimport { has } from \"../../../util/helpers.mjs\"; // Types\nfunction stripAlpha(color, stripAlpha) {\n  if (stripAlpha) {\n    const {\n        a\n      } = color,\n      rest = _objectWithoutProperties(color, _excluded);\n    return rest;\n  }\n  return color;\n}\nexport function extractColor(color, input) {\n  if (input == null || typeof input === 'string') {\n    const hex = HSVtoHex(color);\n    if (color.a === 1) return hex.slice(0, 7);else return hex;\n  }\n  if (typeof input === 'object') {\n    let converted;\n    if (has(input, ['r', 'g', 'b'])) converted = HSVtoRGB(color);else if (has(input, ['h', 's', 'l'])) converted = HSVtoHSL(color);else if (has(input, ['h', 's', 'v'])) converted = color;\n    return stripAlpha(converted, !has(input, ['a']) && color.a === 1);\n  }\n  return color;\n}\nexport function hasAlpha(color) {\n  if (!color) return false;\n  if (typeof color === 'string') {\n    return color.length > 7;\n  }\n  if (typeof color === 'object') {\n    return has(color, ['a']) || has(color, ['alpha']);\n  }\n  return false;\n}\nexport const nullColor = {\n  h: 0,\n  s: 0,\n  v: 0,\n  a: 1\n};\nconst rgba = {\n  inputProps: {\n    type: 'number',\n    min: 0\n  },\n  inputs: [{\n    label: 'R',\n    max: 255,\n    step: 1,\n    getValue: c => Math.round(c.r),\n    getColor: (c, v) => _objectSpread(_objectSpread({}, c), {}, {\n      r: Number(v)\n    })\n  }, {\n    label: 'G',\n    max: 255,\n    step: 1,\n    getValue: c => Math.round(c.g),\n    getColor: (c, v) => _objectSpread(_objectSpread({}, c), {}, {\n      g: Number(v)\n    })\n  }, {\n    label: 'B',\n    max: 255,\n    step: 1,\n    getValue: c => Math.round(c.b),\n    getColor: (c, v) => _objectSpread(_objectSpread({}, c), {}, {\n      b: Number(v)\n    })\n  }, {\n    label: 'A',\n    max: 1,\n    step: 0.01,\n    getValue: _ref => {\n      let {\n        a\n      } = _ref;\n      return a != null ? Math.round(a * 100) / 100 : 1;\n    },\n    getColor: (c, v) => _objectSpread(_objectSpread({}, c), {}, {\n      a: Number(v)\n    })\n  }],\n  to: HSVtoRGB,\n  from: RGBtoHSV\n};\nconst rgb = _objectSpread(_objectSpread({}, rgba), {}, {\n  inputs: rgba.inputs?.slice(0, 3)\n});\nconst hsla = {\n  inputProps: {\n    type: 'number',\n    min: 0\n  },\n  inputs: [{\n    label: 'H',\n    max: 360,\n    step: 1,\n    getValue: c => Math.round(c.h),\n    getColor: (c, v) => _objectSpread(_objectSpread({}, c), {}, {\n      h: Number(v)\n    })\n  }, {\n    label: 'S',\n    max: 1,\n    step: 0.01,\n    getValue: c => Math.round(c.s * 100) / 100,\n    getColor: (c, v) => _objectSpread(_objectSpread({}, c), {}, {\n      s: Number(v)\n    })\n  }, {\n    label: 'L',\n    max: 1,\n    step: 0.01,\n    getValue: c => Math.round(c.l * 100) / 100,\n    getColor: (c, v) => _objectSpread(_objectSpread({}, c), {}, {\n      l: Number(v)\n    })\n  }, {\n    label: 'A',\n    max: 1,\n    step: 0.01,\n    getValue: _ref2 => {\n      let {\n        a\n      } = _ref2;\n      return a != null ? Math.round(a * 100) / 100 : 1;\n    },\n    getColor: (c, v) => _objectSpread(_objectSpread({}, c), {}, {\n      a: Number(v)\n    })\n  }],\n  to: HSVtoHSL,\n  from: HSLtoHSV\n};\nconst hsl = _objectSpread(_objectSpread({}, hsla), {}, {\n  inputs: hsla.inputs.slice(0, 3)\n});\nconst hexa = {\n  inputProps: {\n    type: 'text'\n  },\n  inputs: [{\n    label: 'HEXA',\n    getValue: c => c,\n    getColor: (c, v) => v\n  }],\n  to: HSVtoHex,\n  from: HexToHSV\n};\nconst hex = _objectSpread(_objectSpread({}, hexa), {}, {\n  inputs: [{\n    label: 'HEX',\n    getValue: c => c.slice(0, 7),\n    getColor: (c, v) => v\n  }]\n});\nexport const modes = {\n  rgb,\n  rgba,\n  hsl,\n  hsla,\n  hex,\n  hexa\n};","map":{"version":3,"names":["HexToHSV","HSLtoHSV","HSVtoHex","HSVtoHSL","HSVtoRGB","RGBtoHSV","has","stripAlpha","color","a","rest","_objectWithoutProperties","_excluded","extractColor","input","hex","slice","converted","hasAlpha","length","nullColor","h","s","v","rgba","inputProps","type","min","inputs","label","max","step","getValue","c","Math","round","r","getColor","_objectSpread","Number","g","b","_ref","to","from","rgb","hsla","l","_ref2","hsl","hexa","modes"],"sources":["../../../../src/components/VColorPicker/util/index.ts"],"sourcesContent":["// Utilities\nimport {\n  HexToHSV,\n  HSLtoHSV,\n  HSVtoHex,\n  HSVtoHSL,\n  HSVtoRGB,\n  RGBtoHSV,\n} from '@/util/colorUtils'\nimport { has } from '@/util/helpers'\n\n// Types\nimport type { HSL, HSV, RGB } from '@/util/colorUtils'\n\nfunction stripAlpha (color: any, stripAlpha: boolean) {\n  if (stripAlpha) {\n    const { a, ...rest } = color\n\n    return rest\n  }\n\n  return color\n}\n\nexport function extractColor (color: HSV, input: any) {\n  if (input == null || typeof input === 'string') {\n    const hex = HSVtoHex(color)\n\n    if (color.a === 1) return hex.slice(0, 7)\n    else return hex\n  }\n\n  if (typeof input === 'object') {\n    let converted\n\n    if (has(input, ['r', 'g', 'b'])) converted = HSVtoRGB(color)\n    else if (has(input, ['h', 's', 'l'])) converted = HSVtoHSL(color)\n    else if (has(input, ['h', 's', 'v'])) converted = color\n\n    return stripAlpha(converted, !has(input, ['a']) && color.a === 1)\n  }\n\n  return color\n}\n\nexport function hasAlpha (color: any) {\n  if (!color) return false\n\n  if (typeof color === 'string') {\n    return color.length > 7\n  }\n\n  if (typeof color === 'object') {\n    return has(color, ['a']) || has(color, ['alpha'])\n  }\n\n  return false\n}\n\nexport const nullColor = { h: 0, s: 0, v: 0, a: 1 }\n\nexport type ColorPickerMode = {\n  inputProps: Record<string, unknown>\n  inputs: {\n    [key: string]: any\n    getValue: (color: any) => number | string\n    getColor: (color: any, v: string) => any\n  }[]\n  from: (color: any) => HSV\n  to: (color: HSV) => any\n}\n\nconst rgba: ColorPickerMode = {\n  inputProps: {\n    type: 'number',\n    min: 0,\n  },\n  inputs: [\n    {\n      label: 'R',\n      max: 255,\n      step: 1,\n      getValue: (c: RGB) => Math.round(c.r),\n      getColor: (c: RGB, v: string): RGB => ({ ...c, r: Number(v) }),\n    },\n    {\n      label: 'G',\n      max: 255,\n      step: 1,\n      getValue: (c: RGB) => Math.round(c.g),\n      getColor: (c: RGB, v: string): RGB => ({ ...c, g: Number(v) }),\n    },\n    {\n      label: 'B',\n      max: 255,\n      step: 1,\n      getValue: (c: RGB) => Math.round(c.b),\n      getColor: (c: RGB, v: string): RGB => ({ ...c, b: Number(v) }),\n    },\n    {\n      label: 'A',\n      max: 1,\n      step: 0.01,\n      getValue: ({ a }: RGB) => a != null ? Math.round(a * 100) / 100 : 1,\n      getColor: (c: RGB, v: string): RGB => ({ ...c, a: Number(v) }),\n    },\n  ],\n  to: HSVtoRGB,\n  from: RGBtoHSV,\n}\n\nconst rgb = {\n  ...rgba,\n  inputs: rgba.inputs?.slice(0, 3),\n}\n\nconst hsla: ColorPickerMode = {\n  inputProps: {\n    type: 'number',\n    min: 0,\n  },\n  inputs: [\n    {\n      label: 'H',\n      max: 360,\n      step: 1,\n      getValue: (c: HSL) => Math.round(c.h),\n      getColor: (c: HSL, v: string): HSL => ({ ...c, h: Number(v) }),\n    },\n    {\n      label: 'S',\n      max: 1,\n      step: 0.01,\n      getValue: (c: HSL) => Math.round(c.s * 100) / 100,\n      getColor: (c: HSL, v: string): HSL => ({ ...c, s: Number(v) }),\n    },\n    {\n      label: 'L',\n      max: 1,\n      step: 0.01,\n      getValue: (c: HSL) => Math.round(c.l * 100) / 100,\n      getColor: (c: HSL, v: string): HSL => ({ ...c, l: Number(v) }),\n    },\n    {\n      label: 'A',\n      max: 1,\n      step: 0.01,\n      getValue: ({ a }: HSL) => a != null ? Math.round(a * 100) / 100 : 1,\n      getColor: (c: HSL, v: string): HSL => ({ ...c, a: Number(v) }),\n    },\n  ],\n  to: HSVtoHSL,\n  from: HSLtoHSV,\n}\n\nconst hsl = {\n  ...hsla,\n  inputs: hsla.inputs.slice(0, 3),\n}\n\nconst hexa: ColorPickerMode = {\n  inputProps: {\n    type: 'text',\n  },\n  inputs: [\n    {\n      label: 'HEXA',\n      getValue: (c: string) => c,\n      getColor: (c: string, v: string) => v,\n    },\n  ],\n  to: HSVtoHex,\n  from: HexToHSV,\n}\n\nconst hex = {\n  ...hexa,\n  inputs: [\n    {\n      label: 'HEX',\n      getValue: (c: string) => c.slice(0, 7),\n      getColor: (c: string, v: string) => v,\n    },\n  ],\n}\n\nexport const modes = {\n  rgb,\n  rgba,\n  hsl,\n  hsla,\n  hex,\n  hexa,\n} satisfies Record<string, ColorPickerMode>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}