{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, withModifiers as _withModifiers, withKeys as _withKeys, normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"canvas-container\"\n};\nconst _hoisted_2 = {\n  class: \"canvas-wrapper\"\n};\nconst _hoisted_3 = [\"onKeydown\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", {\n    class: \"canvas-content\",\n    style: _normalizeStyle({\n      transform: `scale(${$props.scale})`\n    }),\n    onDragover: _cache[0] || (_cache[0] = _withModifiers(() => {}, [\"prevent\"])),\n    onDrop: _withModifiers($setup.handleElementDrop, [\"prevent\"]),\n    onDragenter: _withModifiers($setup.handleDragEnter, [\"prevent\"]),\n    onDragleave: _withModifiers($setup.handleDragLeave, [\"prevent\"]),\n    onClick: _withModifiers($setup.handleCanvasClick, [\"self\"]),\n    tabindex: \"0\",\n    onKeydown: [_withKeys(_withModifiers($setup.handleDeleteElement, [\"prevent\"]), [\"delete\"]), _withKeys(_withModifiers($setup.handleDeleteElement, [\"prevent\"]), [\"backspace\"])]\n  }, [_createCommentVNode(\" 设计元素列表 \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.elements, element => {\n    return _openBlock(), _createBlock($setup[\"DesignElement\"], {\n      key: element.id,\n      element: element,\n      \"is-selected\": $setup.selectedElement?.id === element.id,\n      scale: $props.scale,\n      \"data-fields\": $setup.dataFields,\n      onSelect: $setup.handleElementSelect,\n      onUpdate: $setup.handleElementUpdate\n    }, null, 8 /* PROPS */, [\"element\", \"is-selected\", \"scale\", \"data-fields\"]);\n  }), 128 /* KEYED_FRAGMENT */))], 44 /* STYLE, PROPS, NEED_HYDRATION */, _hoisted_3)])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","style","_normalizeStyle","transform","$props","scale","onDragover","_cache","_withModifiers","onDrop","$setup","handleElementDrop","onDragenter","handleDragEnter","onDragleave","handleDragLeave","onClick","handleCanvasClick","tabindex","onKeydown","_withKeys","handleDeleteElement","_createCommentVNode","_Fragment","_renderList","elements","element","_createBlock","key","id","selectedElement","dataFields","onSelect","handleElementSelect","onUpdate","handleElementUpdate","_hoisted_3"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/views/resume-editor/components/Canvas.vue"],"sourcesContent":["<template>\n  <div class=\"canvas-container\">\n    <div class=\"canvas-wrapper\">\n      <div \n        class=\"canvas-content\" \n        :style=\"{ transform: `scale(${scale})` }\"\n        @dragover.prevent\n        @drop.prevent=\"handleElementDrop\"\n        @dragenter.prevent=\"handleDragEnter\"\n        @dragleave.prevent=\"handleDragLeave\"\n        @click.self=\"handleCanvasClick\"\n        tabindex=\"0\"\n        @keydown.delete.prevent=\"handleDeleteElement\"\n        @keydown.backspace.prevent=\"handleDeleteElement\"\n      >\n        <!-- 设计元素列表 -->\n        <template v-for=\"element in elements\" :key=\"element.id\">\n          <DesignElement\n            :element=\"element\"\n            :is-selected=\"selectedElement?.id === element.id\"\n            :scale=\"scale\"\n            :data-fields=\"dataFields\"\n            @select=\"handleElementSelect\"\n            @update=\"handleElementUpdate\"\n          />\n        </template>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted, onUnmounted } from 'vue'\nimport DesignElement from './DesignElement.vue'\nimport profile from '@/api/profile'\nimport { useAuthStore } from '@/stores/auth'\nimport { useAccountStore } from '@/stores/account'\n\nconst props = defineProps({\n  scale: {\n    type: Number,\n    default: 1\n  }\n})\n\nconst emit = defineEmits(['element-select', 'data-fields-update'])\n\n// 状态\nconst isDragOver = ref(false)\nconst elements = ref([])\nconst selectedElement = ref(null)\nconst dataFields = ref([])\nconst elementRefs = ref([])\n\n// Store\nconst authStore = useAuthStore()\nconst accountStore = useAccountStore()\n\n// 用户登录状态\nconst isAuthenticated = computed(() => {\n  return authStore.isLoggedIn && accountStore.userInfo !== null\n})\n\n// 获取数据字段定义\nconst fetchDataFields = async () => {\n  try {\n    // 检查登录状态\n    if (!isAuthenticated.value) {\n      console.error('用户未登录')\n      // 使用默认字段\n      dataFields.value = [\n        { label: '姓名', field: 'basic_info.name', group: '基本信息', type: 'text' },\n        { label: '电话', field: 'basic_info.phone', group: '基本信息', type: 'text' },\n        { label: '邮箱', field: 'basic_info.email', group: '基本信息', type: 'text' }\n      ]\n      emit('data-fields-update', dataFields.value)\n      return\n    }\n\n    // 获取用户信息\n    const response = await profile.getData()\n    console.log('API完整响应:', response)\n    \n    // 确保使用正确的数据路径\n    const profileData = response.data?.data\n    console.log('用户资料数据:', profileData)\n    \n    if (!profileData) {\n      throw new Error('获取用户资料失败')\n    }\n\n    // 将API返回的数据转换为字段定义\n    const fields = [\n      // 基本信息\n      { label: '头像', field: 'basic_info.avatar', group: '基本信息', type: 'image' },\n      { label: '姓名', field: 'basic_info.name', group: '基本信息', type: 'text' },\n      { label: '性别', field: 'basic_info.gender', group: '基本信息', type: 'text' },\n      { label: '出生日期', field: 'basic_info.birth_date', group: '基本信息', type: 'text' },\n      { label: '电话', field: 'basic_info.phone', group: '基本信息', type: 'text' },\n      { label: '邮箱', field: 'basic_info.email', group: '基本信息', type: 'text' },\n      { label: '所在地', field: 'basic_info.location', group: '基本信息', type: 'text' },\n      { label: '个人总结', field: 'basic_info.personal_summary', group: '基本信息', type: 'text' },\n\n      // 求职意向\n      { label: '工作类型', field: 'job_intention.job_type', group: '求职意向', type: 'text' },\n      { label: '求职状态', field: 'job_intention.job_status', group: '求职意向', type: 'text' },\n      { label: '期望薪资', field: 'job_intention.expected_salary', group: '求职意向', type: 'text' },\n      { label: '期望城市', field: 'job_intention.expected_city', group: '求职意向', type: 'text' },\n      { label: '期望行业', field: 'job_intention.industries', group: '求职意向', type: 'text' },\n\n      // 工作经历\n      ...(profileData.work_experience || []).map((_, index) => [\n        { label: `公司名称${index + 1}`, field: `work_experience[${index}].company`, group: '工作经历', type: 'text' },\n        { label: `职位名称${index + 1}`, field: `work_experience[${index}].position`, group: '工作经历', type: 'text' },\n        { label: `部门${index + 1}`, field: `work_experience[${index}].department`, group: '工作经历', type: 'text' },\n        { label: `工作描述${index + 1}`, field: `work_experience[${index}].description`, group: '工作经历', type: 'text' }\n      ]).flat(),\n\n      // 教育经历\n      ...(profileData.education || []).map((_, index) => [\n        { label: `学校${index + 1}`, field: `education[${index}].school`, group: '教育经历', type: 'text' },\n        { label: `专业${index + 1}`, field: `education[${index}].major`, group: '教育经历', type: 'text' },\n        { label: `学历${index + 1}`, field: `education[${index}].degree`, group: '教育经历', type: 'text' }\n      ]).flat(),\n\n      // 项目经历\n      ...(profileData.project || []).map((_, index) => [\n        { label: `项目名称${index + 1}`, field: `project[${index}].name`, group: '项目经历', type: 'text' },\n        { label: `项目角色${index + 1}`, field: `project[${index}].role`, group: '项目经历', type: 'text' },\n        { label: `项目描述${index + 1}`, field: `project[${index}].description`, group: '项目经历', type: 'text' }\n      ]).flat(),\n\n      // 技能特长\n      ...(profileData.skill || []).map((_, index) => [\n        { label: `技能名称${index + 1}`, field: `skill[${index}].name`, group: '技能特长', type: 'text' },\n        { label: `掌握程度${index + 1}`, field: `skill[${index}].level`, group: '技能特长', type: 'text' },\n        { label: `技能描述${index + 1}`, field: `skill[${index}].description`, group: '技能特长', type: 'text' }\n      ]).flat(),\n\n      // 语言能力\n      ...(profileData.language || []).map((_, index) => [\n        { label: `语言名称${index + 1}`, field: `language[${index}].name`, group: '语言能力', type: 'text' },\n        { label: `掌握程度${index + 1}`, field: `language[${index}].proficiency_display`, group: '语言能力', type: 'text' },\n        { label: `证书名称${index + 1}`, field: `language[${index}].certification`, group: '语言能力', type: 'text' },\n        { label: `证书分数${index + 1}`, field: `language[${index}].score`, group: '语言能力', type: 'text' }\n      ]).flat()\n    ]\n\n    dataFields.value = fields\n    console.log('设置的字段:', dataFields.value)\n    emit('data-fields-update', dataFields.value)\n  } catch (error) {\n    console.error('获取数据字段失败:', error)\n    // 使用默认字段\n    dataFields.value = [\n      { label: '姓名', field: 'basic_info.name', group: '基本信息', type: 'text' },\n      { label: '电话', field: 'basic_info.phone', group: '基本信息', type: 'text' },\n      { label: '邮箱', field: 'basic_info.email', group: '基本信息', type: 'text' }\n    ]\n    emit('data-fields-update', dataFields.value)\n  }\n}\n\n// 处理画布点击\nconst handleCanvasClick = (e) => {\n  if (e.target === e.currentTarget) {\n    selectedElement.value = null\n    emit('element-select', null)\n  }\n}\n\n// 处理元素选择\nconst handleElementSelect = (element) => {\n  selectedElement.value = element\n  emit('element-select', element)\n}\n\n// 处理元素更新\nconst handleElementUpdate = (updatedElement) => {\n  const index = elements.value.findIndex(el => el.id === updatedElement.id)\n  if (index > -1) {\n    elements.value[index] = { ...updatedElement }\n    if (selectedElement.value?.id === updatedElement.id) {\n      selectedElement.value = { ...updatedElement }\n    }\n  }\n}\n\n// 处理删除元素\nconst handleDeleteElement = () => {\n  if (selectedElement.value) {\n    const index = elements.value.findIndex(el => el.id === selectedElement.value.id)\n    if (index > -1) {\n      elements.value.splice(index, 1)\n      selectedElement.value = null\n      emit('element-select', null)\n    }\n  }\n}\n\n// 处理键盘事件\nconst handleKeyDown = (e) => {\n  if ((e.key === 'Delete' || e.key === 'Backspace') && selectedElement.value) {\n    e.preventDefault()\n    handleDeleteElement()\n  }\n}\n\n// 添加和移除全局键盘事件监听\nonMounted(() => {\n  document.addEventListener('keydown', handleKeyDown)\n  fetchDataFields()\n})\n\nonUnmounted(() => {\n  document.removeEventListener('keydown', handleKeyDown)\n})\n\n// 处理元素拖拽\nconst handleElementDrop = (event) => {\n  const elementType = event.dataTransfer.getData('element-type')\n  if (!elementType) return\n\n  try {\n    const elementConfig = JSON.parse(event.dataTransfer.getData('element-config'))\n    const rect = event.currentTarget.getBoundingClientRect()\n    const x = (event.clientX - rect.left) / props.scale\n    const y = (event.clientY - rect.top) / props.scale\n    \n    const newElement = {\n      id: Date.now().toString(),\n      type: elementType,\n      x,\n      y,\n      width: elementConfig.width || 100,\n      height: elementConfig.height || 100,\n      rotation: 0,\n      content: elementConfig.content,\n      placeholder: elementConfig.placeholder,\n      styles: elementConfig.styles || {}\n    }\n    \n    elements.value.push(newElement)\n    // 自动选中新添加的元素\n    selectedElement.value = newElement\n    emit('element-select', newElement)\n    isDragOver.value = false\n  } catch (error) {\n    console.error('处理元素拖放时出错:', error)\n  }\n}\n\n// 处理拖拽进入\nconst handleDragEnter = (event) => {\n  event.preventDefault()\n  isDragOver.value = true\n}\n\n// 处理拖拽离开\nconst handleDragLeave = (event) => {\n  event.preventDefault()\n  isDragOver.value = false\n}\n\n// 导出布局数据\nconst exportLayoutData = () => {\n  return {\n    elements: elements.value.map(element => ({\n      ...element,\n      dataBinding: element.dataBinding\n    }))\n  }\n}\n\n// 加载模板\nconst loadTemplate = async (template) => {\n  try {\n    // 检查登录状态\n    if (!isAuthenticated.value) {\n      console.error('用户未登录，无法加载数据')\n      return\n    }\n\n    // 获取用户数据\n    const response = await profile.getData()\n    console.log('模板加载 - API响应:', response)\n    \n    if (!response?.data?.data) {\n      console.error('API响应数据为空')\n      return\n    }\n\n    // 使用正确的数据路径\n    const profileData = response.data.data\n    console.log('模板加载 - 用户资料数据:', profileData)\n\n    // 加载设计元素\n    elements.value = (template.elements || []).map(element => {\n      const newElement = { ...element }\n      \n      // 如果元素有数据绑定,注入实际数据\n      if (element.dataBinding?.field) {\n        console.log('处理数据绑定:', element.dataBinding)\n        const { field } = element.dataBinding\n        let value = null\n        \n        try {\n          // 处理嵌套字段\n          const fieldParts = field.split('.')\n          console.log('字段路径:', fieldParts)\n          \n          // 处理特殊字段，比如basic_info中的字段\n          if (!fieldParts[0].includes('basic_info') && !field.includes('[')) {\n            fieldParts.unshift('basic_info')\n          }\n          \n          value = fieldParts.reduce((obj, key) => {\n            console.log('当前字段:', key, '当前对象:', obj)\n            if (!obj) return null\n            \n            // 处理数组索引\n            const match = key.match(/(\\w+)\\[(\\d+)\\]/)\n            if (match) {\n              const [_, arrayName, index] = match\n              const array = obj[arrayName]\n              console.log('数组字段:', arrayName, '索引:', index, '数组:', array)\n              return array?.[parseInt(index)]\n            }\n            return obj[key]\n          }, profileData)\n          \n          console.log('获取到的字段值:', field, value)\n        } catch (error) {\n          console.error('获取字段值失败:', field, error)\n          value = null\n        }\n\n        // 根据元素类型设置实际内容\n        switch (element.type) {\n          case 'image':\n            if (field.includes('avatar') && value) {\n              newElement.content = `http://192.168.3.16:8000${value}`\n              console.log('设置头像图片:', newElement.content)\n            } else {\n              newElement.content = value || '/images.jpeg'\n              console.log('设置默认图片:', newElement.content)\n            }\n            break\n          case 'text':\n            // 处理特殊字段的显示\n            if (value !== null && value !== undefined) {\n              if (typeof value === 'object') {\n                // 如果是对象，尝试获取display值或name值\n                value = value.display || value.name || JSON.stringify(value)\n              }\n              newElement.content = String(value)\n            } else {\n              newElement.content = element.content || `{{${field}}}`\n            }\n            console.log('设置文本内容:', newElement.content)\n            break\n        }\n      }\n      \n      return newElement\n    })\n    \n    console.log('更新后的元素列表:', elements.value)\n  } catch (error) {\n    console.error('加载模板数据失败:', error)\n  }\n}\n\n// 更新元素数据绑定\nconst updateElementDataBinding = (elementId, binding) => {\n  const element = elements.value.find(el => el.id === elementId)\n  if (element) {\n    element.dataBinding = binding\n    // 更新选中元素的状态\n    if (selectedElement.value?.id === elementId) {\n      selectedElement.value = { ...element }\n    }\n  }\n}\n\n// 获取画布数据\nconst getCanvasData = () => {\n  return {\n    elements: elements.value.map(element => ({\n      ...element,\n      config: {\n        fields: element.dataBinding || {},\n        styles: {\n          width: element.width,\n          height: element.height,\n          left: element.x,\n          top: element.y,\n          borderRadius: element.borderRadius,\n          backgroundColor: element.backgroundColor,\n          padding: element.padding || '0px',\n          margin: element.margin || '0px',\n          zIndex: element.zIndex || 1\n        }\n      }\n    }))\n  }\n}\n\n// 暴露方法给父组件\ndefineExpose({\n  loadTemplate,\n  getCanvasData,\n  handleElementUpdate\n})\n</script>\n\n<style scoped>\n.canvas-container {\n  flex: 1;\n  overflow: hidden;\n  background: #f5f5f5;\n  position: relative;\n}\n\n.canvas-wrapper {\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  padding: 20px;\n}\n\n.canvas-content {\n  width: 794px; /* A4 纸宽度 */\n  min-height: 1123px; /* A4 纸高度 */\n  background: #ffffff;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\n  position: relative;\n  transform-origin: top center;\n  outline: none; /* 移除焦点时的轮廓 */\n}\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAkB;;EACtBA,KAAK,EAAC;AAAgB;mBAF/B;;uBACEC,mBAAA,CA2BM,OA3BNC,UA2BM,GA1BJC,mBAAA,CAyBM,OAzBNC,UAyBM,GAxBJD,mBAAA,CAuBM;IAtBJH,KAAK,EAAC,gBAAgB;IACrBK,KAAK,EALdC,eAAA;MAAAC,SAAA,WAKsCC,MAAA,CAAAC,KAAK;IAAA;IAClCC,UAAQ,EAAAC,MAAA,QAAAA,MAAA,MANjBC,cAAA,CAMQ,QAAiB;IAChBC,MAAI,EAPbD,cAAA,CAOuBE,MAAA,CAAAC,iBAAiB;IAC/BC,WAAS,EARlBJ,cAAA,CAQ4BE,MAAA,CAAAG,eAAe;IAClCC,WAAS,EATlBN,cAAA,CAS4BE,MAAA,CAAAK,eAAe;IAClCC,OAAK,EAVdR,cAAA,CAUqBE,MAAA,CAAAO,iBAAiB;IAC9BC,QAAQ,EAAC,GAAG;IACXC,SAAO,GAZhBC,SAAA,CAAAZ,cAAA,CAYiCE,MAAA,CAAAW,mBAAmB,6BAZpDD,SAAA,CAAAZ,cAAA,CAaoCE,MAAA,CAAAW,mBAAmB;MAE/CC,mBAAA,YAAe,G,kBACfzB,mBAAA,CASW0B,SAAA,QAzBnBC,WAAA,CAgBoCd,MAAA,CAAAe,QAAQ,EAAnBC,OAAO;yBACtBC,YAAA,CAOEjB,MAAA;MAxBZkB,GAAA,EAgBoDF,OAAO,CAACG,EAAE;MAEjDH,OAAO,EAAEA,OAAO;MAChB,aAAW,EAAEhB,MAAA,CAAAoB,eAAe,EAAED,EAAE,KAAKH,OAAO,CAACG,EAAE;MAC/CxB,KAAK,EAAED,MAAA,CAAAC,KAAK;MACZ,aAAW,EAAEK,MAAA,CAAAqB,UAAU;MACvBC,QAAM,EAAEtB,MAAA,CAAAuB,mBAAmB;MAC3BC,QAAM,EAAExB,MAAA,CAAAyB;;0EAvBrBC,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}