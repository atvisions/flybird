{"ast":null,"code":"import axios from 'axios';\nimport { ElMessage } from 'element-plus';\nimport { useAuthStore } from '@/stores/auth';\nimport router from '@/router';\n\n// 创建 axios 实例\nconst service = axios.create({\n  baseURL: process.env.VUE_APP_API_BASE_URL || 'http://192.168.3.16:8080',\n  timeout: 15000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 不需要token的白名单路径\nconst whiteList = ['/login',\n// 登录页面\n'/register',\n// 注册页面\n'/api/users/login/',\n// 登录接口\n'/api/users/register/',\n// 注册接口\n'/api/users/captcha/',\n// 验证码接口\n'/api/users/reset-password/' // 重置密码\n];\n\n// 请求拦截器\nservice.interceptors.request.use(config => {\n  const authStore = useAuthStore();\n  const token = authStore.token;\n\n  // 检查请求路径是否在白名单中\n  const isWhitelisted = whiteList.some(path => config.url.includes(path));\n\n  // 如果不在白名单且没有token\n  if (!isWhitelisted && !token) {\n    // 如果当前不在登录页，才重定向\n    if (router.currentRoute.value.path !== '/login') {\n      router.push({\n        path: '/login',\n        query: {\n          redirect: router.currentRoute.value.fullPath\n        }\n      });\n    }\n    return Promise.reject(new Error('请先登录'));\n  }\n\n  // 有token则添加到请求头\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(response => {\n  const res = response.data;\n\n  // 如果是登录接口，直接返回\n  if (response.config.url.includes('/api/users/login/')) {\n    return response;\n  }\n  if (res.code === 401) {\n    const authStore = useAuthStore();\n    authStore.logout();\n    if (router.currentRoute.value.path !== '/login') {\n      ElMessage({\n        message: '登录已过期，请重新登录',\n        type: 'warning',\n        duration: 3000\n      });\n      router.push({\n        path: '/login',\n        query: {\n          redirect: router.currentRoute.value.fullPath\n        }\n      });\n    }\n    return Promise.reject(new Error('未登录或登录已过期'));\n  }\n  if (res.code !== 200) {\n    ElMessage({\n      message: res.message || '请求失败',\n      type: 'error',\n      duration: 3000\n    });\n    return Promise.reject(new Error(res.message || '请求失败'));\n  }\n  return response;\n}, error => {\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        const authStore = useAuthStore();\n        authStore.logout();\n        if (router.currentRoute.value.path !== '/login') {\n          ElMessage({\n            message: '未登录或登录已过期',\n            type: 'warning',\n            duration: 3000\n          });\n          router.push({\n            path: '/login',\n            query: {\n              redirect: router.currentRoute.value.fullPath\n            }\n          });\n        }\n        break;\n      case 403:\n        ElMessage({\n          message: '没有权限访问',\n          type: 'error',\n          duration: 3000\n        });\n        break;\n      default:\n        ElMessage({\n          message: error.message || '请求失败',\n          type: 'error',\n          duration: 3000\n        });\n    }\n  } else if (error.request) {\n    ElMessage({\n      message: '网络连接失败',\n      type: 'error',\n      duration: 3000\n    });\n  }\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","ElMessage","useAuthStore","router","service","create","baseURL","process","env","VUE_APP_API_BASE_URL","timeout","headers","whiteList","interceptors","request","use","config","authStore","token","isWhitelisted","some","path","url","includes","currentRoute","value","push","query","redirect","fullPath","Promise","reject","Error","error","response","res","data","code","logout","message","type","duration","status"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport { ElMessage } from 'element-plus'\nimport { useAuthStore } from '@/stores/auth'\nimport router from '@/router'\n\n// 创建 axios 实例\nconst service = axios.create({\n  baseURL: process.env.VUE_APP_API_BASE_URL || 'http://192.168.3.16:8080',\n  timeout: 15000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n\n// 不需要token的白名单路径\nconst whiteList = [\n  '/login',  // 登录页面\n  '/register',  // 注册页面\n  '/api/users/login/',  // 登录接口\n  '/api/users/register/',  // 注册接口\n  '/api/users/captcha/',  // 验证码接口\n  '/api/users/reset-password/',  // 重置密码\n]\n\n// 请求拦截器\nservice.interceptors.request.use(\n  config => {\n    const authStore = useAuthStore()\n    const token = authStore.token\n\n    // 检查请求路径是否在白名单中\n    const isWhitelisted = whiteList.some(path => config.url.includes(path))\n    \n    // 如果不在白名单且没有token\n    if (!isWhitelisted && !token) {\n      // 如果当前不在登录页，才重定向\n      if (router.currentRoute.value.path !== '/login') {\n        router.push({\n          path: '/login',\n          query: { redirect: router.currentRoute.value.fullPath }\n        })\n      }\n      return Promise.reject(new Error('请先登录'))\n    }\n    \n    // 有token则添加到请求头\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`\n    }\n    \n    return config\n  },\n  error => {\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\nservice.interceptors.response.use(\n  response => {\n    const res = response.data\n\n    // 如果是登录接口，直接返回\n    if (response.config.url.includes('/api/users/login/')) {\n      return response\n    }\n\n    if (res.code === 401) {\n      const authStore = useAuthStore()\n      authStore.logout()\n      \n      if (router.currentRoute.value.path !== '/login') {\n        ElMessage({\n          message: '登录已过期，请重新登录',\n          type: 'warning',\n          duration: 3000\n        })\n        \n        router.push({\n          path: '/login',\n          query: { redirect: router.currentRoute.value.fullPath }\n        })\n      }\n      \n      return Promise.reject(new Error('未登录或登录已过期'))\n    }\n    \n    if (res.code !== 200) {\n      ElMessage({\n        message: res.message || '请求失败',\n        type: 'error',\n        duration: 3000\n      })\n      return Promise.reject(new Error(res.message || '请求失败'))\n    }\n    \n    return response\n  },\n  error => {\n    if (error.response) {\n      switch (error.response.status) {\n        case 401:\n          const authStore = useAuthStore()\n          authStore.logout()\n          \n          if (router.currentRoute.value.path !== '/login') {\n            ElMessage({\n              message: '未登录或登录已过期',\n              type: 'warning',\n              duration: 3000\n            })\n            \n            router.push({\n              path: '/login',\n              query: { redirect: router.currentRoute.value.fullPath }\n            })\n          }\n          break\n        case 403:\n          ElMessage({\n            message: '没有权限访问',\n            type: 'error',\n            duration: 3000\n          })\n          break\n        default:\n          ElMessage({\n            message: error.message || '请求失败',\n            type: 'error',\n            duration: 3000\n          })\n      }\n    } else if (error.request) {\n      ElMessage({\n        message: '网络连接失败',\n        type: 'error',\n        duration: 3000\n      })\n    }\n    \n    return Promise.reject(error)\n  }\n)\n\nexport default service"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}