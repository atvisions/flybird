{"ast":null,"code":"import { ref } from 'vue';\nexport function useDragDrop() {\n  // 当前布局\n  const currentLayout = ref(null);\n\n  // 拖拽开始\n  const handleDragStart = (event, component) => {\n    console.log('开始拖拽:', component);\n    event.dataTransfer.effectAllowed = 'move';\n    event.dataTransfer.setData('application/json', JSON.stringify(component));\n  };\n\n  // 拖拽进入时的处理\n  const handleDragEnter = event => {\n    event.preventDefault();\n  };\n\n  // 拖拽离开时的处理\n  const handleDragLeave = event => {\n    event.preventDefault();\n  };\n\n  // 拖拽悬停时的处理\n  const handleDragOver = event => {\n    event.preventDefault();\n  };\n\n  // 放置处理\n  const handleDrop = event => {\n    event.preventDefault();\n    const componentData = event.dataTransfer.getData('application/json');\n    console.log('放置数据:', componentData);\n    if (componentData) {\n      try {\n        const component = JSON.parse(componentData);\n        console.log('解析后的组件:', component);\n        currentLayout.value = component;\n      } catch (error) {\n        console.error('解析布局数据失败:', error);\n      }\n    }\n  };\n  return {\n    currentLayout,\n    handleDragStart,\n    handleDragEnter,\n    handleDragLeave,\n    handleDragOver,\n    handleDrop\n  };\n}","map":{"version":3,"names":["ref","useDragDrop","currentLayout","handleDragStart","event","component","console","log","dataTransfer","effectAllowed","setData","JSON","stringify","handleDragEnter","preventDefault","handleDragLeave","handleDragOver","handleDrop","componentData","getData","parse","value","error"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/views/resume-editor/composables/useDragDrop.js"],"sourcesContent":["import { ref } from 'vue'\n\nexport function useDragDrop() {\n  // 当前布局\n  const currentLayout = ref(null)\n\n  // 拖拽开始\n  const handleDragStart = (event, component) => {\n    console.log('开始拖拽:', component)\n    event.dataTransfer.effectAllowed = 'move'\n    event.dataTransfer.setData('application/json', JSON.stringify(component))\n  }\n\n  // 拖拽进入时的处理\n  const handleDragEnter = (event) => {\n    event.preventDefault()\n  }\n\n  // 拖拽离开时的处理\n  const handleDragLeave = (event) => {\n    event.preventDefault()\n  }\n\n  // 拖拽悬停时的处理\n  const handleDragOver = (event) => {\n    event.preventDefault()\n  }\n\n  // 放置处理\n  const handleDrop = (event) => {\n    event.preventDefault()\n    \n    const componentData = event.dataTransfer.getData('application/json')\n    console.log('放置数据:', componentData)\n    \n    if (componentData) {\n      try {\n        const component = JSON.parse(componentData)\n        console.log('解析后的组件:', component)\n        currentLayout.value = component\n      } catch (error) {\n        console.error('解析布局数据失败:', error)\n      }\n    }\n  }\n\n  return {\n    currentLayout,\n    handleDragStart,\n    handleDragEnter,\n    handleDragLeave,\n    handleDragOver,\n    handleDrop\n  }\n} "],"mappings":"AAAA,SAASA,GAAG,QAAQ,KAAK;AAEzB,OAAO,SAASC,WAAWA,CAAA,EAAG;EAC5B;EACA,MAAMC,aAAa,GAAGF,GAAG,CAAC,IAAI,CAAC;;EAE/B;EACA,MAAMG,eAAe,GAAGA,CAACC,KAAK,EAAEC,SAAS,KAAK;IAC5CC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,SAAS,CAAC;IAC/BD,KAAK,CAACI,YAAY,CAACC,aAAa,GAAG,MAAM;IACzCL,KAAK,CAACI,YAAY,CAACE,OAAO,CAAC,kBAAkB,EAAEC,IAAI,CAACC,SAAS,CAACP,SAAS,CAAC,CAAC;EAC3E,CAAC;;EAED;EACA,MAAMQ,eAAe,GAAIT,KAAK,IAAK;IACjCA,KAAK,CAACU,cAAc,CAAC,CAAC;EACxB,CAAC;;EAED;EACA,MAAMC,eAAe,GAAIX,KAAK,IAAK;IACjCA,KAAK,CAACU,cAAc,CAAC,CAAC;EACxB,CAAC;;EAED;EACA,MAAME,cAAc,GAAIZ,KAAK,IAAK;IAChCA,KAAK,CAACU,cAAc,CAAC,CAAC;EACxB,CAAC;;EAED;EACA,MAAMG,UAAU,GAAIb,KAAK,IAAK;IAC5BA,KAAK,CAACU,cAAc,CAAC,CAAC;IAEtB,MAAMI,aAAa,GAAGd,KAAK,CAACI,YAAY,CAACW,OAAO,CAAC,kBAAkB,CAAC;IACpEb,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEW,aAAa,CAAC;IAEnC,IAAIA,aAAa,EAAE;MACjB,IAAI;QACF,MAAMb,SAAS,GAAGM,IAAI,CAACS,KAAK,CAACF,aAAa,CAAC;QAC3CZ,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,SAAS,CAAC;QACjCH,aAAa,CAACmB,KAAK,GAAGhB,SAAS;MACjC,CAAC,CAAC,OAAOiB,KAAK,EAAE;QACdhB,OAAO,CAACgB,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;MACnC;IACF;EACF,CAAC;EAED,OAAO;IACLpB,aAAa;IACbC,eAAe;IACfU,eAAe;IACfE,eAAe;IACfC,cAAc;IACdC;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}