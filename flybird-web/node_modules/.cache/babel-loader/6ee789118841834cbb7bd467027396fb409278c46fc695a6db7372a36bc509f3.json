{"ast":null,"code":"import { createCommentVNode as _createCommentVNode } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _createCommentVNode(\" No changes to template section \");\n}","map":{"version":3,"names":["_createCommentVNode"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/views/user/AccountSettings.vue"],"sourcesContent":["<template>\n  <!-- No changes to template section -->\n</template>\n\n<script setup>\nimport { ref, computed, onMounted, onUnmounted } from 'vue'\nimport { useRouter } from 'vue-router'\nimport { showToast } from '@/components/ToastMessage'\nimport { useDeleteAccount } from '@/composables/useDeleteAccount'\nimport { usePhone } from '@/composables/usePhone'\nimport { useEmail } from '@/composables/useEmail'\nimport { useChangePassword } from '@/composables/useChangePassword'\nimport { ElMessageBox } from 'element-plus'\nimport { account } from '@/api/account'\nimport { useAuthStore } from '@/stores/auth'\nimport { useUserStore } from '@/stores/user'\n\nconst router = useRouter()\nconst authStore = useAuthStore()\nconst userStore = useUserStore()\n\n// No changes to passwordFormState\n\n// 手机号掩码处理函数\nconst maskPhone = (phone) => {\n  if (!phone) return '未绑定'\n  return phone.replace(/(\\d{3})\\d{4}(\\d{4})/, '$1****$2')\n}\n\n// 从 userStore 获取用户信息\nconst phone = computed(() => userStore.userInfo?.phone)\nconst email = computed(() => userStore.userInfo?.email)\n\n// 弹窗状态管理\nconst showEmailModal = ref(false)\nconst showPhoneModal = ref(false)\nconst showPasswordModal = ref(false)\nconst showDeleteConfirm = ref(false)\nconst showPassword = ref(false)\n\n// 打开/关闭弹窗方法\nconst openEmailModal = () => {\n  emailManager.state.value = ''\n  emailManager.state.code = ''\n  emailManager.state.password = ''\n  showPassword.value = false\n  showEmailModal.value = true\n}\n\nconst closeEmailModal = () => {\n  showEmailModal.value = false\n  emailManager.state.value = ''\n  emailManager.state.code = ''\n  emailManager.state.password = ''\n  emailManager.state.loading = false\n  showPassword.value = false\n}\n\nconst openPhoneModal = () => {\n  phoneManager.state.value = ''\n  phoneManager.state.code = ''\n  phoneManager.state.loading = false\n  phoneManager.state.countdown = 0\n  showPhoneModal.value = true\n}\n\nconst closePhoneModal = () => {\n  showPhoneModal.value = false\n  phoneManager.state.value = ''\n  phoneManager.state.code = ''\n  phoneManager.state.loading = false\n  phoneManager.state.countdown = 0\n}\n\nconst openPasswordModal = () => {\n  passwordFormState.value.oldPassword = ''\n  passwordFormState.value.newPassword = ''\n  passwordFormState.value.confirmPassword = ''\n  passwordFormState.value.strength = 0\n  showPasswordModal.value = true\n}\n\nconst closePasswordModal = () => {\n  showPasswordModal.value = false\n  passwordFormState.value.oldPassword = ''\n  passwordFormState.value.newPassword = ''\n  passwordFormState.value.confirmPassword = ''\n  passwordFormState.value.loading = false\n  passwordFormState.value.strength = 0\n}\n\nconst openDeleteConfirm = () => {\n  deleteFormState.value.password = ''\n  showDeleteConfirm.value = true\n}\n\nconst closeDeleteConfirm = () => {\n  showDeleteConfirm.value = false\n  deleteFormState.value.password = ''\n}\n\n// 邮箱管理器\nconst emailManager = useEmail()\nconst phoneManager = usePhone()\nconst { validatePassword } = useChangePassword()\nconst { loading } = useDeleteAccount()\n\n// 验证码相关\nconst isRequestingCode = ref(false)\n\n// 修改手机号表单验证\nconst isPhoneFormValid = computed(() => {\n  const phoneRegex = /^1[3-9]\\d{9}$/\n  const isValidPhone = phoneRegex.test(phoneManager.state.value)\n  const isValidCode = phoneManager.state.code?.length === 6\n\n  return phoneManager.state.value && \n         phoneManager.state.code && \n         isValidPhone && \n         isValidCode && \n         !phoneManager.state.loading\n})\n\n// 邮箱格式验证正则\nconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n\n// 处理邮箱更新的验证码发送\nconst handleEmailSendCode = async () => {\n  if (!emailManager.state.value) {\n    showToast('请输入新邮箱', 'warning')\n    return\n  }\n  \n  if (!emailManager.state.password) {\n    showToast('请输入登录密码', 'warning')\n    return\n  }\n  \n  // 验证邮箱格式\n  if (!emailRegex.test(emailManager.state.value)) {\n    showToast('请输入正确的邮箱格式', 'warning')\n    return\n  }\n  \n  try {\n    emailManager.state.loading = true\n    const response = await account.sendEmailCode({\n      email: emailManager.state.value,\n      password: emailManager.state.password.trim()\n    })\n    \n    if (response?.data?.message) {\n      showToast(response.data.message, 'success')\n      emailManager.state.countdown = 60\n      startEmailCountdown()\n    }\n  } catch (error) {\n    const errorMsg = error.response?.data?.detail || \n                    error.message || \n                    '发送验证码失败'\n    showToast(errorMsg, 'error')\n  } finally {\n    emailManager.state.loading = false\n  }\n}\n\n// 密码状态\nconst passwordFormState = ref({\n  oldPassword: '',\n  newPassword: '',\n  confirmPassword: '',\n  loading: false,\n  strength: 0\n})\n\n// 修改密码强度更新的处理方法\nconst handlePasswordInput = () => {\n  const strength = validatePassword(passwordFormState.value.newPassword)\n  console.log('Password strength updated:', strength)\n  passwordFormState.value.strength = strength\n}\n\n// 密码表单验证\nconst isPasswordFormValid = computed(() => {\n  // 基本验证：必填项和密码匹配\n  const hasRequiredFields = passwordFormState.value.oldPassword && \n                          passwordFormState.value.newPassword && \n                          passwordFormState.value.confirmPassword\n  \n  const passwordsMatch = passwordFormState.value.newPassword === \n                        passwordFormState.value.confirmPassword\n  \n  // 密码强度验证：只需要满足基本要求（长度>=8，包含字母和数字）\n  const hasMinimumStrength = passwordFormState.value.strength >= 3\n  \n  // 添加调试日志\n  console.log('Password validation:', {\n    hasRequiredFields,\n    passwordsMatch,\n    strength: passwordFormState.value.strength,\n    hasMinimumStrength,\n    loading: passwordFormState.value.loading\n  })\n\n  return hasRequiredFields && \n         passwordsMatch && \n         hasMinimumStrength && \n         !passwordFormState.value.loading\n})\n\n// 添加表单数据\nconst deleteFormState = ref({\n  password: '',\n  loading: false\n})\n\n// 处理确认注销\nconst handleConfirmDelete = async () => {\n  if (!deleteFormState.value.password) {\n    showToast('请输入密码', 'warning')\n    return\n  }\n  \n  try {\n    const response = await account.deleteAccount(deleteFormState.value)\n    if (response?.data?.code === 200) {\n      showToast('账号已注销', 'success')\n      // 使用 auth store 的 logout 方法清除所有状态\n      await authStore.logout()\n      // 清除 user store 的状态\n      userStore.clearUserInfo()\n      // 清除其他可能的状态\n      localStorage.removeItem('isLoggedIn')\n      // 强制刷新页面以确保所有状态都被清除\n      window.location.href = '/login'\n    }\n  } catch (error) {\n    console.error('注销失败:', error)\n    showToast(error?.message || '注销失败', 'error')\n  }\n}\n\n// 倒计时管理\nlet emailTimer = null\nlet phoneTimer = null\n\nconst startEmailCountdown = () => {\n  if (emailTimer) {\n    clearInterval(emailTimer)\n  }\n  emailManager.state.countdown = 60\n  emailTimer = setInterval(() => {\n    if (emailManager.state.countdown > 0) {\n      emailManager.state.countdown--\n    } else {\n      clearInterval(emailTimer)\n      emailTimer = null\n    }\n  }, 1000)\n}\n\nconst startPhoneCountdown = () => {\n  if (phoneTimer) {\n    clearInterval(phoneTimer)\n  }\n  phoneManager.state.countdown = 60\n  phoneTimer = setInterval(() => {\n    if (phoneManager.state.countdown > 0) {\n      phoneManager.state.countdown--\n    } else {\n      clearInterval(phoneTimer)\n      phoneTimer = null\n    }\n  }, 1000)\n}\n\n// 修改手机号验证码发送处理函数\nconst handlePhoneSendCode = async () => {\n  const phoneRegex = /^1[3-9]\\d{9}$/\n  if (!phoneManager.state.value) {\n    showToast('请输入新手机号', 'warning')\n    return\n  }\n  \n  if (!phoneRegex.test(phoneManager.state.value)) {\n    showToast('请输入正确的手机号格式', 'warning')\n    return\n  }\n  \n  try {\n    phoneManager.state.loading = true\n    const response = await account.sendVerifyCode({\n      phone: phoneManager.state.value.trim(),\n      scene: 'change_phone'  // 指定场景为更换手机号\n    })\n    \n    if (response?.data?.code === 200) {\n      showToast(response.data.message || '验证码已发送', 'success')\n      phoneManager.state.countdown = 60\n      startPhoneCountdown()\n    }\n  } catch (error) {\n    const errorMsg = error.response?.data?.detail || \n                    error.response?.data?.message || \n                    error.message || \n                    '发送验证码失败'\n    showToast(errorMsg, 'error')\n  } finally {\n    phoneManager.state.loading = false\n  }\n}\n\n// 修改手机号处理函数\nconst handlePhoneUpdate = async () => {\n  const phoneRegex = /^1[3-9]\\d{9}$/\n  if (!phoneManager.state.value || !phoneRegex.test(phoneManager.state.value)) {\n    showToast('请输入正确的手机号', 'warning')\n    return\n  }\n  \n  if (!phoneManager.state.code || phoneManager.state.code.length !== 6) {\n    showToast('请输入6位验证码', 'warning')\n    return\n  }\n\n  try {\n    phoneManager.state.loading = true\n    const response = await account.changePhone({\n      phone: phoneManager.state.value.trim(),\n      code: phoneManager.state.code.trim()\n    })\n\n    if (response?.data?.code === 200 || response?.status === 200) {\n      showToast(response.data?.message || '手机号修改成功', 'success')\n      closePhoneModal()\n      await userStore.getUserInfo()\n    }\n  } catch (error) {\n    console.error('手机号更新失败:', error)\n    // 修改错误处理逻辑\n    let errorMsg = '手机号更新失败'\n    \n    if (error.response?.data) {\n      const errorData = error.response.data\n      if (typeof errorData.detail === 'object') {\n        // 处理字段级别的错误\n        errorMsg = Object.values(errorData.detail)[0]\n      } else if (typeof errorData.detail === 'string') {\n        // 处理普通错误消息\n        errorMsg = errorData.detail\n      } else if (errorData.message) {\n        errorMsg = errorData.message\n      }\n    }\n    \n    showToast(errorMsg, 'error')\n  } finally {\n    phoneManager.state.loading = false\n  }\n}\n\n// 只保留一个 onUnmounted\nonUnmounted(() => {\n  if (emailTimer) {\n    clearInterval(emailTimer)\n    emailTimer = null\n  }\n  if (phoneTimer) {\n    clearInterval(phoneTimer)\n    phoneTimer = null\n  }\n})\n\n// 用户信息\nconst userInfo = ref(null)\n\n// 用户信息加载状态\nconst userInfoLoading = ref(false)\n\n// 获取用户信息\nconst fetchUserInfo = async () => {\n  try {\n    userInfoLoading.value = true\n    await userStore.getUserInfo()\n  } catch (error) {\n    console.error('获取用户信息失败:', error)\n    showToast('获取用户信息失败', 'error')\n  } finally {\n    userInfoLoading.value = false\n  }\n}\n\n// 在组件挂载时获取用户信息\nonMounted(() => {\n  fetchUserInfo()\n})\n\n\n// 表单验证\nconst validateForm = () => {\n  if (!form.value.old_password) {\n    showToast('请输入当前密码', 'error')\n    return false\n  }\n  if (!form.value.new_password) {\n    showToast('请输入新密码', 'error')\n    return false\n  }\n  if (!form.value.confirm_password) {\n    showToast('请确认新密码', 'error')\n    return false\n  }\n  if (form.value.new_password !== form.value.confirm_password) {\n    showToast('两次输入的密码不一致', 'error')\n    return false\n  }\n  if (form.value.new_password.length < 6) {\n    showToast('密码长度不能少于6位', 'error')\n    return false\n  }\n  return true\n}\n\n// 邮箱解绑相关\nconst showUnbindEmailModal = ref(false)\nconst unbindEmailLoading = ref(false)\nconst unbindEmailForm = ref({\n  password: ''\n})\n\n// 打开解绑弹窗\nconst handleUnbindEmail = () => {\n  showUnbindEmailModal.value = true\n}\n\n// 关闭解绑弹窗\nconst closeUnbindEmailModal = () => {\n  showUnbindEmailModal.value = false\n  unbindEmailForm.value.password = ''\n}\n\n// 确认解绑\nconst confirmUnbindEmail = async () => {\n  try {\n    unbindEmailLoading.value = true\n    const response = await account.unbindEmail({\n      password: unbindEmailForm.value.password\n    })\n    \n    if (response?.data?.message) {\n      closeUnbindEmailModal()\n      // 更新用户信息\n      await userStore.getUserInfo()\n      showToast(response.data.message || '邮箱解绑成功', 'success')\n    }\n  } catch (error) {\n    console.error('邮箱解绑失败:', error)\n    const errorMsg = error.response?.data?.detail || \n                    error.response?.data?.message || \n                    error.message || \n                    '邮箱解绑失败'\n    showToast(errorMsg, 'error')\n  } finally {\n    unbindEmailLoading.value = false\n  }\n}\n\n// 密码强度相关\nconst strengthText = computed(() => {\n  const strength = passwordFormState.value.strength\n  if (strength <= 2) return '弱'\n  if (strength <= 3) return '中'\n  return '强'\n})\n\nconst strengthTextClass = computed(() => {\n  const strength = passwordFormState.value.strength\n  if (strength <= 2) return 'text-red-500'\n  if (strength <= 3) return 'text-yellow-500'\n  return 'text-green-500'\n})\n\nconst strengthColorClass = computed(() => {\n  const strength = passwordFormState.value.strength\n  if (strength <= 2) return 'bg-red-500'\n  if (strength <= 3) return 'bg-yellow-500'\n  return 'bg-green-500'\n})\n\n// 处理密码更新\nconst handlePasswordUpdate = async () => {\n  try {\n    passwordFormState.loading = true\n    const response = await account.updatePassword({\n      old_password: passwordFormState.oldPassword,\n      new_password: passwordFormState.newPassword,\n      confirm_password: passwordFormState.confirmPassword\n    })\n    \n    if (response?.data?.message) {\n      closePasswordModal()\n      showToast(response.data.message || '密码修改成功', 'success')\n    }\n  } catch (error) {\n    console.error('密码修改失败:', error)\n    const errorMsg = error.response?.data?.detail || \n                    error.response?.data?.message || \n                    error.message || \n                    '密码修改失败'\n    showToast(errorMsg, 'error')\n  } finally {\n    passwordFormState.loading = false\n  }\n}\n\n// 修改邮箱表单验证\nconst isEmailFormValid = computed(() => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n  const isValidEmail = emailRegex.test(emailManager.state.value)\n\n  const isValid = emailManager.state.value && \n         emailManager.state.code && \n         emailManager.state.password &&  // 确保密码已输入\n         isValidEmail && \n         emailManager.state.code.length === 6  // 验证码长度验证\n\n  console.log('Email form validation:', {\n    email: emailManager.state.value,\n    code: emailManager.state.code,\n    password: emailManager.state.password,\n    isValidEmail,\n    codeLength: emailManager.state.code.length,\n    isValid\n  })\n\n  return isValid\n})\n\n// 处理邮箱更新\nconst handleEmailUpdate = async () => {\n  console.log('Form state:', {\n    email: emailManager.state.value,\n    code: emailManager.state.code,\n    password: emailManager.state.password,\n    isValid: isEmailFormValid.value\n  })\n\n  if (!isEmailFormValid.value) {\n    showToast('请填写完整信息', 'warning')\n    return\n  }\n\n  try {\n    emailManager.state.loading = true\n    const response = await account.bindEmail({\n      email: emailManager.state.value,\n      code: emailManager.state.code,\n      password: emailManager.state.password\n    })\n\n    if (response?.data?.message) {\n      showToast(response.data.message, 'success')\n      closeEmailModal()\n      // 更新用户信息\n      await userStore.getUserInfo()\n    }\n  } catch (error) {\n    console.error('邮箱更新失败:', error)\n    const errorMsg = error.response?.data?.detail || \n                    error.message || \n                    '邮箱更新失败'\n    showToast(errorMsg, 'error')\n  } finally {\n    emailManager.state.loading = false\n  }\n}\n\n// 修改手机号验证码按钮禁用状态计算\nconst isPhoneCodeButtonDisabled = computed(() => {\n  const phoneRegex = /^1[3-9]\\d{9}$/\n  return phoneManager.state.loading || \n         phoneManager.state.countdown > 0 || \n         !phoneManager.state.value ||\n         !phoneRegex.test(phoneManager.state.value)\n})\n</script>\n\n<style scoped>\n/* No changes to style section */\n</style>\n\n<!-- 密码格式要求提示 -->\n<div class=\"password-requirements text-sm text-gray-500 mt-2\">\n  <p>密码必须满足：</p>\n  <ul class=\"list-disc pl-5 space-y-1\">\n    <li>长度至少8位</li>\n    <li>包含字母</li>\n    <li>包含数字</li>\n  </ul>\n  <p class=\"mt-1\">建议包含（可选）：</p>\n  <ul class=\"list-disc pl-5 space-y-1\">\n    <li>大写字母</li>\n    <li>特殊字符（!@#$%^&*）</li>\n  </ul>\n</div>"],"mappings":";;SACEA,mBAAA,oCAAuC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}