{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport { defineStore } from 'pinia';\nimport { auth } from '@/api/auth';\nimport request from '@/utils/request';\nimport { useRouter } from 'vue-router';\nimport { useAccountStore } from '@/stores/account';\nimport { useUserStore } from '@/stores/user';\nimport { showToast } from '@/components/ToastMessage';\nimport { STORAGE_KEYS } from '@/utils/storage';\nexport const useAuthStore = defineStore('auth', {\n  state: () => ({\n    isLoggedIn: !!localStorage.getItem('token'),\n    rememberMe: false,\n    token: null,\n    refreshToken: null,\n    tokenExpiresAt: null\n  }),\n  actions: {\n    async login(credentials, rememberMe = false) {\n      try {\n        const router = useRouter();\n        console.log('Login attempt with:', {\n          account: credentials.account,\n          rememberMe\n        });\n        const response = await auth.loginWithPassword(credentials);\n        console.log('Login response:', response);\n        if (response) {\n          // 保存 token\n          this.token = response.token;\n          this.refreshToken = response.refresh;\n          localStorage.setItem('token', response.token);\n          localStorage.setItem('refresh_token', response.refresh);\n\n          // 设置请求头\n          request.defaults.headers.common['Authorization'] = `Bearer ${response.token}`;\n\n          // 设置登录状态\n          this.isLoggedIn = true;\n\n          // 登录成功后立即获取用户信息并存储\n          const accountStore = useAccountStore();\n          console.log('Fetching user info after login...');\n          await accountStore.fetchUserInfo();\n          console.log('User info fetched:', accountStore.userInfo);\n\n          // 记住账号功能\n          if (rememberMe) {\n            localStorage.setItem('remember_me', 'true');\n            localStorage.setItem('remembered_account', credentials.account);\n          }\n\n          // 显示登录成功提示\n          showToast('登录成功', 'success');\n\n          // 获取重定向地址\n          // 执行重定向\n          window.location.href = '/user?tab=home';\n          return true;\n        }\n        return false;\n      } catch (error) {\n        console.error('Login failed:', error);\n        console.error('Error details:', {\n          message: error.message,\n          response: error.response?.data,\n          status: error.response?.status\n        });\n\n        // 处理具体的错误信息\n        if (error.response?.data?.message) {\n          // 如果是未注册错误，跳转到注册页面\n          if (error.response.data.message === '该手机号未注册') {\n            showToast('该手机号未注册，即将跳转到注册页面', 'info');\n            setTimeout(() => {\n              router.push({\n                path: '/register',\n                query: {\n                  phone: credentials.account\n                } // 传递手机号到注册页面\n              });\n            }, 1500); // 延迟 1.5 秒后跳转，让用户看到提示\n          } else {\n            showToast(error.response.data.message, 'error');\n          }\n        } else {\n          showToast(error.message || '登录失败，请稍后重试', 'error');\n        }\n        throw error;\n      }\n    },\n    async logout() {\n      try {\n        // 清除所有 localStorage - 移到最前面\n        localStorage.clear();\n        if (this.refreshToken) {\n          try {\n            await auth.logout();\n          } catch (error) {\n            console.error('Logout API error:', error);\n            // 即使 API 调用失败，继续清理本地状态\n          }\n        }\n\n        // 清除 store 状态\n        this.clearAuth();\n        const accountStore = useAccountStore();\n        const userStore = useUserStore();\n        accountStore.clearUserInfo();\n        userStore.clearUserInfo();\n\n        // 清除请求头中的 token\n        delete request.defaults.headers.common['Authorization'];\n\n        // 使用 window.location 强制跳转\n        window.location.href = '/login';\n        showToast('已退出登录', 'success');\n      } catch (error) {\n        console.error('Logout failed:', error);\n        showToast('退出登录失败，请重试', 'error');\n      }\n    },\n    clearAuth() {\n      // 清除请求头\n      delete request.defaults.headers.common['Authorization'];\n\n      // 重置状态\n      this.isLoggedIn = false;\n      this.token = null;\n      this.refreshToken = null;\n      this.tokenExpiresAt = null;\n      this.rememberMe = false;\n\n      // 确保清除所有认证相关的本地存储\n      Object.values(STORAGE_KEYS).forEach(key => {\n        localStorage.removeItem(key);\n      });\n    },\n    // 检查 token 是否过期\n    isTokenExpired() {\n      return !this.tokenExpiresAt || new Date().getTime() > this.tokenExpiresAt;\n    },\n    // 从 localStorage 恢复认证状态\n    restoreAuth() {\n      const token = localStorage.getItem('token');\n      const refreshToken = localStorage.getItem('refresh_token');\n      const tokenExpiresAt = localStorage.getItem('token_expires_at');\n      const rememberMe = localStorage.getItem('remember_me') === 'true';\n      if (token && refreshToken && tokenExpiresAt) {\n        this.token = token;\n        this.refreshToken = refreshToken;\n        this.tokenExpiresAt = parseInt(tokenExpiresAt);\n        this.rememberMe = rememberMe;\n        this.isLoggedIn = !this.isTokenExpired();\n        if (this.isLoggedIn) {\n          request.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        }\n      }\n    }\n  }\n});","map":{"version":3,"names":["defineStore","auth","request","useRouter","useAccountStore","useUserStore","showToast","STORAGE_KEYS","useAuthStore","state","isLoggedIn","localStorage","getItem","rememberMe","token","refreshToken","tokenExpiresAt","actions","login","credentials","router","console","log","account","response","loginWithPassword","refresh","setItem","defaults","headers","common","accountStore","fetchUserInfo","userInfo","window","location","href","error","message","data","status","setTimeout","push","path","query","phone","logout","clear","clearAuth","userStore","clearUserInfo","Object","values","forEach","key","removeItem","isTokenExpired","Date","getTime","restoreAuth","parseInt"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/stores/auth.js"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { auth } from '@/api/auth'\nimport request from '@/utils/request'\nimport { useRouter } from 'vue-router'\nimport { useAccountStore } from '@/stores/account'\nimport { useUserStore } from '@/stores/user'\nimport { showToast } from '@/components/ToastMessage'\nimport { STORAGE_KEYS } from '@/utils/storage'\n\nexport const useAuthStore = defineStore('auth', {\n  state: () => ({\n    isLoggedIn: !!localStorage.getItem('token'),\n    rememberMe: false,\n    token: null,\n    refreshToken: null,\n    tokenExpiresAt: null\n  }),\n\n  actions: {\n    async login(credentials, rememberMe = false) {\n      try {\n        const router = useRouter()\n        console.log('Login attempt with:', { account: credentials.account, rememberMe })\n        const response = await auth.loginWithPassword(credentials)\n        console.log('Login response:', response)\n        \n        if (response) {\n          // 保存 token\n          this.token = response.token\n          this.refreshToken = response.refresh\n          localStorage.setItem('token', response.token)\n          localStorage.setItem('refresh_token', response.refresh)\n          \n          // 设置请求头\n          request.defaults.headers.common['Authorization'] = `Bearer ${response.token}`\n          \n          // 设置登录状态\n          this.isLoggedIn = true\n          \n          // 登录成功后立即获取用户信息并存储\n          const accountStore = useAccountStore()\n          console.log('Fetching user info after login...')\n          await accountStore.fetchUserInfo()\n          \n          console.log('User info fetched:', accountStore.userInfo)\n          \n          // 记住账号功能\n          if (rememberMe) {\n            localStorage.setItem('remember_me', 'true')\n            localStorage.setItem('remembered_account', credentials.account)\n          }\n          \n          // 显示登录成功提示\n          showToast('登录成功', 'success')\n          \n          // 获取重定向地址\n          // 执行重定向\n          window.location.href = '/user?tab=home'\n          \n          return true\n        }\n        return false\n      } catch (error) {\n        console.error('Login failed:', error)\n        console.error('Error details:', {\n          message: error.message,\n          response: error.response?.data,\n          status: error.response?.status\n        })\n        \n        // 处理具体的错误信息\n        if (error.response?.data?.message) {\n          // 如果是未注册错误，跳转到注册页面\n          if (error.response.data.message === '该手机号未注册') {\n            showToast('该手机号未注册，即将跳转到注册页面', 'info')\n            setTimeout(() => {\n              router.push({\n                path: '/register',\n                query: { phone: credentials.account }  // 传递手机号到注册页面\n              })\n            }, 1500)  // 延迟 1.5 秒后跳转，让用户看到提示\n          } else {\n            showToast(error.response.data.message, 'error')\n          }\n        } else {\n          showToast(error.message || '登录失败，请稍后重试', 'error')\n        }\n        throw error\n      }\n    },\n\n    async logout() {\n      try {\n        // 清除所有 localStorage - 移到最前面\n        localStorage.clear()\n        \n        if (this.refreshToken) {\n          try {\n            await auth.logout()\n          } catch (error) {\n            console.error('Logout API error:', error)\n            // 即使 API 调用失败，继续清理本地状态\n          }\n        }\n        \n        // 清除 store 状态\n        this.clearAuth()\n        const accountStore = useAccountStore()\n        const userStore = useUserStore()\n        accountStore.clearUserInfo()\n        userStore.clearUserInfo()\n        \n        // 清除请求头中的 token\n        delete request.defaults.headers.common['Authorization']\n        \n        // 使用 window.location 强制跳转\n        window.location.href = '/login'\n        \n        showToast('已退出登录', 'success')\n      } catch (error) {\n        console.error('Logout failed:', error)\n        showToast('退出登录失败，请重试', 'error')\n      }\n    },\n\n    clearAuth() {\n      // 清除请求头\n      delete request.defaults.headers.common['Authorization']\n      \n      // 重置状态\n      this.isLoggedIn = false\n      this.token = null\n      this.refreshToken = null\n      this.tokenExpiresAt = null\n      this.rememberMe = false\n      \n      // 确保清除所有认证相关的本地存储\n      Object.values(STORAGE_KEYS).forEach(key => {\n        localStorage.removeItem(key)\n      })\n    },\n\n    // 检查 token 是否过期\n    isTokenExpired() {\n      return !this.tokenExpiresAt || new Date().getTime() > this.tokenExpiresAt\n    },\n\n    // 从 localStorage 恢复认证状态\n    restoreAuth() {\n      const token = localStorage.getItem('token')\n      const refreshToken = localStorage.getItem('refresh_token')\n      const tokenExpiresAt = localStorage.getItem('token_expires_at')\n      const rememberMe = localStorage.getItem('remember_me') === 'true'\n\n      if (token && refreshToken && tokenExpiresAt) {\n        this.token = token\n        this.refreshToken = refreshToken\n        this.tokenExpiresAt = parseInt(tokenExpiresAt)\n        this.rememberMe = rememberMe\n        this.isLoggedIn = !this.isTokenExpired()\n        \n        if (this.isLoggedIn) {\n          request.defaults.headers.common['Authorization'] = `Bearer ${token}`\n        }\n      }\n    }\n  }\n}) "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}