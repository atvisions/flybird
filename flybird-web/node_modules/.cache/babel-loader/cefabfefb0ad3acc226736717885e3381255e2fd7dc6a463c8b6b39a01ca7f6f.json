{"ast":null,"code":"import _objectSpread from \"/Users/liuzhao/Documents/Projects/flybird/flybird-web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { createStore } from 'vuex';\nimport { STORAGE_KEYS } from '@/utils/storage';\nimport profile from '@/api/profile';\nimport { user } from '@/api/user';\nimport request from '@/utils/request';\nimport router from '../router';\nimport { storage } from '@/utils/storage';\nimport { getExpirationInfo } from '@/utils/auth';\nimport defaultAvatar from '@/assets/images/default-avatar.png';\nexport default createStore({\n  state: {\n    isAuthenticated: false,\n    userInfo: null,\n    basicInfo: null,\n    completeness: null,\n    token: null,\n    refreshToken: null,\n    isLoadingUserInfo: false,\n    lastUserInfoFetch: null\n  },\n  mutations: {\n    SET_AUTH(state, isAuthenticated) {\n      state.isAuthenticated = isAuthenticated;\n    },\n    SET_USER_INFO(state, userInfo) {\n      // 深度合并更新\n      if (state.userInfo) {\n        state.userInfo = _objectSpread(_objectSpread({}, state.userInfo), {}, {\n          code: userInfo.code,\n          message: userInfo.message,\n          data: _objectSpread(_objectSpread({}, state.userInfo.data), {}, {\n            user: _objectSpread(_objectSpread({}, state.userInfo.data?.user), userInfo.data?.user)\n          }, userInfo.data)\n        });\n      } else {\n        state.userInfo = userInfo;\n      }\n    },\n    SET_BASIC_INFO(state, basicInfo) {\n      state.basicInfo = _objectSpread(_objectSpread({}, state.basicInfo), basicInfo);\n    },\n    SET_COMPLETENESS(state, completeness) {\n      state.completeness = completeness;\n    },\n    SET_AVATAR_UPDATE_TIME(state, timestamp) {\n      state.avatarUpdateTime = timestamp;\n    },\n    SET_TOKEN(state, token) {\n      state.token = token;\n      state.isAuthenticated = !!token;\n    },\n    SET_REFRESH_TOKEN(state, refreshToken) {\n      state.refreshToken = refreshToken;\n    },\n    SET_USER(state, user) {\n      state.userInfo = user;\n    },\n    SET_LOGGED_IN(state, status) {\n      state.isAuthenticated = status;\n    },\n    SET_AUTHENTICATED(state, isAuthenticated) {\n      state.isAuthenticated = isAuthenticated;\n    },\n    CLEAR_USER_INFO(state) {\n      state.userInfo = null;\n    },\n    CLEAR_BASIC_INFO(state) {\n      state.basicInfo = null;\n    },\n    UPDATE_BASIC_INFO(state, basicInfo) {\n      if (state.userInfo?.data) {\n        state.userInfo.data.basic_info = _objectSpread(_objectSpread({}, state.userInfo.data.basic_info), basicInfo);\n      }\n    },\n    UPDATE_AVATAR(state, avatarUrl) {\n      if (state.userInfo?.data?.basic_info) {\n        state.userInfo.data.basic_info.avatar = avatarUrl;\n      }\n    },\n    UPDATE_BACKGROUND(state, backgroundUrl) {\n      if (state.userInfo?.data?.basic_info) {\n        state.userInfo.data.basic_info.background = backgroundUrl;\n      }\n    },\n    SET_LOADING_USER_INFO(state, isLoading) {\n      state.isLoadingUserInfo = isLoading;\n    },\n    SET_LAST_USER_INFO_FETCH(state, timestamp) {\n      state.lastUserInfoFetch = timestamp;\n    }\n  },\n  getters: {\n    userAvatar: state => {\n      return state.userInfo?.data?.basic_info?.avatar || defaultAvatar;\n    },\n    userName: state => {\n      return state.userInfo?.data?.basic_info?.nickname || '未设置昵称';\n    },\n    userNickname: state => {\n      return state.userInfo?.data?.basic_info?.nickname || '未设置昵称';\n    },\n    userPhone: state => {\n      return state.userInfo?.data?.basic_info?.phone;\n    },\n    profileCompleteness: state => {\n      return state.completeness || 0;\n    }\n  },\n  actions: {\n    async checkAuth({\n      commit,\n      dispatch\n    }) {\n      try {\n        const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n        if (!token) {\n          return false;\n        }\n\n        // 设置请求头\n        request.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n        // 尝试获取用户信息来验证 token 是否有效\n        try {\n          await dispatch('fetchUserInfo');\n          commit('SET_LOGGED_IN', true);\n          return true;\n        } catch (error) {\n          if (error.response?.status === 401) {\n            // token 无效，尝试刷新\n            const refreshSuccess = await dispatch('refreshToken');\n            if (refreshSuccess) {\n              await dispatch('fetchUserInfo');\n              commit('SET_LOGGED_IN', true);\n              return true;\n            }\n          }\n          return false;\n        }\n      } catch (error) {\n        console.error('Auth check failed:', error);\n        return false;\n      }\n    },\n    async fetchUserInfo({\n      commit,\n      state\n    }) {\n      // 如果正在加载，返回\n      if (state.isLoadingUserInfo) {\n        return;\n      }\n\n      // 如果数据已经存在且在5分钟内获取过，直接返回\n      const now = Date.now();\n      if (state.userInfo && state.lastUserInfoFetch && now - state.lastUserInfoFetch < 5 * 60 * 1000) {\n        return state.userInfo;\n      }\n      try {\n        commit('SET_LOADING_USER_INFO', true);\n        const response = await user.getUserInfo();\n        if (response.data?.code === 200) {\n          commit('SET_USER_INFO', response.data);\n          commit('SET_LAST_USER_INFO_FETCH', now);\n          return response.data;\n        }\n      } catch (error) {\n        console.error('获取用户信息失败:', error);\n        throw error;\n      } finally {\n        commit('SET_LOADING_USER_INFO', false);\n      }\n    },\n    async updateBasicInfo({\n      commit\n    }, {\n      type,\n      data\n    }) {\n      try {\n        let response;\n        if (type === 'avatar') {\n          response = await profile.uploadAvatar(data);\n        } else if (type === 'background') {\n          response = await profile.uploadBackground(data);\n        } else if (type === 'basic') {\n          response = await profile.updateModule('basic_info', data);\n        } else {\n          throw new Error('未知的更新类型');\n        }\n        if (response?.data?.code === 200) {\n          if (type === 'avatar' || type === 'background') {\n            commit('SET_AVATAR_UPDATE_TIME', Date.now());\n          }\n          if (type === 'basic') {\n            commit('UPDATE_BASIC_INFO', response.data.data);\n          } else {\n            const {\n              user,\n              basic_info\n            } = response.data.data;\n            if (user) {\n              commit('SET_USER_INFO', user);\n            }\n            if (basic_info) {\n              commit('SET_BASIC_INFO', basic_info);\n            }\n          }\n          return response;\n        }\n        throw new Error(response?.data?.message || '更新失败');\n      } catch (error) {\n        console.error('Failed to update basic info:', error);\n        throw error;\n      }\n    },\n    async logout({\n      commit\n    }) {\n      try {\n        await auth.logout();\n      } catch (error) {\n        console.error('Logout failed:', error);\n      } finally {\n        // 清理状态\n        commit('SET_TOKEN', null);\n        commit('SET_REFRESH_TOKEN', null);\n        commit('SET_USER', null);\n        commit('SET_LOGGED_IN', false);\n        commit('CLEAR_USER_INFO');\n        commit('CLEAR_BASIC_INFO');\n\n        // 使用 storage 服务清除认证信息\n        storage.clearAuth();\n\n        // 清除请求头\n        delete request.defaults.headers.common['Authorization'];\n\n        // 跳转到登录页\n        router.push('/login');\n      }\n    },\n    async fetchCompleteness({\n      commit\n    }) {\n      try {\n        const response = await profile.getCompleteness();\n        if (response.data?.code === 200) {\n          commit('SET_COMPLETENESS', response.data);\n          return response.data;\n        }\n      } catch (error) {\n        console.error('获取完整度失败:', error);\n      }\n    },\n    async login({\n      commit\n    }, {\n      access,\n      refresh,\n      rememberMe = false\n    }) {\n      try {\n        // 使用 storage 服务保存认证信息，它会处理过期时间\n        storage.saveAuth({\n          access,\n          refresh\n        }, rememberMe);\n\n        // 设置请求头\n        request.defaults.headers.common['Authorization'] = `Bearer ${access}`;\n\n        // 更新 store 状态\n        commit('SET_TOKEN', access);\n        commit('SET_REFRESH_TOKEN', refresh);\n        commit('SET_LOGGED_IN', true);\n\n        // 获取用户信息\n        try {\n          const userInfoResponse = await this.dispatch('fetchUserInfo');\n          if (userInfoResponse?.data?.user && rememberMe) {\n            storage.savePhone(userInfoResponse.data.user.phone, true);\n          }\n        } catch (error) {\n          console.warn('获取用户信息失败，但不影响登录状态:', error);\n        }\n      } catch (error) {\n        console.error('登录失败:', error);\n        throw error;\n      }\n    },\n    async refreshToken({\n      commit,\n      state\n    }) {\n      try {\n        const refreshToken = localStorage.getItem(STORAGE_KEYS.REFRESH_TOKEN);\n        if (!refreshToken) {\n          throw new Error('No refresh token');\n        }\n        const response = await auth.refreshToken({\n          refresh: refreshToken\n        });\n        if (response.data?.code === 200) {\n          const {\n            access\n          } = response.data.data;\n\n          // 使用 storage 服务保存认证信息\n          // 保持原有的记住我状态\n          const rememberMe = localStorage.getItem(STORAGE_KEYS.REMEMBER_ME) === 'true';\n          storage.saveAuth({\n            access,\n            refresh: refreshToken // 保持原有的 refresh token\n          }, rememberMe);\n\n          // 更新 store 状态\n          commit('SET_TOKEN', access);\n          return true;\n        }\n        return false;\n      } catch (error) {\n        console.error('Token refresh failed:', error);\n        // 清除所有认证状态\n        commit('SET_TOKEN', null);\n        commit('SET_REFRESH_TOKEN', null);\n        commit('SET_USER', null);\n        commit('SET_LOGGED_IN', false);\n\n        // 使用 storage 服务清除认证信息\n        storage.clearAuth();\n        return false;\n      }\n    },\n    async updateAvatar({\n      commit\n    }, formData) {\n      try {\n        const response = await profile.uploadAvatar(formData);\n        if (response.data?.code === 200) {\n          const avatarUrl = response.data.data.avatar;\n          commit('UPDATE_AVATAR', avatarUrl);\n          return avatarUrl;\n        }\n        throw new Error(response.data?.message || '更新头像失败');\n      } catch (error) {\n        console.error('Failed to update avatar:', error);\n        throw error;\n      }\n    },\n    async updateBackground({\n      commit\n    }, formData) {\n      try {\n        const response = await profile.uploadBackground(formData);\n        if (response.data?.code === 200) {\n          const backgroundUrl = response.data.data.background;\n          commit('UPDATE_BACKGROUND', backgroundUrl);\n          return backgroundUrl;\n        }\n        throw new Error(response.data?.message || '更新背景图失败');\n      } catch (error) {\n        console.error('Failed to update background:', error);\n        throw error;\n      }\n    },\n    async getUserInfo({\n      commit\n    }) {\n      try {\n        const response = await user.getUserInfo();\n        if (response.data?.code === 200) {\n          commit('SET_USER_INFO', response.data);\n        }\n        return response;\n      } catch (error) {\n        console.error('获取用户信息失败:', error);\n        throw error;\n      }\n    }\n  }\n});","map":{"version":3,"names":["createStore","STORAGE_KEYS","profile","user","request","router","storage","getExpirationInfo","defaultAvatar","state","isAuthenticated","userInfo","basicInfo","completeness","token","refreshToken","isLoadingUserInfo","lastUserInfoFetch","mutations","SET_AUTH","SET_USER_INFO","_objectSpread","code","message","data","SET_BASIC_INFO","SET_COMPLETENESS","SET_AVATAR_UPDATE_TIME","timestamp","avatarUpdateTime","SET_TOKEN","SET_REFRESH_TOKEN","SET_USER","SET_LOGGED_IN","status","SET_AUTHENTICATED","CLEAR_USER_INFO","CLEAR_BASIC_INFO","UPDATE_BASIC_INFO","basic_info","UPDATE_AVATAR","avatarUrl","avatar","UPDATE_BACKGROUND","backgroundUrl","background","SET_LOADING_USER_INFO","isLoading","SET_LAST_USER_INFO_FETCH","getters","userAvatar","userName","nickname","userNickname","userPhone","phone","profileCompleteness","actions","checkAuth","commit","dispatch","localStorage","getItem","TOKEN","defaults","headers","common","error","response","refreshSuccess","console","fetchUserInfo","now","Date","getUserInfo","updateBasicInfo","type","uploadAvatar","uploadBackground","updateModule","Error","logout","auth","clearAuth","push","fetchCompleteness","getCompleteness","login","access","refresh","rememberMe","saveAuth","userInfoResponse","savePhone","warn","REFRESH_TOKEN","REMEMBER_ME","updateAvatar","formData","updateBackground"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\nimport { STORAGE_KEYS } from '@/utils/storage'\nimport profile from '@/api/profile'\nimport { user } from '@/api/user'\nimport request from '@/utils/request'\nimport router from '../router'\nimport { storage } from '@/utils/storage'\nimport { getExpirationInfo } from '@/utils/auth'\nimport defaultAvatar from '@/assets/images/default-avatar.png'\n\nexport default createStore({\n  state: {\n    isAuthenticated: false,\n    userInfo: null,\n    basicInfo: null,\n    completeness: null,\n    token: null,\n    refreshToken: null,\n    isLoadingUserInfo: false,\n    lastUserInfoFetch: null\n  },\n\n  mutations: {\n    SET_AUTH(state, isAuthenticated) {\n      state.isAuthenticated = isAuthenticated\n    },\n\n    SET_USER_INFO(state, userInfo) {\n      // 深度合并更新\n      if (state.userInfo) {\n        state.userInfo = {\n          ...state.userInfo,\n          code: userInfo.code,\n          message: userInfo.message,\n          data: {\n            ...state.userInfo.data,\n            user: {\n              ...state.userInfo.data?.user,\n              ...userInfo.data?.user\n            },\n            ...userInfo.data\n          }\n        }\n      } else {\n        state.userInfo = userInfo\n      }\n    },\n\n    SET_BASIC_INFO(state, basicInfo) {\n      state.basicInfo = {\n        ...state.basicInfo,\n        ...basicInfo\n      }\n    },\n\n    SET_COMPLETENESS(state, completeness) {\n      state.completeness = completeness\n    },\n\n    SET_AVATAR_UPDATE_TIME(state, timestamp) {\n      state.avatarUpdateTime = timestamp\n    },\n\n    SET_TOKEN(state, token) {\n      state.token = token\n      state.isAuthenticated = !!token\n    },\n\n    SET_REFRESH_TOKEN(state, refreshToken) {\n      state.refreshToken = refreshToken\n    },\n\n    SET_USER(state, user) {\n      state.userInfo = user\n    },\n\n    SET_LOGGED_IN(state, status) {\n      state.isAuthenticated = status\n    },\n\n    SET_AUTHENTICATED(state, isAuthenticated) {\n      state.isAuthenticated = isAuthenticated\n    },\n\n    CLEAR_USER_INFO(state) {\n      state.userInfo = null\n    },\n\n    CLEAR_BASIC_INFO(state) {\n      state.basicInfo = null\n    },\n\n    UPDATE_BASIC_INFO(state, basicInfo) {\n      if (state.userInfo?.data) {\n        state.userInfo.data.basic_info = {\n          ...state.userInfo.data.basic_info,\n          ...basicInfo\n        }\n      }\n    },\n\n    UPDATE_AVATAR(state, avatarUrl) {\n      if (state.userInfo?.data?.basic_info) {\n        state.userInfo.data.basic_info.avatar = avatarUrl\n      }\n    },\n\n    UPDATE_BACKGROUND(state, backgroundUrl) {\n      if (state.userInfo?.data?.basic_info) {\n        state.userInfo.data.basic_info.background = backgroundUrl\n      }\n    },\n\n    SET_LOADING_USER_INFO(state, isLoading) {\n      state.isLoadingUserInfo = isLoading\n    },\n\n    SET_LAST_USER_INFO_FETCH(state, timestamp) {\n      state.lastUserInfoFetch = timestamp\n    }\n  },\n\n  getters: {\n    userAvatar: state => {\n      return state.userInfo?.data?.basic_info?.avatar || defaultAvatar\n    },\n\n    userName: state => {\n      return state.userInfo?.data?.basic_info?.nickname || '未设置昵称'\n    },\n\n    userNickname: state => {\n      return state.userInfo?.data?.basic_info?.nickname || '未设置昵称'\n    },\n\n    userPhone: state => {\n      return state.userInfo?.data?.basic_info?.phone\n    },\n\n    profileCompleteness: state => {\n      return state.completeness || 0\n    }\n  },\n\n  actions: {\n    async checkAuth({ commit, dispatch }) {\n      try {\n        const token = localStorage.getItem(STORAGE_KEYS.TOKEN)\n        if (!token) {\n          return false\n        }\n\n        // 设置请求头\n        request.defaults.headers.common['Authorization'] = `Bearer ${token}`\n        \n        // 尝试获取用户信息来验证 token 是否有效\n        try {\n          await dispatch('fetchUserInfo')\n          commit('SET_LOGGED_IN', true)\n          return true\n        } catch (error) {\n          if (error.response?.status === 401) {\n            // token 无效，尝试刷新\n            const refreshSuccess = await dispatch('refreshToken')\n            if (refreshSuccess) {\n              await dispatch('fetchUserInfo')\n              commit('SET_LOGGED_IN', true)\n              return true\n            }\n          }\n          return false\n        }\n      } catch (error) {\n        console.error('Auth check failed:', error)\n        return false\n      }\n    },\n\n    async fetchUserInfo({ commit, state }) {\n      // 如果正在加载，返回\n      if (state.isLoadingUserInfo) {\n        return\n      }\n      \n      // 如果数据已经存在且在5分钟内获取过，直接返回\n      const now = Date.now()\n      if (state.userInfo && state.lastUserInfoFetch && \n          (now - state.lastUserInfoFetch) < 5 * 60 * 1000) {\n        return state.userInfo\n      }\n\n      try {\n        commit('SET_LOADING_USER_INFO', true)\n        const response = await user.getUserInfo()\n        \n        if (response.data?.code === 200) {\n          commit('SET_USER_INFO', response.data)\n          commit('SET_LAST_USER_INFO_FETCH', now)\n          return response.data\n        }\n      } catch (error) {\n        console.error('获取用户信息失败:', error)\n        throw error\n      } finally {\n        commit('SET_LOADING_USER_INFO', false)\n      }\n    },\n\n    async updateBasicInfo({ commit }, { type, data }) {\n      try {\n        let response\n        if (type === 'avatar') {\n          response = await profile.uploadAvatar(data)\n        } else if (type === 'background') {\n          response = await profile.uploadBackground(data)\n        } else if (type === 'basic') {\n          response = await profile.updateModule('basic_info', data)\n        } else {\n          throw new Error('未知的更新类型')\n        }\n\n        if (response?.data?.code === 200) {\n          if (type === 'avatar' || type === 'background') {\n            commit('SET_AVATAR_UPDATE_TIME', Date.now())\n          }\n          if (type === 'basic') {\n            commit('UPDATE_BASIC_INFO', response.data.data)\n          } else {\n            const { user, basic_info } = response.data.data\n            if (user) {\n              commit('SET_USER_INFO', user)\n            }\n            if (basic_info) {\n              commit('SET_BASIC_INFO', basic_info)\n            }\n          }\n          return response\n        }\n        throw new Error(response?.data?.message || '更新失败')\n      } catch (error) {\n        console.error('Failed to update basic info:', error)\n        throw error\n      }\n    },\n\n    async logout({ commit }) {\n      try {\n        await auth.logout()\n      } catch (error) {\n        console.error('Logout failed:', error)\n      } finally {\n        // 清理状态\n        commit('SET_TOKEN', null)\n        commit('SET_REFRESH_TOKEN', null)\n        commit('SET_USER', null)\n        commit('SET_LOGGED_IN', false)\n        commit('CLEAR_USER_INFO')\n        commit('CLEAR_BASIC_INFO')\n        \n        // 使用 storage 服务清除认证信息\n        storage.clearAuth()\n        \n        // 清除请求头\n        delete request.defaults.headers.common['Authorization']\n        \n        // 跳转到登录页\n        router.push('/login')\n      }\n    },\n\n    async fetchCompleteness({ commit }) {\n      try {\n        const response = await profile.getCompleteness()\n        if (response.data?.code === 200) {\n          commit('SET_COMPLETENESS', response.data)\n          return response.data\n        }\n      } catch (error) {\n        console.error('获取完整度失败:', error)\n      }\n    },\n\n    async login({ commit }, { access, refresh, rememberMe = false }) {\n      try {\n        // 使用 storage 服务保存认证信息，它会处理过期时间\n        storage.saveAuth({ access, refresh }, rememberMe)\n        \n        // 设置请求头\n        request.defaults.headers.common['Authorization'] = `Bearer ${access}`\n        \n        // 更新 store 状态\n        commit('SET_TOKEN', access)\n        commit('SET_REFRESH_TOKEN', refresh)\n        commit('SET_LOGGED_IN', true)\n\n        // 获取用户信息\n        try {\n          const userInfoResponse = await this.dispatch('fetchUserInfo')\n          if (userInfoResponse?.data?.user && rememberMe) {\n            storage.savePhone(userInfoResponse.data.user.phone, true)\n          }\n        } catch (error) {\n          console.warn('获取用户信息失败，但不影响登录状态:', error)\n        }\n      } catch (error) {\n        console.error('登录失败:', error)\n        throw error\n      }\n    },\n\n    async refreshToken({ commit, state }) {\n      try {\n        const refreshToken = localStorage.getItem(STORAGE_KEYS.REFRESH_TOKEN)\n        if (!refreshToken) {\n          throw new Error('No refresh token')\n        }\n\n        const response = await auth.refreshToken({ refresh: refreshToken })\n        \n        if (response.data?.code === 200) {\n          const { access } = response.data.data\n          \n          // 使用 storage 服务保存认证信息\n          // 保持原有的记住我状态\n          const rememberMe = localStorage.getItem(STORAGE_KEYS.REMEMBER_ME) === 'true'\n          storage.saveAuth({ \n            access, \n            refresh: refreshToken  // 保持原有的 refresh token\n          }, rememberMe)\n          \n          // 更新 store 状态\n          commit('SET_TOKEN', access)\n          \n          return true\n        }\n        return false\n      } catch (error) {\n        console.error('Token refresh failed:', error)\n        // 清除所有认证状态\n        commit('SET_TOKEN', null)\n        commit('SET_REFRESH_TOKEN', null)\n        commit('SET_USER', null)\n        commit('SET_LOGGED_IN', false)\n        \n        // 使用 storage 服务清除认证信息\n        storage.clearAuth()\n        \n        return false\n      }\n    },\n\n    async updateAvatar({ commit }, formData) {\n      try {\n        const response = await profile.uploadAvatar(formData)\n        if (response.data?.code === 200) {\n          const avatarUrl = response.data.data.avatar\n          commit('UPDATE_AVATAR', avatarUrl)\n          return avatarUrl\n        }\n        throw new Error(response.data?.message || '更新头像失败')\n      } catch (error) {\n        console.error('Failed to update avatar:', error)\n        throw error\n      }\n    },\n\n    async updateBackground({ commit }, formData) {\n      try {\n        const response = await profile.uploadBackground(formData)\n        if (response.data?.code === 200) {\n          const backgroundUrl = response.data.data.background\n          commit('UPDATE_BACKGROUND', backgroundUrl)\n          return backgroundUrl\n        }\n        throw new Error(response.data?.message || '更新背景图失败')\n      } catch (error) {\n        console.error('Failed to update background:', error)\n        throw error\n      }\n    },\n\n    async getUserInfo({ commit }) {\n      try {\n        const response = await user.getUserInfo()\n        if (response.data?.code === 200) {\n          commit('SET_USER_INFO', response.data)\n        }\n        return response\n      } catch (error) {\n        console.error('获取用户信息失败:', error)\n        throw error\n      }\n    }\n  }\n})"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}