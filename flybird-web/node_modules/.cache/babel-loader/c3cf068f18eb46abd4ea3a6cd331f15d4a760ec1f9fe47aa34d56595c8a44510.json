{"ast":null,"code":"import { calculateExpiration } from './auth';\n\n// 存储键名常量\nexport const STORAGE_KEYS = {\n  TOKEN: 'token',\n  REFRESH_TOKEN: 'refresh_token',\n  USER_INFO: 'user_info',\n  TOKEN_EXPIRES: 'token_expires',\n  REMEMBER_ME: 'remember_me',\n  REMEMBERED_PHONE: 'remembered_phone',\n  ACCOUNT: 'account'\n};\nexport const storage = {\n  // 保存认证信息\n  saveAuth({\n    access,\n    refresh\n  }, remember = false) {\n    // 添加调试信息\n    console.log('Storage saveAuth called with remember:', remember);\n    const expiration = calculateExpiration(remember);\n    console.log('Calculated expiration:', {\n      remember,\n      expiration,\n      formattedTime: new Date(expiration * 1000).toLocaleString()\n    });\n\n    // 保存到 localStorage\n    localStorage.setItem(STORAGE_KEYS.TOKEN, access);\n    localStorage.setItem(STORAGE_KEYS.REFRESH_TOKEN, refresh);\n    localStorage.setItem(STORAGE_KEYS.TOKEN_EXPIRES, expiration.toString());\n    if (remember) {\n      localStorage.setItem(STORAGE_KEYS.REMEMBER_ME, 'true');\n    } else {\n      localStorage.removeItem(STORAGE_KEYS.REMEMBER_ME);\n    }\n  },\n  // 获取认证信息\n  getAuth() {\n    const access = localStorage.getItem(STORAGE_KEYS.TOKEN);\n    const refresh = localStorage.getItem(STORAGE_KEYS.REFRESH_TOKEN);\n    const expiration = localStorage.getItem(STORAGE_KEYS.TOKEN_EXPIRES);\n    const remember = localStorage.getItem(STORAGE_KEYS.REMEMBER_ME) === 'true';\n    if (!access || !refresh || !expiration) return null;\n    return {\n      access,\n      refresh,\n      expiration: parseInt(expiration) * 1000,\n      remember\n    };\n  },\n  // 清除认证信息\n  clearAuth() {\n    localStorage.removeItem(STORAGE_KEYS.TOKEN);\n    localStorage.removeItem(STORAGE_KEYS.REFRESH_TOKEN);\n    localStorage.removeItem(STORAGE_KEYS.TOKEN_EXPIRES);\n    localStorage.removeItem(STORAGE_KEYS.REMEMBER_ME);\n    localStorage.removeItem(STORAGE_KEYS.REMEMBERED_PHONE);\n    localStorage.removeItem(STORAGE_KEYS.USER_INFO);\n  },\n  // 保存账号\n  saveAccount(account, remember = false) {\n    if (remember) {\n      localStorage.setItem(STORAGE_KEYS.ACCOUNT, account);\n    } else {\n      localStorage.removeItem(STORAGE_KEYS.ACCOUNT);\n    }\n  },\n  // 获取保存的账号\n  getSavedAccount() {\n    return localStorage.getItem(STORAGE_KEYS.ACCOUNT);\n  },\n  // 获取记住的手机号\n  getRememberedPhone() {\n    return localStorage.getItem(STORAGE_KEYS.REMEMBERED_PHONE);\n  }\n};\n\n// 导出清除认证存储的函数\nexport const clearAuthStorage = () => storage.clearAuth();","map":{"version":3,"names":["calculateExpiration","STORAGE_KEYS","TOKEN","REFRESH_TOKEN","USER_INFO","TOKEN_EXPIRES","REMEMBER_ME","REMEMBERED_PHONE","ACCOUNT","storage","saveAuth","access","refresh","remember","console","log","expiration","formattedTime","Date","toLocaleString","localStorage","setItem","toString","removeItem","getAuth","getItem","parseInt","clearAuth","saveAccount","account","getSavedAccount","getRememberedPhone","clearAuthStorage"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/utils/storage.js"],"sourcesContent":["import { calculateExpiration } from './auth'\n\n// 存储键名常量\nexport const STORAGE_KEYS = {\n  TOKEN: 'token',\n  REFRESH_TOKEN: 'refresh_token',\n  USER_INFO: 'user_info',\n  TOKEN_EXPIRES: 'token_expires',\n  REMEMBER_ME: 'remember_me',\n  REMEMBERED_PHONE: 'remembered_phone',\n  ACCOUNT: 'account'\n}\n\nexport const storage = {\n  // 保存认证信息\n  saveAuth({ access, refresh }, remember = false) {\n    // 添加调试信息\n    console.log('Storage saveAuth called with remember:', remember)\n    \n    const expiration = calculateExpiration(remember)\n    console.log('Calculated expiration:', {\n      remember,\n      expiration,\n      formattedTime: new Date(expiration * 1000).toLocaleString()\n    })\n    \n    // 保存到 localStorage\n    localStorage.setItem(STORAGE_KEYS.TOKEN, access)\n    localStorage.setItem(STORAGE_KEYS.REFRESH_TOKEN, refresh)\n    localStorage.setItem(STORAGE_KEYS.TOKEN_EXPIRES, expiration.toString())\n    \n    if (remember) {\n      localStorage.setItem(STORAGE_KEYS.REMEMBER_ME, 'true')\n    } else {\n      localStorage.removeItem(STORAGE_KEYS.REMEMBER_ME)\n    }\n  },\n\n  // 获取认证信息\n  getAuth() {\n    const access = localStorage.getItem(STORAGE_KEYS.TOKEN)\n    const refresh = localStorage.getItem(STORAGE_KEYS.REFRESH_TOKEN)\n    const expiration = localStorage.getItem(STORAGE_KEYS.TOKEN_EXPIRES)\n    const remember = localStorage.getItem(STORAGE_KEYS.REMEMBER_ME) === 'true'\n    \n    if (!access || !refresh || !expiration) return null\n    \n    return {\n      access,\n      refresh,\n      expiration: parseInt(expiration) * 1000,\n      remember\n    }\n  },\n\n  // 清除认证信息\n  clearAuth() {\n    localStorage.removeItem(STORAGE_KEYS.TOKEN)\n    localStorage.removeItem(STORAGE_KEYS.REFRESH_TOKEN)\n    localStorage.removeItem(STORAGE_KEYS.TOKEN_EXPIRES)\n    localStorage.removeItem(STORAGE_KEYS.REMEMBER_ME)\n    localStorage.removeItem(STORAGE_KEYS.REMEMBERED_PHONE)\n    localStorage.removeItem(STORAGE_KEYS.USER_INFO)\n  },\n\n  // 保存账号\n  saveAccount(account, remember = false) {\n    if (remember) {\n      localStorage.setItem(STORAGE_KEYS.ACCOUNT, account)\n    } else {\n      localStorage.removeItem(STORAGE_KEYS.ACCOUNT)\n    }\n  },\n\n  // 获取保存的账号\n  getSavedAccount() {\n    return localStorage.getItem(STORAGE_KEYS.ACCOUNT)\n  },\n\n  // 获取记住的手机号\n  getRememberedPhone() {\n    return localStorage.getItem(STORAGE_KEYS.REMEMBERED_PHONE)\n  }\n}\n\n// 导出清除认证存储的函数\nexport const clearAuthStorage = () => storage.clearAuth() "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}