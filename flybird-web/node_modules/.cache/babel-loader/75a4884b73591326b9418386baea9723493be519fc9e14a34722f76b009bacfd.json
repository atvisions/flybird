{"ast":null,"code":"import _objectSpread from \"/Users/liuzhao/Documents/Projects/flybird/flybird-web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nconst config = {\n  // 开发环境配置\n  development: {\n    API_URL: 'http://192.168.3.16:8000',\n    API_PREFIX: '/api/v1',\n    MEDIA_URL: 'http://192.168.3.16:8000/media',\n    SOCKET_URL: 'ws://192.168.3.16:8000/ws'\n  },\n  // 生产环境配置\n  production: {\n    API_URL: 'http://www.flybirdx.com:8000',\n    API_PREFIX: '/api/v1',\n    MEDIA_URL: 'http://www.flybirdx.com:8000/media',\n    SOCKET_URL: 'ws://www.flybirdx.com:8000/ws'\n  },\n  // 测试环境配置\n  test: {\n    API_URL: 'http://192.168.3.16:8000',\n    API_PREFIX: '/api/v1',\n    MEDIA_URL: 'http://192.168.3.16:8000/media',\n    SOCKET_URL: 'ws://192.168.3.16:8000/ws'\n  }\n};\n\n// 获取当前环境\nconst env = process.env.NODE_ENV || 'development';\n\n// 获取当前环境的配置\nconst currentConfig = config[env];\n\n// 为了向后兼容，同时导出单独的变量\nexport const {\n  API_URL,\n  API_PREFIX,\n  MEDIA_URL,\n  SOCKET_URL\n} = currentConfig;\n\n// 导出默认配置\nexport default _objectSpread(_objectSpread({}, currentConfig), {}, {\n  // 完整的 API 基础路径\n  BASE_API_URL: `${currentConfig.API_URL}${currentConfig.API_PREFIX}`,\n  // 是否是开发环境\n  isDev: env === 'development',\n  // 是否是生产环境\n  isProd: env === 'production',\n  // 是否是测试环境\n  isTest: env === 'test'\n});","map":{"version":3,"names":["config","development","API_URL","API_PREFIX","MEDIA_URL","SOCKET_URL","production","test","env","process","NODE_ENV","currentConfig","_objectSpread","BASE_API_URL","isDev","isProd","isTest"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/config/index.js"],"sourcesContent":["const config = {\n  // 开发环境配置\n  development: {\n    API_URL: 'http://192.168.3.16:8000',\n    API_PREFIX: '/api/v1',\n    MEDIA_URL: 'http://192.168.3.16:8000/media',\n    SOCKET_URL: 'ws://192.168.3.16:8000/ws'\n  },\n  // 生产环境配置\n  production: {\n    API_URL: 'http://www.flybirdx.com:8000',\n    API_PREFIX: '/api/v1',\n    MEDIA_URL: 'http://www.flybirdx.com:8000/media',\n    SOCKET_URL: 'ws://www.flybirdx.com:8000/ws'\n  },\n  // 测试环境配置\n  test: {\n    API_URL: 'http://192.168.3.16:8000',\n    API_PREFIX: '/api/v1',\n    MEDIA_URL: 'http://192.168.3.16:8000/media',\n    SOCKET_URL: 'ws://192.168.3.16:8000/ws'\n  }\n}\n\n// 获取当前环境\nconst env = process.env.NODE_ENV || 'development'\n\n// 获取当前环境的配置\nconst currentConfig = config[env]\n\n// 为了向后兼容，同时导出单独的变量\nexport const {\n  API_URL,\n  API_PREFIX,\n  MEDIA_URL,\n  SOCKET_URL\n} = currentConfig\n\n// 导出默认配置\nexport default {\n  ...currentConfig,\n  // 完整的 API 基础路径\n  BASE_API_URL: `${currentConfig.API_URL}${currentConfig.API_PREFIX}`,\n  // 是否是开发环境\n  isDev: env === 'development',\n  // 是否是生产环境\n  isProd: env === 'production',\n  // 是否是测试环境\n  isTest: env === 'test'\n} "],"mappings":";AAAA,MAAMA,MAAM,GAAG;EACb;EACAC,WAAW,EAAE;IACXC,OAAO,EAAE,0BAA0B;IACnCC,UAAU,EAAE,SAAS;IACrBC,SAAS,EAAE,gCAAgC;IAC3CC,UAAU,EAAE;EACd,CAAC;EACD;EACAC,UAAU,EAAE;IACVJ,OAAO,EAAE,8BAA8B;IACvCC,UAAU,EAAE,SAAS;IACrBC,SAAS,EAAE,oCAAoC;IAC/CC,UAAU,EAAE;EACd,CAAC;EACD;EACAE,IAAI,EAAE;IACJL,OAAO,EAAE,0BAA0B;IACnCC,UAAU,EAAE,SAAS;IACrBC,SAAS,EAAE,gCAAgC;IAC3CC,UAAU,EAAE;EACd;AACF,CAAC;;AAED;AACA,MAAMG,GAAG,GAAGC,OAAO,CAACD,GAAG,CAACE,QAAQ,IAAI,aAAa;;AAEjD;AACA,MAAMC,aAAa,GAAGX,MAAM,CAACQ,GAAG,CAAC;;AAEjC;AACA,OAAO,MAAM;EACXN,OAAO;EACPC,UAAU;EACVC,SAAS;EACTC;AACF,CAAC,GAAGM,aAAa;;AAEjB;AACA,eAAAC,aAAA,CAAAA,aAAA,KACKD,aAAa;EAChB;EACAE,YAAY,EAAE,GAAGF,aAAa,CAACT,OAAO,GAAGS,aAAa,CAACR,UAAU,EAAE;EACnE;EACAW,KAAK,EAAEN,GAAG,KAAK,aAAa;EAC5B;EACAO,MAAM,EAAEP,GAAG,KAAK,YAAY;EAC5B;EACAQ,MAAM,EAAER,GAAG,KAAK;AAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}