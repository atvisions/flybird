{"ast":null,"code":"import { defineStore } from 'pinia';\nimport { auth } from '@/api/auth';\nimport { user } from '@/api/user';\nimport request from '@/utils/request';\nimport router from '@/router';\nimport defaultAvatar from '@/assets/images/default-avatar.png';\nexport const useUserStore = defineStore('user', {\n  state: () => ({\n    isLoggedIn: false,\n    userInfo: null,\n    rememberMe: false,\n    isLoadingUserInfo: false,\n    lastUserInfoFetch: null\n  }),\n  getters: {\n    userAvatar: state => {\n      return state.userInfo?.avatar || defaultAvatar;\n    },\n    userName: state => {\n      return state.userInfo?.username || '未设置昵称';\n    },\n    userPhone: state => {\n      return state.userInfo?.phone;\n    }\n  },\n  actions: {\n    // 登录\n    async login(credentials, rememberMe = false) {\n      try {\n        const response = await auth.loginWithPassword({\n          account: credentials.account.trim(),\n          password: credentials.password\n        });\n        if (response?.data?.code === 200) {\n          const {\n            access,\n            refresh\n          } = response.data.data;\n\n          // 存储认证信息\n          localStorage.setItem('token', access);\n          localStorage.setItem('refresh_token', refresh);\n          localStorage.setItem('token_expires_at', new Date().getTime() + (rememberMe ? 7 : 1) * 24 * 60 * 60 * 1000);\n          localStorage.setItem('remember_me', rememberMe);\n\n          // 设置请求头\n          request.defaults.headers.common['Authorization'] = `Bearer ${access}`;\n\n          // 记住账号\n          if (rememberMe) {\n            localStorage.setItem('remembered_account', credentials.account);\n          } else {\n            localStorage.removeItem('remembered_account');\n          }\n          this.isLoggedIn = true;\n          this.rememberMe = rememberMe;\n\n          // 获取用户信息\n          await this.getUserInfo();\n          return true;\n        }\n        return false;\n      } catch (error) {\n        console.error('Login failed:', error);\n        throw error;\n      }\n    },\n    // 退出登录\n    async logout() {\n      try {\n        await auth.logout();\n      } finally {\n        this.clearUserData();\n        router.push('/login');\n      }\n    },\n    // 清除用户数据\n    clearUserData() {\n      localStorage.removeItem('token');\n      localStorage.removeItem('refresh_token');\n      localStorage.removeItem('token_expires_at');\n      localStorage.removeItem('remember_me');\n      localStorage.removeItem('remembered_account');\n      localStorage.removeItem('userInfo');\n      delete request.defaults.headers.common['Authorization'];\n      this.isLoggedIn = false;\n      this.userInfo = null;\n      this.rememberMe = false;\n      this.isLoadingUserInfo = false;\n      this.lastUserInfoFetch = null;\n    },\n    // 获取用户信息\n    async getUserInfo() {\n      if (this.isLoadingUserInfo) return;\n      const now = Date.now();\n      if (this.userInfo && this.lastUserInfoFetch && now - this.lastUserInfoFetch < 5 * 60 * 1000) {\n        return this.userInfo;\n      }\n      try {\n        this.isLoadingUserInfo = true;\n        const response = await user.getUserInfo();\n        if (response?.data?.code === 200) {\n          this.userInfo = response.data.data;\n          this.lastUserInfoFetch = now;\n          return this.userInfo;\n        }\n        return null;\n      } catch (error) {\n        console.error('Get user info failed:', error);\n        throw error;\n      } finally {\n        this.isLoadingUserInfo = false;\n      }\n    },\n    // 检查 token 是否过期\n    isTokenExpired() {\n      const expiresAt = localStorage.getItem('token_expires_at');\n      if (!expiresAt) return true;\n      return new Date().getTime() > parseInt(expiresAt);\n    }\n  }\n});","map":{"version":3,"names":["defineStore","auth","user","request","router","defaultAvatar","useUserStore","state","isLoggedIn","userInfo","rememberMe","isLoadingUserInfo","lastUserInfoFetch","getters","userAvatar","avatar","userName","username","userPhone","phone","actions","login","credentials","response","loginWithPassword","account","trim","password","data","code","access","refresh","localStorage","setItem","Date","getTime","defaults","headers","common","removeItem","getUserInfo","error","console","logout","clearUserData","push","now","isTokenExpired","expiresAt","getItem","parseInt"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/stores/user.js"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { auth } from '@/api/auth'\nimport { user } from '@/api/user'\nimport request from '@/utils/request'\nimport router from '@/router'\nimport defaultAvatar from '@/assets/images/default-avatar.png'\n\nexport const useUserStore = defineStore('user', {\n  state: () => ({\n    isLoggedIn: false,\n    userInfo: null,\n    rememberMe: false,\n    isLoadingUserInfo: false,\n    lastUserInfoFetch: null\n  }),\n\n  getters: {\n    userAvatar: (state) => {\n      return state.userInfo?.avatar || defaultAvatar\n    },\n    userName: (state) => {\n      return state.userInfo?.username || '未设置昵称'\n    },\n    userPhone: (state) => {\n      return state.userInfo?.phone\n    }\n  },\n\n  actions: {\n    // 登录\n    async login(credentials, rememberMe = false) {\n      try {\n        const response = await auth.loginWithPassword({\n          account: credentials.account.trim(),\n          password: credentials.password\n        })\n        \n        if (response?.data?.code === 200) {\n          const { access, refresh } = response.data.data\n          \n          // 存储认证信息\n          localStorage.setItem('token', access)\n          localStorage.setItem('refresh_token', refresh)\n          localStorage.setItem('token_expires_at', new Date().getTime() + (rememberMe ? 7 : 1) * 24 * 60 * 60 * 1000)\n          localStorage.setItem('remember_me', rememberMe)\n          \n          // 设置请求头\n          request.defaults.headers.common['Authorization'] = `Bearer ${access}`\n          \n          // 记住账号\n          if (rememberMe) {\n            localStorage.setItem('remembered_account', credentials.account)\n          } else {\n            localStorage.removeItem('remembered_account')\n          }\n          \n          this.isLoggedIn = true\n          this.rememberMe = rememberMe\n          \n          // 获取用户信息\n          await this.getUserInfo()\n          return true\n        }\n        return false\n      } catch (error) {\n        console.error('Login failed:', error)\n        throw error\n      }\n    },\n\n    // 退出登录\n    async logout() {\n      try {\n        await auth.logout()\n      } finally {\n        this.clearUserData()\n        router.push('/login')\n      }\n    },\n\n    // 清除用户数据\n    clearUserData() {\n      localStorage.removeItem('token')\n      localStorage.removeItem('refresh_token')\n      localStorage.removeItem('token_expires_at')\n      localStorage.removeItem('remember_me')\n      localStorage.removeItem('remembered_account')\n      localStorage.removeItem('userInfo')\n      \n      delete request.defaults.headers.common['Authorization']\n      \n      this.isLoggedIn = false\n      this.userInfo = null\n      this.rememberMe = false\n      this.isLoadingUserInfo = false\n      this.lastUserInfoFetch = null\n    },\n\n    // 获取用户信息\n    async getUserInfo() {\n      if (this.isLoadingUserInfo) return\n      \n      const now = Date.now()\n      if (this.userInfo && this.lastUserInfoFetch && \n          (now - this.lastUserInfoFetch) < 5 * 60 * 1000) {\n        return this.userInfo\n      }\n\n      try {\n        this.isLoadingUserInfo = true\n        const response = await user.getUserInfo()\n        if (response?.data?.code === 200) {\n          this.userInfo = response.data.data\n          this.lastUserInfoFetch = now\n          return this.userInfo\n        }\n        return null\n      } catch (error) {\n        console.error('Get user info failed:', error)\n        throw error\n      } finally {\n        this.isLoadingUserInfo = false\n      }\n    },\n\n    // 检查 token 是否过期\n    isTokenExpired() {\n      const expiresAt = localStorage.getItem('token_expires_at')\n      if (!expiresAt) return true\n      return new Date().getTime() > parseInt(expiresAt)\n    }\n  }\n}) "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}