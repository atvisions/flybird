{"ast":null,"code":"// frontend/src/main.js\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport App from './App.vue';\nimport router from './router';\nimport './assets/css/input.css';\nimport { showToast } from '@/components/ToastMessage';\nimport ElementPlus from 'element-plus';\nimport 'element-plus/dist/index.css';\nimport { eventBus } from '@/utils/eventBus';\nimport VueCropper from 'vue-cropper';\nimport 'vue-cropper/dist/index.css';\nimport { useAuthStore } from '@/stores/auth';\nimport store from './store';\nimport config from './config';\nconst app = createApp(App);\nconst pinia = createPinia();\napp.use(pinia);\napp.use(ElementPlus);\napp.use(VueCropper);\napp.use(store);\n\n// 初始化认证状态\nawait (async () => {\n  try {\n    const authStore = useAuthStore();\n    const isAuthenticated = await authStore.initialize();\n\n    // 只有在已认证的情况下才获取用户数据\n    if (isAuthenticated) {\n      // 获取用户信息\n      try {\n        await store.dispatch('account/getUserInfo');\n      } catch (error) {\n        console.warn('获取用户信息失败:', error);\n      }\n\n      // 获取积分信息\n      try {\n        await store.dispatch('points/getPointsInfo');\n      } catch (error) {\n        console.warn('获取积分信息失败:', error);\n      }\n    }\n  } catch (error) {\n    console.error('初始化失败:', error);\n    // 非致命错误，继续运行应用\n  }\n})();\n\n// 在认证初始化后再设置路由\napp.use(router);\n\n// 添加全局 Toast 方法\napp.config.globalProperties.$toast = showToast;\nwindow.$toast = showToast; // 添加到 window 对象，供内联事件使用\n\n// 如果需要全局使用\napp.config.globalProperties.eventBus = eventBus;\napp.config.globalProperties.$config = config;\napp.mount('#app');","map":{"version":3,"names":["createApp","createPinia","App","router","showToast","ElementPlus","eventBus","VueCropper","useAuthStore","store","config","app","pinia","use","authStore","isAuthenticated","initialize","dispatch","error","console","warn","globalProperties","$toast","window","$config","mount"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/main.js"],"sourcesContent":["// frontend/src/main.js\nimport { createApp } from 'vue'\nimport { createPinia } from 'pinia'\nimport App from './App.vue'\nimport router from './router'\nimport './assets/css/input.css'\nimport { showToast } from '@/components/ToastMessage'\nimport ElementPlus from 'element-plus'\nimport 'element-plus/dist/index.css'\nimport { eventBus } from '@/utils/eventBus'\nimport VueCropper from 'vue-cropper'\nimport 'vue-cropper/dist/index.css'\nimport { useAuthStore } from '@/stores/auth'\nimport store from './store'\nimport config from './config'\n\nconst app = createApp(App)\nconst pinia = createPinia()\napp.use(pinia)\napp.use(ElementPlus)\napp.use(VueCropper)\napp.use(store)\n\n// 初始化认证状态\nawait (async () => {\n  try {\n    const authStore = useAuthStore()\n    const isAuthenticated = await authStore.initialize()\n    \n    // 只有在已认证的情况下才获取用户数据\n    if (isAuthenticated) {\n      // 获取用户信息\n      try {\n        await store.dispatch('account/getUserInfo')\n      } catch (error) {\n        console.warn('获取用户信息失败:', error)\n      }\n\n      // 获取积分信息\n      try {\n        await store.dispatch('points/getPointsInfo')\n      } catch (error) {\n        console.warn('获取积分信息失败:', error)\n      }\n    }\n  } catch (error) {\n    console.error('初始化失败:', error)\n    // 非致命错误，继续运行应用\n  }\n})()\n\n// 在认证初始化后再设置路由\napp.use(router)\n\n// 添加全局 Toast 方法\napp.config.globalProperties.$toast = showToast\nwindow.$toast = showToast  // 添加到 window 对象，供内联事件使用\n\n// 如果需要全局使用\napp.config.globalProperties.eventBus = eventBus\n\napp.config.globalProperties.$config = config\n\napp.mount('#app')"],"mappings":"AAAA;AACA,SAASA,SAAS,QAAQ,KAAK;AAC/B,SAASC,WAAW,QAAQ,OAAO;AACnC,OAAOC,GAAG,MAAM,WAAW;AAC3B,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAO,wBAAwB;AAC/B,SAASC,SAAS,QAAQ,2BAA2B;AACrD,OAAOC,WAAW,MAAM,cAAc;AACtC,OAAO,6BAA6B;AACpC,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,OAAOC,UAAU,MAAM,aAAa;AACpC,OAAO,4BAA4B;AACnC,SAASC,YAAY,QAAQ,eAAe;AAC5C,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,MAAM,MAAM,UAAU;AAE7B,MAAMC,GAAG,GAAGX,SAAS,CAACE,GAAG,CAAC;AAC1B,MAAMU,KAAK,GAAGX,WAAW,CAAC,CAAC;AAC3BU,GAAG,CAACE,GAAG,CAACD,KAAK,CAAC;AACdD,GAAG,CAACE,GAAG,CAACR,WAAW,CAAC;AACpBM,GAAG,CAACE,GAAG,CAACN,UAAU,CAAC;AACnBI,GAAG,CAACE,GAAG,CAACJ,KAAK,CAAC;;AAEd;AACA,MAAM,CAAC,YAAY;EACjB,IAAI;IACF,MAAMK,SAAS,GAAGN,YAAY,CAAC,CAAC;IAChC,MAAMO,eAAe,GAAG,MAAMD,SAAS,CAACE,UAAU,CAAC,CAAC;;IAEpD;IACA,IAAID,eAAe,EAAE;MACnB;MACA,IAAI;QACF,MAAMN,KAAK,CAACQ,QAAQ,CAAC,qBAAqB,CAAC;MAC7C,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACC,IAAI,CAAC,WAAW,EAAEF,KAAK,CAAC;MAClC;;MAEA;MACA,IAAI;QACF,MAAMT,KAAK,CAACQ,QAAQ,CAAC,sBAAsB,CAAC;MAC9C,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACC,IAAI,CAAC,WAAW,EAAEF,KAAK,CAAC;MAClC;IACF;EACF,CAAC,CAAC,OAAOA,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9B;EACF;AACF,CAAC,EAAE,CAAC;;AAEJ;AACAP,GAAG,CAACE,GAAG,CAACV,MAAM,CAAC;;AAEf;AACAQ,GAAG,CAACD,MAAM,CAACW,gBAAgB,CAACC,MAAM,GAAGlB,SAAS;AAC9CmB,MAAM,CAACD,MAAM,GAAGlB,SAAS,EAAE;;AAE3B;AACAO,GAAG,CAACD,MAAM,CAACW,gBAAgB,CAACf,QAAQ,GAAGA,QAAQ;AAE/CK,GAAG,CAACD,MAAM,CAACW,gBAAgB,CAACG,OAAO,GAAGd,MAAM;AAE5CC,GAAG,CAACc,KAAK,CAAC,MAAM,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}