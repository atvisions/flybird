{"ast":null,"code":"import request from '@/utils/request';\nexport const auth = {\n  // 密码登录\n  loginWithPassword: async function (data) {\n    try {\n      // 打印请求数据\n      console.log('Login request data:', {\n        account: data.account,\n        password: '***',\n        // 不打印实际密码\n        baseURL: request.defaults.baseURL,\n        // 打印基础URL\n        fullURL: `${request.defaults.baseURL}/api/v1/users/auth/login/password/` // 打印完整URL\n      });\n      const response = await request.post('/api/v1/users/auth/login/password/', {\n        account: data.account,\n        password: data.password\n      });\n      return this.handleLoginResponse(response);\n    } catch (error) {\n      // 打印详细错误信息\n      console.error('Login error details:', {\n        error: error,\n        isAxiosError: error.isAxiosError,\n        hasResponse: !!error.response,\n        hasRequest: !!error.request,\n        message: error.message,\n        stack: error.stack\n      });\n      if (error.response) {\n        // 服务器返回了错误响应\n        console.log('Server error response:', error.response.data);\n        throw new Error(error.response.data.message || '登录失败，请稍后重试');\n      } else if (error.request) {\n        // 请求发出但没有收到响应\n        console.log('No response received:', {\n          request: error.request,\n          config: error.config\n        });\n        throw new Error('服务器无响应，请检查网络连接');\n      } else {\n        // 请求配置有误\n        console.log('Request setup error:', {\n          config: error.config,\n          message: error.message\n        });\n        throw new Error('请求配置错误，请联系管理员');\n      }\n    }\n  },\n  // 退出登录\n  logout: async () => {\n    const refreshToken = localStorage.getItem('refresh_token');\n    if (!refreshToken) return;\n    try {\n      await request.post('/api/v1/users/auth/logout/', {\n        refresh: refreshToken\n      });\n    } finally {\n      // 清除所有相关的本地存储数据\n      localStorage.removeItem('token');\n      localStorage.removeItem('refresh_token');\n      localStorage.removeItem('token_expires_at');\n      // 清除用户相关数据\n      localStorage.removeItem('remember_me');\n      localStorage.removeItem('remembered_account');\n      localStorage.removeItem('userInfo');\n      // 清除其他可能存在的数据\n      localStorage.removeItem('isLoggedIn');\n      // 清除请求头中的 token\n      delete request.defaults.headers.common['Authorization'];\n    }\n  },\n  // 刷新 token\n  refreshToken: data => {\n    return request.post('/api/v1/users/auth/token/refresh/', data);\n  },\n  // 更新用户名（昵称）\n  updateUsername: data => {\n    return request.post('/api/v1/users/account/username/', data);\n  },\n  // 发送验证码\n  sendVerifyCode: data => {\n    return request({\n      url: '/api/v1/users/auth/sms/send/',\n      method: 'post',\n      data: {\n        phone: data.phone,\n        scene: data.scene,\n        type: 'sms'\n      }\n    });\n  },\n  // 重置密码\n  resetPassword: data => {\n    // 打印请求数据以便调试\n    console.log('Reset password request data:', {\n      phone: data.phone,\n      code: data.code,\n      new_password: '***',\n      confirm_password: '***'\n    });\n    return request({\n      url: '/api/v1/users/auth/password/reset/',\n      method: 'post',\n      data: {\n        phone: data.phone,\n        code: data.code,\n        new_password: data.new_password,\n        confirm_password: data.confirm_password\n      }\n    }).then(response => {\n      console.log('Reset password success response:', response.data);\n      return response;\n    }).catch(error => {\n      console.log('Reset password error response:', error.response?.data);\n      // 处理错误响应\n      const errorData = error.response?.data;\n      if (errorData) {\n        // 如果错误信息在 code 字段中\n        if (errorData.code && Array.isArray(errorData.code)) {\n          throw new Error(errorData.code[0]);\n        }\n        // 如果错误信息在其他字段中\n        for (const key in errorData) {\n          if (Array.isArray(errorData[key])) {\n            throw new Error(errorData[key][0]);\n          }\n        }\n        // 如果有直接的错误消息\n        if (errorData.message) {\n          throw new Error(errorData.message);\n        }\n      }\n      throw error;\n    });\n  },\n  // 注册\n  register: data => {\n    return request({\n      url: '/api/v1/users/auth/register/',\n      method: 'post',\n      data: {\n        phone: data.phone,\n        code: data.code,\n        password: data.password,\n        confirm_password: data.confirmPassword\n      }\n    });\n  },\n  handleLoginResponse(response) {\n    if (response?.data?.code === 200) {\n      const userData = response.data.data;\n      // 设置请求头的 Authorization\n      const token = userData.access;\n      if (token) {\n        request.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      }\n      return {\n        token: token,\n        refresh: userData.refresh,\n        userInfo: {\n          id: userData.id,\n          uid: userData.uid,\n          username: userData.username,\n          avatar: userData.avatar\n        }\n      };\n    }\n    console.error('Login response error:', response?.data);\n    throw new Error(response?.data?.message || '登录失败');\n  }\n};\nexport default auth;","map":{"version":3,"names":["request","auth","loginWithPassword","data","console","log","account","password","baseURL","defaults","fullURL","response","post","handleLoginResponse","error","isAxiosError","hasResponse","hasRequest","message","stack","Error","config","logout","refreshToken","localStorage","getItem","refresh","removeItem","headers","common","updateUsername","sendVerifyCode","url","method","phone","scene","type","resetPassword","code","new_password","confirm_password","then","catch","errorData","Array","isArray","key","register","confirmPassword","userData","token","access","userInfo","id","uid","username","avatar"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/api/auth.js"],"sourcesContent":["import request from '@/utils/request'\n\nexport const auth = {\n  // 密码登录\n  loginWithPassword: async function(data) {\n    try {\n      // 打印请求数据\n      console.log('Login request data:', {\n        account: data.account,\n        password: '***',  // 不打印实际密码\n        baseURL: request.defaults.baseURL,  // 打印基础URL\n        fullURL: `${request.defaults.baseURL}/api/v1/users/auth/login/password/`  // 打印完整URL\n      })\n\n      const response = await request.post('/api/v1/users/auth/login/password/', {\n        account: data.account,\n        password: data.password\n      })\n      return this.handleLoginResponse(response)\n    } catch (error) {\n      // 打印详细错误信息\n      console.error('Login error details:', {\n        error: error,\n        isAxiosError: error.isAxiosError,\n        hasResponse: !!error.response,\n        hasRequest: !!error.request,\n        message: error.message,\n        stack: error.stack\n      })\n      \n      if (error.response) {\n        // 服务器返回了错误响应\n        console.log('Server error response:', error.response.data)\n        throw new Error(error.response.data.message || '登录失败，请稍后重试')\n      } else if (error.request) {\n        // 请求发出但没有收到响应\n        console.log('No response received:', {\n          request: error.request,\n          config: error.config\n        })\n        throw new Error('服务器无响应，请检查网络连接')\n      } else {\n        // 请求配置有误\n        console.log('Request setup error:', {\n          config: error.config,\n          message: error.message\n        })\n        throw new Error('请求配置错误，请联系管理员')\n      }\n    }\n  },\n  \n  // 退出登录\n  logout: async () => {\n    const refreshToken = localStorage.getItem('refresh_token')\n    if (!refreshToken) return\n    try {\n      await request.post('/api/v1/users/auth/logout/', { refresh: refreshToken })\n    } finally {\n      // 清除所有相关的本地存储数据\n      localStorage.removeItem('token')\n      localStorage.removeItem('refresh_token')\n      localStorage.removeItem('token_expires_at')\n      // 清除用户相关数据\n      localStorage.removeItem('remember_me')\n      localStorage.removeItem('remembered_account')\n      localStorage.removeItem('userInfo')\n      // 清除其他可能存在的数据\n      localStorage.removeItem('isLoggedIn')\n      // 清除请求头中的 token\n      delete request.defaults.headers.common['Authorization']\n    }\n  },\n  \n  // 刷新 token\n  refreshToken: (data) => {\n    return request.post('/api/v1/users/auth/token/refresh/', data)\n  },\n  \n  // 更新用户名（昵称）\n  updateUsername: (data) => {\n    return request.post('/api/v1/users/account/username/', data)\n  },\n  \n  // 发送验证码\n  sendVerifyCode: (data) => {\n    return request({\n      url: '/api/v1/users/auth/sms/send/',\n      method: 'post',\n      data: {\n        phone: data.phone,\n        scene: data.scene,\n        type: 'sms'\n      }\n    })\n  },\n  \n  // 重置密码\n  resetPassword: (data) => {\n    // 打印请求数据以便调试\n    console.log('Reset password request data:', {\n      phone: data.phone,\n      code: data.code,\n      new_password: '***',\n      confirm_password: '***'\n    })\n\n    return request({\n      url: '/api/v1/users/auth/password/reset/',\n      method: 'post',\n      data: {\n        phone: data.phone,\n        code: data.code,\n        new_password: data.new_password,\n        confirm_password: data.confirm_password\n      }\n    }).then(response => {\n      console.log('Reset password success response:', response.data)\n      return response\n    }).catch(error => {\n      console.log('Reset password error response:', error.response?.data)\n      // 处理错误响应\n      const errorData = error.response?.data\n      if (errorData) {\n        // 如果错误信息在 code 字段中\n        if (errorData.code && Array.isArray(errorData.code)) {\n          throw new Error(errorData.code[0])\n        }\n        // 如果错误信息在其他字段中\n        for (const key in errorData) {\n          if (Array.isArray(errorData[key])) {\n            throw new Error(errorData[key][0])\n          }\n        }\n        // 如果有直接的错误消息\n        if (errorData.message) {\n          throw new Error(errorData.message)\n        }\n      }\n      throw error\n    })\n  },\n  \n  // 注册\n  register: (data) => {\n    return request({\n      url: '/api/v1/users/auth/register/',\n      method: 'post',\n      data: {\n        phone: data.phone,\n        code: data.code,\n        password: data.password,\n        confirm_password: data.confirmPassword\n      }\n    })\n  },\n  \n  handleLoginResponse(response) {\n    if (response?.data?.code === 200) {\n      const userData = response.data.data\n      // 设置请求头的 Authorization\n      const token = userData.access\n      if (token) {\n        request.defaults.headers.common['Authorization'] = `Bearer ${token}`\n      }\n      \n      return {\n        token: token,\n        refresh: userData.refresh,\n        userInfo: {\n          id: userData.id,\n          uid: userData.uid,\n          username: userData.username,\n          avatar: userData.avatar\n        }\n      }\n    }\n    console.error('Login response error:', response?.data)\n    throw new Error(response?.data?.message || '登录失败')\n  }\n}\n\nexport default auth "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}