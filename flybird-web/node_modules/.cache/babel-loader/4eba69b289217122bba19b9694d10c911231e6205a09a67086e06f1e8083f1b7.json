{"ast":null,"code":"import { defineStore } from 'pinia';\nimport profile from '@/api/profile';\nimport { eventBus } from '@/utils/eventBus';\nexport const useProfileStore = defineStore({\n  id: 'profile',\n  state: () => ({\n    basicInfo: null,\n    avatarUpdateTime: null\n  }),\n  getters: {\n    profileAvatar: state => {\n      const url = state.basicInfo?.avatar;\n      return url ? `${import.meta.env.VITE_API_URL}${url}` : null;\n    }\n  },\n  actions: {\n    // 清理 store 数据\n    clearStore() {\n      this.basicInfo = null;\n      this.avatarUpdateTime = null;\n      localStorage.removeItem('profile'); // 清除持久化数据\n    },\n    // 获取档案基本信息\n    async fetchBasicInfo() {\n      try {\n        // 先清理旧数据\n        this.clearStore();\n        const response = await profile.getData();\n        if (response?.data?.code === 200 && response?.data?.data?.basic_info) {\n          console.log('Fetched basicInfo:', response.data.data.basic_info);\n          this.basicInfo = response.data.data.basic_info;\n          this.avatarUpdateTime = Date.now();\n          console.log('Store state after fetch:', {\n            basicInfo: this.basicInfo,\n            avatarUpdateTime: this.avatarUpdateTime\n          });\n          return this.basicInfo;\n        }\n        return null;\n      } catch (error) {\n        console.error('获取档案基本信息失败:', error);\n        throw error;\n      }\n    },\n    // 更新头像\n    async updateAvatar(file) {\n      try {\n        const response = await profile.uploadAvatar(file);\n        if (response?.data?.code === 200) {\n          // 直接更新头像\n          if (this.basicInfo) {\n            console.log('Updating profile avatar:', response.data.data.avatar);\n            this.basicInfo.avatar = response.data.data.avatar;\n            this.avatarUpdateTime = Date.now();\n\n            // 触发头像更新事件，让社区头像也同步更新\n            eventBus.emit('avatar-updated', response.data.data.avatar);\n\n            // 重新获取档案数据以确保数据同步\n            await this.fetchBasicInfo();\n            console.log('Store state after update:', {\n              basicInfo: this.basicInfo,\n              avatarUpdateTime: this.avatarUpdateTime\n            });\n          }\n          return response;\n        }\n        throw new Error(response?.data?.message || '上传失败');\n      } catch (error) {\n        console.error('Profile avatar update error:', error);\n        throw error;\n      }\n    }\n  },\n  persist: {\n    enabled: true,\n    strategies: [{\n      key: 'profile',\n      storage: localStorage,\n      paths: ['basicInfo', 'avatarUpdateTime']\n    }]\n  }\n});","map":{"version":3,"names":["defineStore","profile","eventBus","useProfileStore","id","state","basicInfo","avatarUpdateTime","getters","profileAvatar","url","avatar","import","meta","env","VITE_API_URL","actions","clearStore","localStorage","removeItem","fetchBasicInfo","response","getData","data","code","basic_info","console","log","Date","now","error","updateAvatar","file","uploadAvatar","emit","Error","message","persist","enabled","strategies","key","storage","paths"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/stores/profile.js"],"sourcesContent":["import { defineStore } from 'pinia'\nimport profile from '@/api/profile'\nimport { eventBus } from '@/utils/eventBus'\n\nexport const useProfileStore = defineStore({\n  id: 'profile',\n  state: () => ({\n    basicInfo: null,\n    avatarUpdateTime: null\n  }),\n\n  getters: {\n    profileAvatar: (state) => {\n      const url = state.basicInfo?.avatar\n      return url ? `${import.meta.env.VITE_API_URL}${url}` : null\n    }\n  },\n\n  actions: {\n    // 清理 store 数据\n    clearStore() {\n      this.basicInfo = null\n      this.avatarUpdateTime = null\n      localStorage.removeItem('profile')  // 清除持久化数据\n    },\n\n    // 获取档案基本信息\n    async fetchBasicInfo() {\n      try {\n        // 先清理旧数据\n        this.clearStore()\n        const response = await profile.getData()\n        if (response?.data?.code === 200 && response?.data?.data?.basic_info) {\n          console.log('Fetched basicInfo:', response.data.data.basic_info)\n          this.basicInfo = response.data.data.basic_info\n          this.avatarUpdateTime = Date.now()\n          console.log('Store state after fetch:', {\n            basicInfo: this.basicInfo,\n            avatarUpdateTime: this.avatarUpdateTime\n          })\n          return this.basicInfo\n        }\n        return null\n      } catch (error) {\n        console.error('获取档案基本信息失败:', error)\n        throw error\n      }\n    },\n\n    // 更新头像\n    async updateAvatar(file) {\n      try {\n        const response = await profile.uploadAvatar(file)\n        if (response?.data?.code === 200) {\n          // 直接更新头像\n          if (this.basicInfo) {\n            console.log('Updating profile avatar:', response.data.data.avatar)\n            this.basicInfo.avatar = response.data.data.avatar\n            this.avatarUpdateTime = Date.now()\n            \n            // 触发头像更新事件，让社区头像也同步更新\n            eventBus.emit('avatar-updated', response.data.data.avatar)\n            \n            // 重新获取档案数据以确保数据同步\n            await this.fetchBasicInfo()\n            \n            console.log('Store state after update:', {\n              basicInfo: this.basicInfo,\n              avatarUpdateTime: this.avatarUpdateTime\n            })\n          }\n          return response\n        }\n        throw new Error(response?.data?.message || '上传失败')\n      } catch (error) {\n        console.error('Profile avatar update error:', error)\n        throw error\n      }\n    }\n  },\n\n  persist: {\n    enabled: true,\n    strategies: [\n      {\n        key: 'profile',\n        storage: localStorage,\n        paths: ['basicInfo', 'avatarUpdateTime']\n      }\n    ]\n  }\n}) "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}