{"ast":null,"code":"import _objectSpread from \"/Users/liuzhao/Documents/Projects/flybird/flybird-web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { createStore } from 'vuex';\nimport { STORAGE_KEYS } from '@/utils/storage';\nimport profile from '@/api/profile';\nimport { auth } from '@/api/auth';\nimport request from '@/utils/request';\nimport router from '../router';\nimport { storage } from '@/utils/storage';\nimport { getExpirationInfo } from '@/utils/auth';\nimport defaultAvatar from '@/assets/images/default-avatar.png';\nimport user from '@/api/user';\nexport default createStore({\n  state: {\n    isAuthenticated: false,\n    userInfo: null,\n    basicInfo: null,\n    completeness: null,\n    token: null,\n    refreshToken: null\n  },\n  mutations: {\n    SET_AUTH(state, isAuthenticated) {\n      state.isAuthenticated = isAuthenticated;\n    },\n    SET_USER_INFO(state, userInfo) {\n      // 深度合并更新\n      if (state.userInfo) {\n        state.userInfo = _objectSpread(_objectSpread({}, state.userInfo), {}, {\n          code: userInfo.code,\n          message: userInfo.message,\n          data: _objectSpread(_objectSpread({}, state.userInfo.data), {}, {\n            user: _objectSpread(_objectSpread({}, state.userInfo.data?.user), userInfo.data?.user)\n          }, userInfo.data)\n        });\n      } else {\n        state.userInfo = userInfo;\n      }\n    },\n    SET_BASIC_INFO(state, basicInfo) {\n      state.basicInfo = _objectSpread(_objectSpread({}, state.basicInfo), basicInfo);\n    },\n    SET_COMPLETENESS(state, completeness) {\n      state.completeness = completeness;\n    },\n    SET_AVATAR_UPDATE_TIME(state, timestamp) {\n      state.avatarUpdateTime = timestamp;\n    },\n    SET_TOKEN(state, token) {\n      state.token = token;\n      state.isAuthenticated = !!token;\n    },\n    SET_REFRESH_TOKEN(state, refreshToken) {\n      state.refreshToken = refreshToken;\n    },\n    SET_USER(state, user) {\n      state.userInfo = user;\n    },\n    SET_LOGGED_IN(state, status) {\n      state.isAuthenticated = status;\n    },\n    SET_AUTHENTICATED(state, isAuthenticated) {\n      state.isAuthenticated = isAuthenticated;\n    },\n    CLEAR_USER_INFO(state) {\n      state.userInfo = null;\n    },\n    CLEAR_BASIC_INFO(state) {\n      state.basicInfo = null;\n    },\n    UPDATE_BASIC_INFO(state, basicInfo) {\n      if (state.userInfo?.data) {\n        state.userInfo.data.basic_info = _objectSpread(_objectSpread({}, state.userInfo.data.basic_info), basicInfo);\n      }\n    },\n    UPDATE_AVATAR(state, avatarUrl) {\n      if (state.userInfo?.data?.basic_info) {\n        state.userInfo.data.basic_info.avatar = avatarUrl;\n      }\n    },\n    UPDATE_BACKGROUND(state, backgroundUrl) {\n      if (state.userInfo?.data?.basic_info) {\n        state.userInfo.data.basic_info.background = backgroundUrl;\n      }\n    }\n  },\n  getters: {\n    userAvatar: state => {\n      return state.userInfo?.data?.basic_info?.avatar || defaultAvatar;\n    },\n    userName: state => {\n      return state.userInfo?.data?.basic_info?.nickname || '未设置昵称';\n    },\n    userNickname: state => {\n      return state.userInfo?.data?.basic_info?.nickname || '未设置昵称';\n    },\n    userPhone: state => {\n      return state.userInfo?.data?.basic_info?.phone;\n    },\n    profileCompleteness: state => {\n      return state.completeness || 0;\n    }\n  },\n  actions: {\n    async checkAuth({\n      commit,\n      dispatch\n    }) {\n      try {\n        const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n        if (!token) {\n          return false;\n        }\n\n        // 设置请求头\n        request.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n        // 尝试获取用户信息来验证 token 是否有效\n        try {\n          await dispatch('fetchUserInfo');\n          commit('SET_LOGGED_IN', true);\n          return true;\n        } catch (error) {\n          if (error.response?.status === 401) {\n            // token 无效，尝试刷新\n            const refreshSuccess = await dispatch('refreshToken');\n            if (refreshSuccess) {\n              await dispatch('fetchUserInfo');\n              commit('SET_LOGGED_IN', true);\n              return true;\n            }\n          }\n          return false;\n        }\n      } catch (error) {\n        console.error('Auth check failed:', error);\n        return false;\n      }\n    },\n    async fetchUserInfo({\n      commit,\n      state\n    }) {\n      try {\n        const response = await auth.getUserInfo();\n        if (response.code === 200) {\n          commit('SET_USER_INFO', response);\n          return response.data;\n        }\n      } catch (error) {\n        console.error('获取用户信息失败:', error);\n        throw error;\n      }\n    },\n    async updateBasicInfo({\n      commit\n    }, {\n      type,\n      data\n    }) {\n      try {\n        let response;\n        if (type === 'avatar') {\n          response = await profile.uploadAvatar(data);\n        } else if (type === 'background') {\n          response = await profile.uploadBackground(data);\n        } else if (type === 'basic') {\n          response = await profile.updateModule('basic_info', data);\n        } else {\n          throw new Error('未知的更新类型');\n        }\n        if (response?.data?.code === 200) {\n          if (type === 'avatar' || type === 'background') {\n            commit('SET_AVATAR_UPDATE_TIME', Date.now());\n          }\n          if (type === 'basic') {\n            commit('UPDATE_BASIC_INFO', response.data.data);\n          } else {\n            const {\n              user,\n              basic_info\n            } = response.data.data;\n            if (user) {\n              commit('SET_USER_INFO', user);\n            }\n            if (basic_info) {\n              commit('SET_BASIC_INFO', basic_info);\n            }\n          }\n          return response;\n        }\n        throw new Error(response?.data?.message || '更新失败');\n      } catch (error) {\n        console.error('Failed to update basic info:', error);\n        throw error;\n      }\n    },\n    async logout({\n      commit\n    }) {\n      try {\n        await auth.logout();\n      } catch (error) {\n        console.error('Logout failed:', error);\n      } finally {\n        // 清理状态\n        commit('SET_TOKEN', null);\n        commit('SET_REFRESH_TOKEN', null);\n        commit('SET_USER', null);\n        commit('SET_LOGGED_IN', false);\n        commit('CLEAR_USER_INFO');\n        commit('CLEAR_BASIC_INFO');\n\n        // 使用 storage 服务清除认证信息\n        storage.clearAuth();\n\n        // 清除请求头\n        delete request.defaults.headers.common['Authorization'];\n\n        // 跳转到登录页\n        router.push('/login');\n      }\n    },\n    async fetchCompleteness({\n      commit\n    }) {\n      try {\n        const response = await profile.getCompleteness();\n        if (response.data?.code === 200) {\n          commit('SET_COMPLETENESS', response.data);\n          return response.data;\n        }\n      } catch (error) {\n        console.error('获取完整度失败:', error);\n      }\n    },\n    async login({\n      commit\n    }, {\n      access,\n      refresh,\n      rememberMe = false\n    }) {\n      try {\n        // 使用 storage 服务保存认证信息，它会处理过期时间\n        storage.saveAuth({\n          access,\n          refresh\n        }, rememberMe);\n\n        // 设置请求头\n        request.defaults.headers.common['Authorization'] = `Bearer ${access}`;\n\n        // 更新 store 状态\n        commit('SET_TOKEN', access);\n        commit('SET_REFRESH_TOKEN', refresh);\n        commit('SET_LOGGED_IN', true);\n\n        // 获取用户信息\n        try {\n          const userInfoResponse = await this.dispatch('fetchUserInfo');\n          if (userInfoResponse?.data?.user && rememberMe) {\n            storage.savePhone(userInfoResponse.data.user.phone, true);\n          }\n        } catch (error) {\n          console.warn('获取用户信息失败，但不影响登录状态:', error);\n        }\n      } catch (error) {\n        console.error('登录失败:', error);\n        throw error;\n      }\n    },\n    async refreshToken({\n      commit,\n      state\n    }) {\n      try {\n        const refreshToken = localStorage.getItem(STORAGE_KEYS.REFRESH_TOKEN);\n        if (!refreshToken) {\n          throw new Error('No refresh token');\n        }\n        const response = await auth.refreshToken({\n          refresh: refreshToken\n        });\n        if (response.data?.code === 200) {\n          const {\n            access\n          } = response.data.data;\n\n          // 使用 storage 服务保存认证信息\n          // 保持原有的记住我状态\n          const rememberMe = localStorage.getItem(STORAGE_KEYS.REMEMBER_ME) === 'true';\n          storage.saveAuth({\n            access,\n            refresh: refreshToken // 保持原有的 refresh token\n          }, rememberMe);\n\n          // 更新 store 状态\n          commit('SET_TOKEN', access);\n          return true;\n        }\n        return false;\n      } catch (error) {\n        console.error('Token refresh failed:', error);\n        // 清除所有认证状态\n        commit('SET_TOKEN', null);\n        commit('SET_REFRESH_TOKEN', null);\n        commit('SET_USER', null);\n        commit('SET_LOGGED_IN', false);\n\n        // 使用 storage 服务清除认证信息\n        storage.clearAuth();\n        return false;\n      }\n    },\n    async updateAvatar({\n      commit\n    }, formData) {\n      try {\n        const response = await profile.uploadAvatar(formData);\n        if (response.data?.code === 200) {\n          const avatarUrl = response.data.data.avatar;\n          commit('UPDATE_AVATAR', avatarUrl);\n          return avatarUrl;\n        }\n        throw new Error(response.data?.message || '更新头像失败');\n      } catch (error) {\n        console.error('Failed to update avatar:', error);\n        throw error;\n      }\n    },\n    async updateBackground({\n      commit\n    }, formData) {\n      try {\n        const response = await profile.uploadBackground(formData);\n        if (response.data?.code === 200) {\n          const backgroundUrl = response.data.data.background;\n          commit('UPDATE_BACKGROUND', backgroundUrl);\n          return backgroundUrl;\n        }\n        throw new Error(response.data?.message || '更新背景图失败');\n      } catch (error) {\n        console.error('Failed to update background:', error);\n        throw error;\n      }\n    },\n    async fetchUserInfo({\n      commit\n    }) {\n      try {\n        const response = await auth.getUserInfo();\n        if (response.code === 200) {\n          commit('SET_USER_INFO', response);\n          return response.data;\n        }\n      } catch (error) {\n        console.error('获取用户信息失败:', error);\n        throw error;\n      }\n    },\n    async getUserInfo({\n      commit\n    }) {\n      try {\n        const response = await user.getUserInfo();\n        if (response.data?.code === 200) {\n          commit('SET_USER_INFO', response.data);\n        }\n        return response;\n      } catch (error) {\n        console.error('获取用户信息失败:', error);\n        throw error;\n      }\n    }\n  }\n});","map":{"version":3,"names":["createStore","STORAGE_KEYS","profile","auth","request","router","storage","getExpirationInfo","defaultAvatar","user","state","isAuthenticated","userInfo","basicInfo","completeness","token","refreshToken","mutations","SET_AUTH","SET_USER_INFO","_objectSpread","code","message","data","SET_BASIC_INFO","SET_COMPLETENESS","SET_AVATAR_UPDATE_TIME","timestamp","avatarUpdateTime","SET_TOKEN","SET_REFRESH_TOKEN","SET_USER","SET_LOGGED_IN","status","SET_AUTHENTICATED","CLEAR_USER_INFO","CLEAR_BASIC_INFO","UPDATE_BASIC_INFO","basic_info","UPDATE_AVATAR","avatarUrl","avatar","UPDATE_BACKGROUND","backgroundUrl","background","getters","userAvatar","userName","nickname","userNickname","userPhone","phone","profileCompleteness","actions","checkAuth","commit","dispatch","localStorage","getItem","TOKEN","defaults","headers","common","error","response","refreshSuccess","console","fetchUserInfo","getUserInfo","updateBasicInfo","type","uploadAvatar","uploadBackground","updateModule","Error","Date","now","logout","clearAuth","push","fetchCompleteness","getCompleteness","login","access","refresh","rememberMe","saveAuth","userInfoResponse","savePhone","warn","REFRESH_TOKEN","REMEMBER_ME","updateAvatar","formData","updateBackground"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\nimport { STORAGE_KEYS } from '@/utils/storage'\nimport profile from '@/api/profile'\nimport { auth } from '@/api/auth'\nimport request from '@/utils/request'\nimport router from '../router'\nimport { storage } from '@/utils/storage'\nimport { getExpirationInfo } from '@/utils/auth'\nimport defaultAvatar from '@/assets/images/default-avatar.png'\nimport user from '@/api/user'\n\nexport default createStore({\n  state: {\n    isAuthenticated: false,\n    userInfo: null,\n    basicInfo: null,\n    completeness: null,\n    token: null,\n    refreshToken: null\n  },\n\n  mutations: {\n    SET_AUTH(state, isAuthenticated) {\n      state.isAuthenticated = isAuthenticated\n    },\n\n    SET_USER_INFO(state, userInfo) {\n      // 深度合并更新\n      if (state.userInfo) {\n        state.userInfo = {\n          ...state.userInfo,\n          code: userInfo.code,\n          message: userInfo.message,\n          data: {\n            ...state.userInfo.data,\n            user: {\n              ...state.userInfo.data?.user,\n              ...userInfo.data?.user\n            },\n            ...userInfo.data\n          }\n        }\n      } else {\n        state.userInfo = userInfo\n      }\n    },\n\n    SET_BASIC_INFO(state, basicInfo) {\n      state.basicInfo = {\n        ...state.basicInfo,\n        ...basicInfo\n      }\n    },\n\n    SET_COMPLETENESS(state, completeness) {\n      state.completeness = completeness\n    },\n\n    SET_AVATAR_UPDATE_TIME(state, timestamp) {\n      state.avatarUpdateTime = timestamp\n    },\n\n    SET_TOKEN(state, token) {\n      state.token = token\n      state.isAuthenticated = !!token\n    },\n\n    SET_REFRESH_TOKEN(state, refreshToken) {\n      state.refreshToken = refreshToken\n    },\n\n    SET_USER(state, user) {\n      state.userInfo = user\n    },\n\n    SET_LOGGED_IN(state, status) {\n      state.isAuthenticated = status\n    },\n\n    SET_AUTHENTICATED(state, isAuthenticated) {\n      state.isAuthenticated = isAuthenticated\n    },\n\n    CLEAR_USER_INFO(state) {\n      state.userInfo = null\n    },\n\n    CLEAR_BASIC_INFO(state) {\n      state.basicInfo = null\n    },\n\n    UPDATE_BASIC_INFO(state, basicInfo) {\n      if (state.userInfo?.data) {\n        state.userInfo.data.basic_info = {\n          ...state.userInfo.data.basic_info,\n          ...basicInfo\n        }\n      }\n    },\n\n    UPDATE_AVATAR(state, avatarUrl) {\n      if (state.userInfo?.data?.basic_info) {\n        state.userInfo.data.basic_info.avatar = avatarUrl\n      }\n    },\n\n    UPDATE_BACKGROUND(state, backgroundUrl) {\n      if (state.userInfo?.data?.basic_info) {\n        state.userInfo.data.basic_info.background = backgroundUrl\n      }\n    }\n  },\n\n  getters: {\n    userAvatar: state => {\n      return state.userInfo?.data?.basic_info?.avatar || defaultAvatar\n    },\n\n    userName: state => {\n      return state.userInfo?.data?.basic_info?.nickname || '未设置昵称'\n    },\n\n    userNickname: state => {\n      return state.userInfo?.data?.basic_info?.nickname || '未设置昵称'\n    },\n\n    userPhone: state => {\n      return state.userInfo?.data?.basic_info?.phone\n    },\n\n    profileCompleteness: state => {\n      return state.completeness || 0\n    }\n  },\n\n  actions: {\n    async checkAuth({ commit, dispatch }) {\n      try {\n        const token = localStorage.getItem(STORAGE_KEYS.TOKEN)\n        if (!token) {\n          return false\n        }\n\n        // 设置请求头\n        request.defaults.headers.common['Authorization'] = `Bearer ${token}`\n        \n        // 尝试获取用户信息来验证 token 是否有效\n        try {\n          await dispatch('fetchUserInfo')\n          commit('SET_LOGGED_IN', true)\n          return true\n        } catch (error) {\n          if (error.response?.status === 401) {\n            // token 无效，尝试刷新\n            const refreshSuccess = await dispatch('refreshToken')\n            if (refreshSuccess) {\n              await dispatch('fetchUserInfo')\n              commit('SET_LOGGED_IN', true)\n              return true\n            }\n          }\n          return false\n        }\n      } catch (error) {\n        console.error('Auth check failed:', error)\n        return false\n      }\n    },\n\n    async fetchUserInfo({ commit, state }) {\n      try {\n        const response = await auth.getUserInfo()\n        \n        if (response.code === 200) {\n          commit('SET_USER_INFO', response)\n          return response.data\n        }\n      } catch (error) {\n        console.error('获取用户信息失败:', error)\n        throw error\n      }\n    },\n\n    async updateBasicInfo({ commit }, { type, data }) {\n      try {\n        let response\n        if (type === 'avatar') {\n          response = await profile.uploadAvatar(data)\n        } else if (type === 'background') {\n          response = await profile.uploadBackground(data)\n        } else if (type === 'basic') {\n          response = await profile.updateModule('basic_info', data)\n        } else {\n          throw new Error('未知的更新类型')\n        }\n\n        if (response?.data?.code === 200) {\n          if (type === 'avatar' || type === 'background') {\n            commit('SET_AVATAR_UPDATE_TIME', Date.now())\n          }\n          if (type === 'basic') {\n            commit('UPDATE_BASIC_INFO', response.data.data)\n          } else {\n            const { user, basic_info } = response.data.data\n            if (user) {\n              commit('SET_USER_INFO', user)\n            }\n            if (basic_info) {\n              commit('SET_BASIC_INFO', basic_info)\n            }\n          }\n          return response\n        }\n        throw new Error(response?.data?.message || '更新失败')\n      } catch (error) {\n        console.error('Failed to update basic info:', error)\n        throw error\n      }\n    },\n\n    async logout({ commit }) {\n      try {\n        await auth.logout()\n      } catch (error) {\n        console.error('Logout failed:', error)\n      } finally {\n        // 清理状态\n        commit('SET_TOKEN', null)\n        commit('SET_REFRESH_TOKEN', null)\n        commit('SET_USER', null)\n        commit('SET_LOGGED_IN', false)\n        commit('CLEAR_USER_INFO')\n        commit('CLEAR_BASIC_INFO')\n        \n        // 使用 storage 服务清除认证信息\n        storage.clearAuth()\n        \n        // 清除请求头\n        delete request.defaults.headers.common['Authorization']\n        \n        // 跳转到登录页\n        router.push('/login')\n      }\n    },\n\n    async fetchCompleteness({ commit }) {\n      try {\n        const response = await profile.getCompleteness()\n        if (response.data?.code === 200) {\n          commit('SET_COMPLETENESS', response.data)\n          return response.data\n        }\n      } catch (error) {\n        console.error('获取完整度失败:', error)\n      }\n    },\n\n    async login({ commit }, { access, refresh, rememberMe = false }) {\n      try {\n        // 使用 storage 服务保存认证信息，它会处理过期时间\n        storage.saveAuth({ access, refresh }, rememberMe)\n        \n        // 设置请求头\n        request.defaults.headers.common['Authorization'] = `Bearer ${access}`\n        \n        // 更新 store 状态\n        commit('SET_TOKEN', access)\n        commit('SET_REFRESH_TOKEN', refresh)\n        commit('SET_LOGGED_IN', true)\n\n        // 获取用户信息\n        try {\n          const userInfoResponse = await this.dispatch('fetchUserInfo')\n          if (userInfoResponse?.data?.user && rememberMe) {\n            storage.savePhone(userInfoResponse.data.user.phone, true)\n          }\n        } catch (error) {\n          console.warn('获取用户信息失败，但不影响登录状态:', error)\n        }\n      } catch (error) {\n        console.error('登录失败:', error)\n        throw error\n      }\n    },\n\n    async refreshToken({ commit, state }) {\n      try {\n        const refreshToken = localStorage.getItem(STORAGE_KEYS.REFRESH_TOKEN)\n        if (!refreshToken) {\n          throw new Error('No refresh token')\n        }\n\n        const response = await auth.refreshToken({ refresh: refreshToken })\n        \n        if (response.data?.code === 200) {\n          const { access } = response.data.data\n          \n          // 使用 storage 服务保存认证信息\n          // 保持原有的记住我状态\n          const rememberMe = localStorage.getItem(STORAGE_KEYS.REMEMBER_ME) === 'true'\n          storage.saveAuth({ \n            access, \n            refresh: refreshToken  // 保持原有的 refresh token\n          }, rememberMe)\n          \n          // 更新 store 状态\n          commit('SET_TOKEN', access)\n          \n          return true\n        }\n        return false\n      } catch (error) {\n        console.error('Token refresh failed:', error)\n        // 清除所有认证状态\n        commit('SET_TOKEN', null)\n        commit('SET_REFRESH_TOKEN', null)\n        commit('SET_USER', null)\n        commit('SET_LOGGED_IN', false)\n        \n        // 使用 storage 服务清除认证信息\n        storage.clearAuth()\n        \n        return false\n      }\n    },\n\n    async updateAvatar({ commit }, formData) {\n      try {\n        const response = await profile.uploadAvatar(formData)\n        if (response.data?.code === 200) {\n          const avatarUrl = response.data.data.avatar\n          commit('UPDATE_AVATAR', avatarUrl)\n          return avatarUrl\n        }\n        throw new Error(response.data?.message || '更新头像失败')\n      } catch (error) {\n        console.error('Failed to update avatar:', error)\n        throw error\n      }\n    },\n\n    async updateBackground({ commit }, formData) {\n      try {\n        const response = await profile.uploadBackground(formData)\n        if (response.data?.code === 200) {\n          const backgroundUrl = response.data.data.background\n          commit('UPDATE_BACKGROUND', backgroundUrl)\n          return backgroundUrl\n        }\n        throw new Error(response.data?.message || '更新背景图失败')\n      } catch (error) {\n        console.error('Failed to update background:', error)\n        throw error\n      }\n    },\n\n    async fetchUserInfo({ commit }) {\n      try {\n        const response = await auth.getUserInfo()\n        \n        if (response.code === 200) {\n          commit('SET_USER_INFO', response)\n          return response.data\n        }\n      } catch (error) {\n        console.error('获取用户信息失败:', error)\n        throw error\n      }\n    },\n\n    async getUserInfo({ commit }) {\n      try {\n        const response = await user.getUserInfo()\n        if (response.data?.code === 200) {\n          commit('SET_USER_INFO', response.data)\n        }\n        return response\n      } catch (error) {\n        console.error('获取用户信息失败:', error)\n        throw error\n      }\n    }\n  }\n})"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}