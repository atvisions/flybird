{"ast":null,"code":"import { defineStore } from 'pinia';\nimport profile from '@/api/profile';\nexport const useProfileStore = defineStore({\n  id: 'profile',\n  state: () => ({\n    basicInfo: null,\n    avatarUpdateTime: null\n  }),\n  getters: {\n    // 获取职业头像的完整 URL\n    profileAvatarUrl: state => {\n      const avatar = state.basicInfo?.avatar;\n      if (!avatar) return null;\n      return avatar.startsWith('http') ? avatar : `${import.meta.env.VITE_API_URL}${avatar}`;\n    }\n  },\n  actions: {\n    // 更新职业头像\n    async updateProfileAvatar(file) {\n      try {\n        const response = await profile.uploadAvatar(file);\n        if (response?.data?.code === 200) {\n          const avatarUrl = response.data.data.avatar;\n\n          // 更新 store 状态\n          if (!this.basicInfo) {\n            this.basicInfo = {};\n          }\n          this.basicInfo.avatar = avatarUrl;\n          this.avatarUpdateTime = Date.now();\n          return response;\n        }\n        throw new Error(response?.data?.message || '上传失败');\n      } catch (error) {\n        console.error('职业头像上传失败:', error);\n        throw error;\n      }\n    },\n    // 获取档案基本信息\n    async fetchBasicInfo() {\n      try {\n        const response = await profile.getData();\n        if (response?.data?.code === 200 && response?.data?.data?.basic_info) {\n          this.basicInfo = response.data.data.basic_info;\n          this.avatarUpdateTime = Date.now();\n          return this.basicInfo;\n        }\n        return null;\n      } catch (error) {\n        console.error('获取档案基本信息失败:', error);\n        throw error;\n      }\n    }\n  },\n  persist: {\n    enabled: true,\n    strategies: [{\n      key: 'profile',\n      storage: localStorage,\n      paths: ['basicInfo', 'avatarUpdateTime']\n    }]\n  }\n});","map":{"version":3,"names":["defineStore","profile","useProfileStore","id","state","basicInfo","avatarUpdateTime","getters","profileAvatarUrl","avatar","startsWith","import","meta","env","VITE_API_URL","actions","updateProfileAvatar","file","response","uploadAvatar","data","code","avatarUrl","Date","now","Error","message","error","console","fetchBasicInfo","getData","basic_info","persist","enabled","strategies","key","storage","localStorage","paths"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/stores/profile.js"],"sourcesContent":["import { defineStore } from 'pinia'\nimport profile from '@/api/profile'\n\nexport const useProfileStore = defineStore({\n  id: 'profile',\n  state: () => ({\n    basicInfo: null,\n    avatarUpdateTime: null\n  }),\n\n  getters: {\n    // 获取职业头像的完整 URL\n    profileAvatarUrl: (state) => {\n      const avatar = state.basicInfo?.avatar\n      if (!avatar) return null\n      return avatar.startsWith('http') ? avatar : `${import.meta.env.VITE_API_URL}${avatar}`\n    }\n  },\n\n  actions: {\n    // 更新职业头像\n    async updateProfileAvatar(file) {\n      try {\n        const response = await profile.uploadAvatar(file)\n        if (response?.data?.code === 200) {\n          const avatarUrl = response.data.data.avatar\n          \n          // 更新 store 状态\n          if (!this.basicInfo) {\n            this.basicInfo = {}\n          }\n          this.basicInfo.avatar = avatarUrl\n          this.avatarUpdateTime = Date.now()\n          \n          return response\n        }\n        throw new Error(response?.data?.message || '上传失败')\n      } catch (error) {\n        console.error('职业头像上传失败:', error)\n        throw error\n      }\n    },\n\n    // 获取档案基本信息\n    async fetchBasicInfo() {\n      try {\n        const response = await profile.getData()\n        if (response?.data?.code === 200 && response?.data?.data?.basic_info) {\n          this.basicInfo = response.data.data.basic_info\n          this.avatarUpdateTime = Date.now()\n          return this.basicInfo\n        }\n        return null\n      } catch (error) {\n        console.error('获取档案基本信息失败:', error)\n        throw error\n      }\n    }\n  },\n\n  persist: {\n    enabled: true,\n    strategies: [\n      {\n        key: 'profile',\n        storage: localStorage,\n        paths: ['basicInfo', 'avatarUpdateTime']\n      }\n    ]\n  }\n}) "],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,OAAOC,OAAO,MAAM,eAAe;AAEnC,OAAO,MAAMC,eAAe,GAAGF,WAAW,CAAC;EACzCG,EAAE,EAAE,SAAS;EACbC,KAAK,EAAEA,CAAA,MAAO;IACZC,SAAS,EAAE,IAAI;IACfC,gBAAgB,EAAE;EACpB,CAAC,CAAC;EAEFC,OAAO,EAAE;IACP;IACAC,gBAAgB,EAAGJ,KAAK,IAAK;MAC3B,MAAMK,MAAM,GAAGL,KAAK,CAACC,SAAS,EAAEI,MAAM;MACtC,IAAI,CAACA,MAAM,EAAE,OAAO,IAAI;MACxB,OAAOA,MAAM,CAACC,UAAU,CAAC,MAAM,CAAC,GAAGD,MAAM,GAAG,GAAGE,MAAM,CAACC,IAAI,CAACC,GAAG,CAACC,YAAY,GAAGL,MAAM,EAAE;IACxF;EACF,CAAC;EAEDM,OAAO,EAAE;IACP;IACA,MAAMC,mBAAmBA,CAACC,IAAI,EAAE;MAC9B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMjB,OAAO,CAACkB,YAAY,CAACF,IAAI,CAAC;QACjD,IAAIC,QAAQ,EAAEE,IAAI,EAAEC,IAAI,KAAK,GAAG,EAAE;UAChC,MAAMC,SAAS,GAAGJ,QAAQ,CAACE,IAAI,CAACA,IAAI,CAACX,MAAM;;UAE3C;UACA,IAAI,CAAC,IAAI,CAACJ,SAAS,EAAE;YACnB,IAAI,CAACA,SAAS,GAAG,CAAC,CAAC;UACrB;UACA,IAAI,CAACA,SAAS,CAACI,MAAM,GAAGa,SAAS;UACjC,IAAI,CAAChB,gBAAgB,GAAGiB,IAAI,CAACC,GAAG,CAAC,CAAC;UAElC,OAAON,QAAQ;QACjB;QACA,MAAM,IAAIO,KAAK,CAACP,QAAQ,EAAEE,IAAI,EAAEM,OAAO,IAAI,MAAM,CAAC;MACpD,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;QACjC,MAAMA,KAAK;MACb;IACF,CAAC;IAED;IACA,MAAME,cAAcA,CAAA,EAAG;MACrB,IAAI;QACF,MAAMX,QAAQ,GAAG,MAAMjB,OAAO,CAAC6B,OAAO,CAAC,CAAC;QACxC,IAAIZ,QAAQ,EAAEE,IAAI,EAAEC,IAAI,KAAK,GAAG,IAAIH,QAAQ,EAAEE,IAAI,EAAEA,IAAI,EAAEW,UAAU,EAAE;UACpE,IAAI,CAAC1B,SAAS,GAAGa,QAAQ,CAACE,IAAI,CAACA,IAAI,CAACW,UAAU;UAC9C,IAAI,CAACzB,gBAAgB,GAAGiB,IAAI,CAACC,GAAG,CAAC,CAAC;UAClC,OAAO,IAAI,CAACnB,SAAS;QACvB;QACA,OAAO,IAAI;MACb,CAAC,CAAC,OAAOsB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;QACnC,MAAMA,KAAK;MACb;IACF;EACF,CAAC;EAEDK,OAAO,EAAE;IACPC,OAAO,EAAE,IAAI;IACbC,UAAU,EAAE,CACV;MACEC,GAAG,EAAE,SAAS;MACdC,OAAO,EAAEC,YAAY;MACrBC,KAAK,EAAE,CAAC,WAAW,EAAE,kBAAkB;IACzC,CAAC;EAEL;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}