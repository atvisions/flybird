{"ast":null,"code":"/**\n * 格式化日期\n * @param {Date|string} date - 日期对象或日期字符串\n * @param {string} format - 格式化模式，默认为 'YYYY-MM-DD'\n * @returns {string} 格式化后的日期字符串\n */\nexport const formatDate = (date, format = 'YYYY-MM-DD') => {\n  if (!date) return '';\n  const d = new Date(date);\n  if (isNaN(d.getTime())) return '';\n  const year = d.getFullYear();\n  const month = String(d.getMonth() + 1).padStart(2, '0');\n  const day = String(d.getDate()).padStart(2, '0');\n  const hours = String(d.getHours()).padStart(2, '0');\n  const minutes = String(d.getMinutes()).padStart(2, '0');\n  const seconds = String(d.getSeconds()).padStart(2, '0');\n  return format.replace('YYYY', year).replace('MM', month).replace('DD', day).replace('HH', hours).replace('mm', minutes).replace('ss', seconds);\n};\n\n/**\n * 格式化相对时间\n * @param {Date|string} date - 日期对象或日期字符串\n * @returns {string} 相对时间字符串\n */\nexport const formatRelativeTime = date => {\n  if (!date) return '';\n  const d = new Date(date);\n  if (isNaN(d.getTime())) return '';\n  const now = new Date();\n  const diff = now - d;\n  const seconds = Math.floor(diff / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n  if (days > 365) {\n    return formatDate(date, 'YYYY-MM-DD');\n  } else if (days > 30) {\n    return `${Math.floor(days / 30)}个月前`;\n  } else if (days > 0) {\n    return `${days}天前`;\n  } else if (hours > 0) {\n    return `${hours}小时前`;\n  } else if (minutes > 0) {\n    return `${minutes}分钟前`;\n  } else {\n    return '刚刚';\n  }\n};\n\n/**\n * 格式化日期范围\n * @param {Date|string} startDate - 开始日期\n * @param {Date|string} endDate - 结束日期\n * @returns {string} 格式化后的日期范围字符串\n */\nexport const formatDateRange = (startDate, endDate) => {\n  if (!startDate || !endDate) return '';\n  const start = formatDate(startDate);\n  const end = formatDate(endDate);\n  return `${start} 至 ${end}`;\n};\n\n/**\n * 获取日期是星期几\n * @param {Date|string} date - 日期对象或日期字符串\n * @returns {string} 星期几\n */\nexport const getWeekDay = date => {\n  if (!date) return '';\n  const d = new Date(date);\n  if (isNaN(d.getTime())) return '';\n  const weekDays = ['日', '一', '二', '三', '四', '五', '六'];\n  return `星期${weekDays[d.getDay()]}`;\n};\n\n/**\n * 格式化剩余时间\n * @param {Date|string} endDate - 结束日期\n * @returns {string} 剩余时间字符串\n */\nexport const formatRemainingTime = endDate => {\n  if (!endDate) return '';\n  const end = new Date(endDate);\n  if (isNaN(end.getTime())) return '';\n  const now = new Date();\n  const diff = end - now;\n  if (diff <= 0) return '已过期';\n  const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n  const hours = Math.floor(diff % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n  if (days > 0) {\n    return `剩余 ${days} 天`;\n  } else if (hours > 0) {\n    return `剩余 ${hours} 小时`;\n  } else {\n    return '即将过期';\n  }\n};","map":{"version":3,"names":["formatDate","date","format","d","Date","isNaN","getTime","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","replace","formatRelativeTime","now","diff","Math","floor","days","formatDateRange","startDate","endDate","start","end","getWeekDay","weekDays","getDay","formatRemainingTime"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/utils/date.js"],"sourcesContent":["/**\n * 格式化日期\n * @param {Date|string} date - 日期对象或日期字符串\n * @param {string} format - 格式化模式，默认为 'YYYY-MM-DD'\n * @returns {string} 格式化后的日期字符串\n */\nexport const formatDate = (date, format = 'YYYY-MM-DD') => {\n  if (!date) return ''\n  \n  const d = new Date(date)\n  if (isNaN(d.getTime())) return ''\n\n  const year = d.getFullYear()\n  const month = String(d.getMonth() + 1).padStart(2, '0')\n  const day = String(d.getDate()).padStart(2, '0')\n  const hours = String(d.getHours()).padStart(2, '0')\n  const minutes = String(d.getMinutes()).padStart(2, '0')\n  const seconds = String(d.getSeconds()).padStart(2, '0')\n\n  return format\n    .replace('YYYY', year)\n    .replace('MM', month)\n    .replace('DD', day)\n    .replace('HH', hours)\n    .replace('mm', minutes)\n    .replace('ss', seconds)\n}\n\n/**\n * 格式化相对时间\n * @param {Date|string} date - 日期对象或日期字符串\n * @returns {string} 相对时间字符串\n */\nexport const formatRelativeTime = (date) => {\n  if (!date) return ''\n  \n  const d = new Date(date)\n  if (isNaN(d.getTime())) return ''\n\n  const now = new Date()\n  const diff = now - d\n  const seconds = Math.floor(diff / 1000)\n  const minutes = Math.floor(seconds / 60)\n  const hours = Math.floor(minutes / 60)\n  const days = Math.floor(hours / 24)\n\n  if (days > 365) {\n    return formatDate(date, 'YYYY-MM-DD')\n  } else if (days > 30) {\n    return `${Math.floor(days / 30)}个月前`\n  } else if (days > 0) {\n    return `${days}天前`\n  } else if (hours > 0) {\n    return `${hours}小时前`\n  } else if (minutes > 0) {\n    return `${minutes}分钟前`\n  } else {\n    return '刚刚'\n  }\n}\n\n/**\n * 格式化日期范围\n * @param {Date|string} startDate - 开始日期\n * @param {Date|string} endDate - 结束日期\n * @returns {string} 格式化后的日期范围字符串\n */\nexport const formatDateRange = (startDate, endDate) => {\n  if (!startDate || !endDate) return ''\n  \n  const start = formatDate(startDate)\n  const end = formatDate(endDate)\n  \n  return `${start} 至 ${end}`\n}\n\n/**\n * 获取日期是星期几\n * @param {Date|string} date - 日期对象或日期字符串\n * @returns {string} 星期几\n */\nexport const getWeekDay = (date) => {\n  if (!date) return ''\n  \n  const d = new Date(date)\n  if (isNaN(d.getTime())) return ''\n\n  const weekDays = ['日', '一', '二', '三', '四', '五', '六']\n  return `星期${weekDays[d.getDay()]}`\n}\n\n/**\n * 格式化剩余时间\n * @param {Date|string} endDate - 结束日期\n * @returns {string} 剩余时间字符串\n */\nexport const formatRemainingTime = (endDate) => {\n  if (!endDate) return ''\n  \n  const end = new Date(endDate)\n  if (isNaN(end.getTime())) return ''\n\n  const now = new Date()\n  const diff = end - now\n  \n  if (diff <= 0) return '已过期'\n  \n  const days = Math.floor(diff / (1000 * 60 * 60 * 24))\n  const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n  \n  if (days > 0) {\n    return `剩余 ${days} 天`\n  } else if (hours > 0) {\n    return `剩余 ${hours} 小时`\n  } else {\n    return '即将过期'\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}