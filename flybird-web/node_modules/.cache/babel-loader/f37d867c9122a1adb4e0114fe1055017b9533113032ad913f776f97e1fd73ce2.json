{"ast":null,"code":"import _objectSpread from \"/Users/liuzhao/Documents/Projects/flybird/flybird-web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { ref, computed, onMounted, onUnmounted, watch } from 'vue';\nimport { useRouter, useRoute } from 'vue-router';\nimport { useStore } from 'vuex';\nimport defaultAvatarImage from '@/assets/images/default-avatar.png';\nimport navigation from '@/config/navigation.json';\nimport { eventBus } from '@/utils/eventBus';\nimport { useLogout } from '@/composables/useLogout';\nimport { API_URL } from '@/config';\nimport { showToast } from '@/components/ToastMessage';\n\n// 导入所需的图标\nimport { DocumentTextIcon, UserIcon, Cog6ToothIcon, ArrowRightOnRectangleIcon, BellIcon, HeartIcon, ShieldCheckIcon, UserCircleIcon, WrenchScrewdriverIcon } from '@heroicons/vue/24/outline';\n\n// 添加图标映射函数\n\nexport default {\n  __name: 'HeadView',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const getIcon = menuKey => {\n      const iconMap = {\n        // 用户菜单图标\n        'profile': UserCircleIcon,\n        'resumes': DocumentTextIcon,\n        'favorites': HeartIcon,\n        'notifications': BellIcon,\n        'settings': Cog6ToothIcon,\n        'security': ShieldCheckIcon,\n        'account': WrenchScrewdriverIcon,\n        'logout': ArrowRightOnRectangleIcon\n      };\n      return iconMap[menuKey] || UserIcon; // 默认返回 UserIcon\n    };\n\n    // 状态管理\n    const router = useRouter();\n    const route = useRoute();\n    const store = useStore();\n    const mobileMenuOpen = ref(false);\n    const userMenuOpen = ref(false);\n    const resourceMenuOpen = ref(false);\n    const mobileSubmenuOpen = ref({});\n    const userBasicInfo = ref(null);\n\n    // 监听 store 中的用户信息变化，更新用户基本信息\n    watch(() => store.state.userInfo, newUserInfo => {\n      if (newUserInfo?.data?.basic_info) {\n        userBasicInfo.value = _objectSpread(_objectSpread({}, newUserInfo.data.basic_info), newUserInfo.data.user);\n      }\n    }, {\n      immediate: true,\n      deep: true\n    });\n\n    // 响应式计算\n    const isMobile = computed(() => {\n      return window.innerWidth < 1024;\n    });\n\n    // 统一的菜单关闭处理\n    const closeMenus = e => {\n      if (!e.target.closest('.resource-menu')) {\n        resourceMenuOpen.value = false;\n      }\n      if (!e.target.closest('.user-menu')) {\n        userMenuOpen.value = false;\n      }\n    };\n\n    // 移动端菜单开关\n    const toggleMenu = () => {\n      mobileMenuOpen.value = !mobileMenuOpen.value;\n      if (mobileMenuOpen.value) {\n        userMenuOpen.value = false;\n        resourceMenuOpen.value = false;\n        mobileSubmenuOpen.value = {};\n      }\n    };\n\n    // 判断当前路由是否匹配\n    const isCurrentRoute = href => {\n      return route.path === href;\n    };\n\n    // 用户昵称计算属性\n    const username = computed(() => {\n      const username = store.state.userInfo?.data?.user?.username;\n      return username || '未设置昵称';\n    });\n\n    // 头像 URL 计算属性\n    const avatarUrl = computed(() => {\n      const avatar = store.state.userInfo?.data?.basic_info?.avatar;\n      if (!avatar) return defaultAvatarImage;\n      if (avatar.startsWith('http') || avatar.startsWith('data:')) {\n        return avatar;\n      }\n      return `${API_URL}${avatar}`;\n    });\n\n    // 获取用户信息的函数\n    const fetchUserInfo = async () => {\n      if (store.state.isAuthenticated) {\n        try {\n          await store.dispatch('fetchUserInfo');\n          userBasicInfo.value = _objectSpread(_objectSpread({}, store.state.userInfo?.data?.basic_info), store.state.userInfo?.data?.user);\n        } catch (error) {\n          console.error('Failed to fetch user info:', error);\n        }\n      }\n    };\n\n    // 生命周期钩子，监听事件，监听登录状态\n    onMounted(async () => {\n      document.addEventListener('click', closeMenus);\n      window.addEventListener('resize', () => {\n        if (!isMobile.value) {\n          mobileMenuOpen.value = false;\n        }\n      });\n      if (store.state.isAuthenticated) {\n        try {\n          await fetchUserInfo();\n        } catch (error) {\n          console.error('Failed to fetch user info:', error);\n          if (error.response?.status === 401) {\n            store.commit('SET_LOGGED_IN', false);\n          }\n        }\n      }\n      eventBus.on('avatar-updated', handleAvatarUpdate);\n    });\n\n    // 保持原有的事件清理\n    onUnmounted(() => {\n      eventBus.off('avatar-updated', handleAvatarUpdate);\n    });\n\n    // 简化头像更新处理方法\n    const handleAvatarUpdate = newAvatar => {\n      store.commit('SET_USER_INFO', _objectSpread(_objectSpread({}, store.state.userInfo), {}, {\n        data: _objectSpread(_objectSpread({}, store.state.userInfo?.data), {}, {\n          basic_info: _objectSpread(_objectSpread({}, store.state.userInfo?.data?.basic_info), {}, {\n            avatar: newAvatar\n          })\n        })\n      }));\n    };\n    // 从 store 获取用户信息和认证状态，并计算是否已登录\n    const isAuthenticated = computed(() => store.state.isAuthenticated);\n    // 监听登录状态变化\n    watch(() => store.state.isAuthenticated, newValue => {\n      if (newValue) {\n        fetchUserInfo();\n      } else {\n        userBasicInfo.value = null;\n      }\n    }, {\n      immediate: true\n    });\n\n    // 监听头像更新\n    watch(() => store.state.avatarUpdateTime, () => {\n      if (store.state.isAuthenticated) {\n        fetchUserInfo();\n      }\n    });\n\n    // 处理图片加载错误\n    const handleImageError = e => {\n      e.target.src = defaultAvatarImage;\n    };\n\n    // 用户类型\n    const userType = computed(() => '普通用户');\n\n    // 用户菜单选项\n    const userMenuItems = computed(() => {\n      return [{\n        key: 'profile',\n        label: '我的档案',\n        icon: 'profile',\n        action: () => router.push('/user?tab=profile')\n      }, {\n        key: 'resumes',\n        label: '我的简历',\n        icon: 'resumes',\n        action: () => router.push('/user?tab=resumes')\n      }, {\n        key: 'creations',\n        label: '我的创作',\n        icon: 'creations',\n        action: () => router.push('/user?tab=creations')\n      }, {\n        key: 'portfolio',\n        label: '我的作品集',\n        icon: 'portfolio',\n        action: () => router.push('/user?tab=portfolio')\n      }, {\n        key: 'favorites',\n        label: '我的收藏',\n        icon: 'favorites',\n        action: () => router.push('/user?tab=favorites')\n      }, {\n        key: 'notifications',\n        label: '消息通知',\n        icon: 'notifications',\n        action: () => router.push('/user?tab=messages')\n      }, {\n        key: 'homepage',\n        label: '我的主页',\n        icon: 'homepage',\n        action: () => router.push('/u/10001')\n      }, {\n        key: 'settings',\n        label: '账号设置',\n        icon: 'settings',\n        action: () => router.push('/user?tab=account')\n      }, {\n        key: 'logout',\n        label: '退出登录',\n        icon: 'logout',\n        action: handleLogout\n      }];\n    });\n\n    // 处理退出登录\n    const handleLogout = async () => {\n      try {\n        // 关闭用户菜单\n        userMenuOpen.value = false;\n        await store.dispatch('logout');\n        showToast('退出成功', 'success');\n\n        // 获取当前路径作为重定向地址\n        const currentPath = router.currentRoute.value.fullPath;\n        // 跳转到登录页面，并带上当前路径作为 redirect 参数\n        router.push(`/login?redirect=${encodeURIComponent(currentPath)}`);\n      } catch (error) {\n        console.error('退出失败:', error);\n        showToast('退出失败，请重试', 'error');\n      }\n    };\n    const __returned__ = {\n      getIcon,\n      router,\n      route,\n      store,\n      mobileMenuOpen,\n      userMenuOpen,\n      resourceMenuOpen,\n      mobileSubmenuOpen,\n      userBasicInfo,\n      isMobile,\n      closeMenus,\n      toggleMenu,\n      isCurrentRoute,\n      username,\n      avatarUrl,\n      fetchUserInfo,\n      handleAvatarUpdate,\n      isAuthenticated,\n      handleImageError,\n      userType,\n      userMenuItems,\n      handleLogout,\n      ref,\n      computed,\n      onMounted,\n      onUnmounted,\n      watch,\n      get useRouter() {\n        return useRouter;\n      },\n      get useRoute() {\n        return useRoute;\n      },\n      get useStore() {\n        return useStore;\n      },\n      get defaultAvatarImage() {\n        return defaultAvatarImage;\n      },\n      get navigation() {\n        return navigation;\n      },\n      get eventBus() {\n        return eventBus;\n      },\n      get useLogout() {\n        return useLogout;\n      },\n      get API_URL() {\n        return API_URL;\n      },\n      get showToast() {\n        return showToast;\n      },\n      get DocumentTextIcon() {\n        return DocumentTextIcon;\n      },\n      get UserIcon() {\n        return UserIcon;\n      },\n      get Cog6ToothIcon() {\n        return Cog6ToothIcon;\n      },\n      get ArrowRightOnRectangleIcon() {\n        return ArrowRightOnRectangleIcon;\n      },\n      get BellIcon() {\n        return BellIcon;\n      },\n      get HeartIcon() {\n        return HeartIcon;\n      },\n      get ShieldCheckIcon() {\n        return ShieldCheckIcon;\n      },\n      get UserCircleIcon() {\n        return UserCircleIcon;\n      },\n      get WrenchScrewdriverIcon() {\n        return WrenchScrewdriverIcon;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","onUnmounted","watch","useRouter","useRoute","useStore","defaultAvatarImage","navigation","eventBus","useLogout","API_URL","showToast","DocumentTextIcon","UserIcon","Cog6ToothIcon","ArrowRightOnRectangleIcon","BellIcon","HeartIcon","ShieldCheckIcon","UserCircleIcon","WrenchScrewdriverIcon","getIcon","menuKey","iconMap","router","route","store","mobileMenuOpen","userMenuOpen","resourceMenuOpen","mobileSubmenuOpen","userBasicInfo","state","userInfo","newUserInfo","data","basic_info","value","_objectSpread","user","immediate","deep","isMobile","window","innerWidth","closeMenus","e","target","closest","toggleMenu","isCurrentRoute","href","path","username","avatarUrl","avatar","startsWith","fetchUserInfo","isAuthenticated","dispatch","error","console","document","addEventListener","response","status","commit","on","handleAvatarUpdate","off","newAvatar","newValue","avatarUpdateTime","handleImageError","src","userType","userMenuItems","key","label","icon","action","push","handleLogout","currentPath","currentRoute","fullPath","encodeURIComponent"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/components/HeadView.vue"],"sourcesContent":["<template>\n  <header class=\"bg-white shadow-sm\">\n    <nav class=\"mx-auto px-4 sm:px-6 lg:px-8\" aria-label=\"Top\">\n      <div class=\"flex items-center justify-between h-16\">\n        <!-- Logo -->\n        <div class=\"flex\">\n          <router-link to=\"/\" class=\"flex items-center\">\n            <img class=\"h-8 w-auto\" src=\"@/assets/logo.png\" alt=\"Logo\" />\n          </router-link>\n        </div>\n\n        <!-- 导航链接 - 仅在非移动端显示 -->\n        <div class=\"hidden md:flex space-x-8\">\n          <router-link\n            v-for=\"tab in mainTabs\"\n            :key=\"tab.path\"\n            :to=\"tab.path\"\n            class=\"text-gray-500 hover:text-gray-900 px-3 py-2 text-sm font-medium\"\n            :class=\"{ 'text-blue-500': route.path === tab.path }\"\n          >\n            {{ tab.name }}\n          </router-link>\n        </div>\n\n        <!-- 右侧按钮区域 -->\n        <div class=\"flex items-center\">\n          <!-- 我的页面链接 - 仅在非移动端显示 -->\n          <router-link\n            :to=\"myTab.path\"\n            class=\"hidden md:flex items-center text-gray-500 hover:text-gray-900 px-3 py-2 text-sm font-medium\"\n            :class=\"{ 'text-blue-500': route.path === myTab.path }\"\n          >\n            {{ myTab.name }}\n          </router-link>\n\n          <!-- 其他按钮（如果有的话） -->\n        </div>\n      </div>\n    </nav>\n  </header>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted, onUnmounted, watch } from 'vue'\nimport { useRouter, useRoute } from 'vue-router'\nimport { useStore } from 'vuex'\nimport defaultAvatarImage from '@/assets/images/default-avatar.png'\nimport navigation from '@/config/navigation.json'\nimport { eventBus } from '@/utils/eventBus'\nimport { useLogout } from '@/composables/useLogout'\nimport { API_URL } from '@/config'\nimport { showToast } from '@/components/ToastMessage'\n\n// 导入所需的图标\nimport {\n  DocumentTextIcon,\n  UserIcon,\n  Cog6ToothIcon,\n  ArrowRightOnRectangleIcon,\n  BellIcon,\n  HeartIcon,\n  ShieldCheckIcon,\n  UserCircleIcon,\n  WrenchScrewdriverIcon\n} from '@heroicons/vue/24/outline'\n\n// 添加图标映射函数\nconst getIcon = (menuKey) => {\n  const iconMap = {  \n    // 用户菜单图标\n    'profile': UserCircleIcon,\n    'resumes': DocumentTextIcon,\n    'favorites': HeartIcon,\n    'notifications': BellIcon,\n    'settings': Cog6ToothIcon,\n    'security': ShieldCheckIcon,\n    'account': WrenchScrewdriverIcon,\n    'logout': ArrowRightOnRectangleIcon,\n  }\n  return iconMap[menuKey] || UserIcon // 默认返回 UserIcon\n}\n\n// 状态管理\nconst router = useRouter()\nconst route = useRoute()\nconst store = useStore()\nconst mobileMenuOpen = ref(false)\nconst userMenuOpen = ref(false)\nconst resourceMenuOpen = ref(false)\nconst mobileSubmenuOpen = ref({})\nconst userBasicInfo = ref(null)\n\n// 监听 store 中的用户信息变化，更新用户基本信息\nwatch(\n  () => store.state.userInfo,\n  (newUserInfo) => {\n    if (newUserInfo?.data?.basic_info) {\n      userBasicInfo.value = {\n        ...newUserInfo.data.basic_info,\n        ...newUserInfo.data.user\n      }\n    }\n  },\n  { immediate: true, deep: true }\n)\n\n// 响应式计算\nconst isMobile = computed(() => {\n  return window.innerWidth < 1024\n})\n\n\n\n\n// 统一的菜单关闭处理\nconst closeMenus = (e) => {\n  if (!e.target.closest('.resource-menu')) {\n    resourceMenuOpen.value = false\n  }\n  if (!e.target.closest('.user-menu')) {\n    userMenuOpen.value = false\n  }\n}\n\n// 移动端菜单开关\nconst toggleMenu = () => {\n  mobileMenuOpen.value = !mobileMenuOpen.value\n  if (mobileMenuOpen.value) {\n    userMenuOpen.value = false\n    resourceMenuOpen.value = false\n    mobileSubmenuOpen.value = {}\n  }\n}\n\n\n\n\n// 判断当前路由是否匹配\nconst isCurrentRoute = (href) => {\n  return route.path === href\n}\n\n\n\n// 用户昵称计算属性\nconst username = computed(() => {\n  const username = store.state.userInfo?.data?.user?.username\n  return username || '未设置昵称'\n})\n\n// 头像 URL 计算属性\nconst avatarUrl = computed(() => {\n  const avatar = store.state.userInfo?.data?.basic_info?.avatar\n  if (!avatar) return defaultAvatarImage\n  \n  if (avatar.startsWith('http') || avatar.startsWith('data:')) {\n    return avatar\n  }\n  return `${API_URL}${avatar}`\n})\n\n// 获取用户信息的函数\nconst fetchUserInfo = async () => {\n  if (store.state.isAuthenticated) {\n    try {\n      await store.dispatch('fetchUserInfo')\n      userBasicInfo.value = {\n        ...store.state.userInfo?.data?.basic_info,\n        ...store.state.userInfo?.data?.user\n      }\n    } catch (error) {\n      console.error('Failed to fetch user info:', error)\n    }\n  }\n}\n\n\n// 生命周期钩子，监听事件，监听登录状态\nonMounted(async () => {\n  document.addEventListener('click', closeMenus)\n  window.addEventListener('resize', () => {\n    if (!isMobile.value) {\n      mobileMenuOpen.value = false\n    }\n  })\n  \n  if (store.state.isAuthenticated) {\n    try {\n      await fetchUserInfo()\n    } catch (error) {\n      console.error('Failed to fetch user info:', error)\n      if (error.response?.status === 401) {\n        store.commit('SET_LOGGED_IN', false)\n      }\n    }\n  }\n  \n  eventBus.on('avatar-updated', handleAvatarUpdate)\n})\n\n// 保持原有的事件清理\nonUnmounted(() => {\n  eventBus.off('avatar-updated', handleAvatarUpdate)\n})\n\n// 简化头像更新处理方法\nconst handleAvatarUpdate = (newAvatar) => {\n  store.commit('SET_USER_INFO', {\n    ...store.state.userInfo,\n    data: {\n      ...store.state.userInfo?.data,\n      basic_info: {\n        ...store.state.userInfo?.data?.basic_info,\n        avatar: newAvatar\n      }\n    }\n  })\n}\n// 从 store 获取用户信息和认证状态，并计算是否已登录\nconst isAuthenticated = computed(() => store.state.isAuthenticated)\n// 监听登录状态变化\nwatch(() => store.state.isAuthenticated, (newValue) => {\n  if (newValue) {\n    fetchUserInfo()\n  } else {\n    userBasicInfo.value = null\n  }\n}, { immediate: true })\n\n// 监听头像更新\nwatch(() => store.state.avatarUpdateTime, () => {\n  if (store.state.isAuthenticated) {\n    fetchUserInfo()\n  }\n})\n\n// 处理图片加载错误\nconst handleImageError = (e) => {\n  e.target.src = defaultAvatarImage\n}\n\n// 用户类型\nconst userType = computed(() => '普通用户')\n\n// 用户菜单选项\nconst userMenuItems = computed(() => {\n  return [\n    {\n      key: 'profile',\n      label: '我的档案',\n      icon: 'profile',\n      action: () => router.push('/user?tab=profile')\n    },\n    {\n      key: 'resumes',\n      label: '我的简历',\n      icon: 'resumes',\n      action: () => router.push('/user?tab=resumes')\n    },\n    {\n      key:'creations',\n      label:'我的创作',\n      icon:'creations',\n      action: () => router.push('/user?tab=creations')\n    },\n    {\n      key: 'portfolio',\n      label: '我的作品集',\n      icon: 'portfolio',\n      action: () => router.push('/user?tab=portfolio')\n    },\n    {\n      key: 'favorites',\n      label: '我的收藏',\n      icon: 'favorites',\n      action: () => router.push('/user?tab=favorites')\n    },\n    {\n      key: 'notifications',\n      label: '消息通知',\n      icon: 'notifications',\n      action: () => router.push('/user?tab=messages')\n    },\n    {\n      key: 'homepage',\n      label: '我的主页',\n      icon: 'homepage',\n      action: () => router.push('/u/10001')\n    },\n    {\n      key: 'settings',\n      label: '账号设置',\n      icon: 'settings',\n      action: () => router.push('/user?tab=account')\n    },\n    {\n      key: 'logout',\n      label: '退出登录',\n      icon: 'logout',\n      action: handleLogout\n    }\n  ]\n})\n\n// 处理退出登录\nconst handleLogout = async () => {\n  try {\n    // 关闭用户菜单\n    userMenuOpen.value = false\n    \n    await store.dispatch('logout')\n    showToast('退出成功', 'success')\n    \n    // 获取当前路径作为重定向地址\n    const currentPath = router.currentRoute.value.fullPath\n    // 跳转到登录页面，并带上当前路径作为 redirect 参数\n    router.push(`/login?redirect=${encodeURIComponent(currentPath)}`)\n    \n  } catch (error) {\n    console.error('退出失败:', error)\n    showToast('退出失败，请重试', 'error')\n  }\n}\n\n</script>\n<style scoped>\n/* 添加过渡动画 */\n.aspect-h-9 {\n  position: relative;\n  padding-bottom: 56.25%;\n}\n\n.aspect-h-9 img {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  transition: opacity 0.3s ease;\n}\n\n/* 添加菜单hover效果 */\n.hover\\:bg-gray-100:hover {\n  background-color: rgba(243, 244, 246, 1);\n}\n\n/* 确保下拉菜单定位正确 */\n.resource-menu {\n  position: static;\n}\n\n@media (min-width: 1024px) {\n  .resource-menu {\n    position: relative;\n  }\n}\n\n/* 添加过渡动画 */\n.transition-transform {\n  transition-property: transform;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 200ms;\n}\n\n/* 移动端菜单动画 */\n.mobile-menu-enter-active,\n.mobile-menu-leave-active {\n  transition: transform 0.3s ease-in-out;\n}\n\n.mobile-menu-enter-from,\n.mobile-menu-leave-to {\n  transform: translateX(100%);\n}\n\n/* 下拉菜单动画 */\n.dropdown-enter-active,\n.dropdown-leave-active {\n  transition: opacity 0.2s, transform 0.2s;\n}\n\n.dropdown-enter-from,\n.dropdown-leave-to {\n  opacity: 0;\n  transform: translateY(-10px);\n}\n/* 确保下拉菜单始终最上层 */\n:deep(.el-dropdown-menu) {\n  z-index: 3000 !important;\n}\n\n/* 调整资源菜单定位 */\n.resource-menu {\n  position: static;\n}\n\n@media (min-width: 1024px) {\n  .resource-menu {\n    position: relative;\n  }\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}