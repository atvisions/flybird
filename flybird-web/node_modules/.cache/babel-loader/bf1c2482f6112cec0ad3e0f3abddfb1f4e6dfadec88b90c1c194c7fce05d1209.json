{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, withModifiers as _withModifiers, withKeys as _withKeys, normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"canvas-container\"\n};\nconst _hoisted_2 = {\n  class: \"canvas-wrapper\"\n};\nconst _hoisted_3 = [\"onKeydown\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", {\n    class: \"canvas-content\",\n    style: _normalizeStyle({\n      transform: `scale(${$props.scale})`\n    }),\n    onDragover: _cache[0] || (_cache[0] = _withModifiers(() => {}, [\"prevent\"])),\n    onDrop: _withModifiers($setup.handleElementDrop, [\"prevent\"]),\n    onDragenter: _withModifiers($setup.handleDragEnter, [\"prevent\"]),\n    onDragleave: _withModifiers($setup.handleDragLeave, [\"prevent\"]),\n    onClick: _withModifiers($setup.handleCanvasClick, [\"self\"]),\n    tabindex: \"0\",\n    onKeydown: [_withKeys(_withModifiers($setup.handleDeleteElement, [\"prevent\"]), [\"delete\"]), _withKeys(_withModifiers($setup.handleDeleteElement, [\"prevent\"]), [\"backspace\"])]\n  }, [_createCommentVNode(\" 设计元素列表 \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.elements, element => {\n    return _openBlock(), _createBlock($setup[\"DesignElement\"], {\n      key: element.id,\n      element: element,\n      \"is-selected\": $setup.selectedElement?.id === element.id,\n      scale: $props.scale,\n      onSelect: $setup.handleElementSelect,\n      onUpdate: $setup.handleElementUpdate\n    }, null, 8 /* PROPS */, [\"element\", \"is-selected\", \"scale\"]);\n  }), 128 /* KEYED_FRAGMENT */))], 44 /* STYLE, PROPS, NEED_HYDRATION */, _hoisted_3)])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","style","_normalizeStyle","transform","$props","scale","onDragover","_cache","_withModifiers","onDrop","$setup","handleElementDrop","onDragenter","handleDragEnter","onDragleave","handleDragLeave","onClick","handleCanvasClick","tabindex","onKeydown","_withKeys","handleDeleteElement","_createCommentVNode","_Fragment","_renderList","elements","element","_createBlock","key","id","selectedElement","onSelect","handleElementSelect","onUpdate","handleElementUpdate","_hoisted_3"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/views/resume-editor/components/Canvas.vue"],"sourcesContent":["<template>\n  <div class=\"canvas-container\">\n    <div class=\"canvas-wrapper\">\n      <div \n        class=\"canvas-content\" \n        :style=\"{ transform: `scale(${scale})` }\"\n        @dragover.prevent\n        @drop.prevent=\"handleElementDrop\"\n        @dragenter.prevent=\"handleDragEnter\"\n        @dragleave.prevent=\"handleDragLeave\"\n        @click.self=\"handleCanvasClick\"\n        tabindex=\"0\"\n        @keydown.delete.prevent=\"handleDeleteElement\"\n        @keydown.backspace.prevent=\"handleDeleteElement\"\n      >\n        <!-- 设计元素列表 -->\n        <template v-for=\"element in elements\" :key=\"element.id\">\n          <DesignElement\n            :element=\"element\"\n            :is-selected=\"selectedElement?.id === element.id\"\n            :scale=\"scale\"\n            @select=\"handleElementSelect\"\n            @update=\"handleElementUpdate\"\n          />\n        </template>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted, onUnmounted } from 'vue'\nimport DesignElement from './DesignElement.vue'\n\nconst props = defineProps({\n  scale: {\n    type: Number,\n    default: 1\n  }\n})\n\nconst emit = defineEmits(['element-select'])\n\n// 状态\nconst isDragOver = ref(false)\nconst elements = ref([])\nconst selectedElement = ref(null)\n\n// 处理画布点击\nconst handleCanvasClick = (e) => {\n  if (e.target === e.currentTarget) {\n    selectedElement.value = null\n    emit('element-select', null)\n  }\n}\n\n// 处理元素选择\nconst handleElementSelect = (element) => {\n  selectedElement.value = element\n  emit('element-select', element)\n}\n\n// 处理元素更新\nconst handleElementUpdate = (updatedElement) => {\n  const index = elements.value.findIndex(el => el.id === updatedElement.id)\n  if (index > -1) {\n    elements.value[index] = { ...updatedElement }\n    if (selectedElement.value?.id === updatedElement.id) {\n      selectedElement.value = { ...updatedElement }\n    }\n  }\n}\n\n// 处理删除元素\nconst handleDeleteElement = () => {\n  if (selectedElement.value) {\n    const index = elements.value.findIndex(el => el.id === selectedElement.value.id)\n    if (index > -1) {\n      elements.value.splice(index, 1)\n      selectedElement.value = null\n      emit('element-select', null)\n    }\n  }\n}\n\n// 处理键盘事件\nconst handleKeyDown = (e) => {\n  if ((e.key === 'Delete' || e.key === 'Backspace') && selectedElement.value) {\n    e.preventDefault()\n    handleDeleteElement()\n  }\n}\n\n// 添加和移除全局键盘事件监听\nonMounted(() => {\n  document.addEventListener('keydown', handleKeyDown)\n})\n\nonUnmounted(() => {\n  document.removeEventListener('keydown', handleKeyDown)\n})\n\n// 处理元素拖拽\nconst handleElementDrop = (event) => {\n  const elementType = event.dataTransfer.getData('element-type')\n  if (!elementType) return\n\n  try {\n    const elementConfig = JSON.parse(event.dataTransfer.getData('element-config'))\n    const rect = event.currentTarget.getBoundingClientRect()\n    const x = (event.clientX - rect.left) / props.scale\n    const y = (event.clientY - rect.top) / props.scale\n    \n    const newElement = {\n      id: Date.now().toString(),\n      type: elementType,\n      x,\n      y,\n      width: elementConfig.width || 100,\n      height: elementConfig.height || 100,\n      rotation: 0,\n      content: elementConfig.content,\n      placeholder: elementConfig.placeholder,\n      styles: elementConfig.styles || {}\n    }\n    \n    elements.value.push(newElement)\n    // 自动选中新添加的元素\n    selectedElement.value = newElement\n    emit('element-select', newElement)\n    isDragOver.value = false\n  } catch (error) {\n    console.error('处理元素拖放时出错:', error)\n  }\n}\n\n// 处理拖拽进入\nconst handleDragEnter = (event) => {\n  event.preventDefault()\n  isDragOver.value = true\n}\n\n// 处理拖拽离开\nconst handleDragLeave = (event) => {\n  event.preventDefault()\n  isDragOver.value = false\n}\n\n// 导出布局数据\nconst exportLayoutData = () => {\n  return {\n    elements: elements.value.map(element => ({\n      ...element,\n      dataBinding: element.dataBinding\n    }))\n  }\n}\n\n// 加载模板\nconst loadTemplate = (template, profileData) => {\n  // 加载设计元素\n  elements.value = (template.elements || []).map(element => {\n    // 如果元素有数据绑定,注入实际数据\n    if (element.dataBinding) {\n      const { field } = element.dataBinding\n      \n      // 根据元素类型设置实际内容\n      switch (element.type) {\n        case 'image':\n          element.content = profileData?.[field]\n          break\n        case 'text':\n          element.content = profileData?.[field]\n          break\n      }\n    }\n    return element\n  })\n}\n\n// 更新元素数据绑定\nconst updateElementDataBinding = (elementId, binding) => {\n  const element = elements.value.find(el => el.id === elementId)\n  if (element) {\n    element.dataBinding = binding\n    // 更新选中元素的状态\n    if (selectedElement.value?.id === elementId) {\n      selectedElement.value = { ...element }\n    }\n  }\n}\n\n// 暴露方法给父组件\ndefineExpose({\n  loadTemplate,\n  exportLayoutData,\n  updateElementDataBinding\n})\n</script>\n\n<style scoped>\n.canvas-container {\n  flex: 1;\n  overflow: hidden;\n  background: #f5f5f5;\n  position: relative;\n}\n\n.canvas-wrapper {\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  padding: 20px;\n}\n\n.canvas-content {\n  width: 794px; /* A4 纸宽度 */\n  min-height: 1123px; /* A4 纸高度 */\n  background: #ffffff;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\n  position: relative;\n  transform-origin: top center;\n  outline: none; /* 移除焦点时的轮廓 */\n}\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAkB;;EACtBA,KAAK,EAAC;AAAgB;mBAF/B;;uBACEC,mBAAA,CA0BM,OA1BNC,UA0BM,GAzBJC,mBAAA,CAwBM,OAxBNC,UAwBM,GAvBJD,mBAAA,CAsBM;IArBJH,KAAK,EAAC,gBAAgB;IACrBK,KAAK,EALdC,eAAA;MAAAC,SAAA,WAKsCC,MAAA,CAAAC,KAAK;IAAA;IAClCC,UAAQ,EAAAC,MAAA,QAAAA,MAAA,MANjBC,cAAA,CAMQ,QAAiB;IAChBC,MAAI,EAPbD,cAAA,CAOuBE,MAAA,CAAAC,iBAAiB;IAC/BC,WAAS,EARlBJ,cAAA,CAQ4BE,MAAA,CAAAG,eAAe;IAClCC,WAAS,EATlBN,cAAA,CAS4BE,MAAA,CAAAK,eAAe;IAClCC,OAAK,EAVdR,cAAA,CAUqBE,MAAA,CAAAO,iBAAiB;IAC9BC,QAAQ,EAAC,GAAG;IACXC,SAAO,GAZhBC,SAAA,CAAAZ,cAAA,CAYiCE,MAAA,CAAAW,mBAAmB,6BAZpDD,SAAA,CAAAZ,cAAA,CAaoCE,MAAA,CAAAW,mBAAmB;MAE/CC,mBAAA,YAAe,G,kBACfzB,mBAAA,CAQW0B,SAAA,QAxBnBC,WAAA,CAgBoCd,MAAA,CAAAe,QAAQ,EAAnBC,OAAO;yBACtBC,YAAA,CAMEjB,MAAA;MAvBZkB,GAAA,EAgBoDF,OAAO,CAACG,EAAE;MAEjDH,OAAO,EAAEA,OAAO;MAChB,aAAW,EAAEhB,MAAA,CAAAoB,eAAe,EAAED,EAAE,KAAKH,OAAO,CAACG,EAAE;MAC/CxB,KAAK,EAAED,MAAA,CAAAC,KAAK;MACZ0B,QAAM,EAAErB,MAAA,CAAAsB,mBAAmB;MAC3BC,QAAM,EAAEvB,MAAA,CAAAwB;;0EAtBrBC,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}