{"ast":null,"code":"import { onMounted, onUnmounted } from 'vue';\nimport { useStore } from 'vuex';\nimport { isTokenExpired } from '@/utils/auth';\nexport function useTokenRefresh() {\n  const store = useStore();\n  let refreshTimer = null;\n\n  // 检查并刷新 token\n  const checkAndRefreshToken = async () => {\n    try {\n      // 如果 token 即将过期（比如还有 30 分钟就过期）\n      const expiresAt = localStorage.getItem('token_expires');\n      if (!expiresAt) return;\n      const expirationTime = parseInt(expiresAt) * 1000;\n      const thirtyMinutes = 30 * 60 * 1000;\n      const shouldRefresh = expirationTime - Date.now() <= thirtyMinutes;\n      if (shouldRefresh) {\n        await store.dispatch('refreshToken');\n      }\n    } catch (error) {\n      console.error('Token refresh failed:', error);\n    }\n  };\n\n  // 设置定时检查\n  const startTokenRefresh = () => {\n    // 每 15 分钟检查一次\n    refreshTimer = setInterval(checkAndRefreshToken, 15 * 60 * 1000);\n    // 立即执行一次检查\n    checkAndRefreshToken();\n  };\n\n  // 清理定时器\n  const stopTokenRefresh = () => {\n    if (refreshTimer) {\n      clearInterval(refreshTimer);\n      refreshTimer = null;\n    }\n  };\n\n  // 在组件挂载时启动，卸载时清理\n  onMounted(() => {\n    startTokenRefresh();\n  });\n  onUnmounted(() => {\n    stopTokenRefresh();\n  });\n  return {\n    checkAndRefreshToken,\n    startTokenRefresh,\n    stopTokenRefresh\n  };\n}","map":{"version":3,"names":["onMounted","onUnmounted","useStore","isTokenExpired","useTokenRefresh","store","refreshTimer","checkAndRefreshToken","expiresAt","localStorage","getItem","expirationTime","parseInt","thirtyMinutes","shouldRefresh","Date","now","dispatch","error","console","startTokenRefresh","setInterval","stopTokenRefresh","clearInterval"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/composables/useTokenRefresh.js"],"sourcesContent":["import { onMounted, onUnmounted } from 'vue'\nimport { useStore } from 'vuex'\nimport { isTokenExpired } from '@/utils/auth'\n\nexport function useTokenRefresh() {\n  const store = useStore()\n  let refreshTimer = null\n  \n  // 检查并刷新 token\n  const checkAndRefreshToken = async () => {\n    try {\n      // 如果 token 即将过期（比如还有 30 分钟就过期）\n      const expiresAt = localStorage.getItem('token_expires')\n      if (!expiresAt) return\n      \n      const expirationTime = parseInt(expiresAt) * 1000\n      const thirtyMinutes = 30 * 60 * 1000\n      const shouldRefresh = expirationTime - Date.now() <= thirtyMinutes\n      \n      if (shouldRefresh) {\n        await store.dispatch('refreshToken')\n      }\n    } catch (error) {\n      console.error('Token refresh failed:', error)\n    }\n  }\n  \n  // 设置定时检查\n  const startTokenRefresh = () => {\n    // 每 15 分钟检查一次\n    refreshTimer = setInterval(checkAndRefreshToken, 15 * 60 * 1000)\n    // 立即执行一次检查\n    checkAndRefreshToken()\n  }\n  \n  // 清理定时器\n  const stopTokenRefresh = () => {\n    if (refreshTimer) {\n      clearInterval(refreshTimer)\n      refreshTimer = null\n    }\n  }\n  \n  // 在组件挂载时启动，卸载时清理\n  onMounted(() => {\n    startTokenRefresh()\n  })\n  \n  onUnmounted(() => {\n    stopTokenRefresh()\n  })\n  \n  return {\n    checkAndRefreshToken,\n    startTokenRefresh,\n    stopTokenRefresh\n  }\n} "],"mappings":"AAAA,SAASA,SAAS,EAAEC,WAAW,QAAQ,KAAK;AAC5C,SAASC,QAAQ,QAAQ,MAAM;AAC/B,SAASC,cAAc,QAAQ,cAAc;AAE7C,OAAO,SAASC,eAAeA,CAAA,EAAG;EAChC,MAAMC,KAAK,GAAGH,QAAQ,CAAC,CAAC;EACxB,IAAII,YAAY,GAAG,IAAI;;EAEvB;EACA,MAAMC,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvC,IAAI;MACF;MACA,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;MACvD,IAAI,CAACF,SAAS,EAAE;MAEhB,MAAMG,cAAc,GAAGC,QAAQ,CAACJ,SAAS,CAAC,GAAG,IAAI;MACjD,MAAMK,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;MACpC,MAAMC,aAAa,GAAGH,cAAc,GAAGI,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIH,aAAa;MAElE,IAAIC,aAAa,EAAE;QACjB,MAAMT,KAAK,CAACY,QAAQ,CAAC,cAAc,CAAC;MACtC;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;;EAED;EACA,MAAME,iBAAiB,GAAGA,CAAA,KAAM;IAC9B;IACAd,YAAY,GAAGe,WAAW,CAACd,oBAAoB,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;IAChE;IACAA,oBAAoB,CAAC,CAAC;EACxB,CAAC;;EAED;EACA,MAAMe,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,IAAIhB,YAAY,EAAE;MAChBiB,aAAa,CAACjB,YAAY,CAAC;MAC3BA,YAAY,GAAG,IAAI;IACrB;EACF,CAAC;;EAED;EACAN,SAAS,CAAC,MAAM;IACdoB,iBAAiB,CAAC,CAAC;EACrB,CAAC,CAAC;EAEFnB,WAAW,CAAC,MAAM;IAChBqB,gBAAgB,CAAC,CAAC;EACpB,CAAC,CAAC;EAEF,OAAO;IACLf,oBAAoB;IACpBa,iBAAiB;IACjBE;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}