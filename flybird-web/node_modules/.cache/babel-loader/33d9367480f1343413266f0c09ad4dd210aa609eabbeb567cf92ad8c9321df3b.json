{"ast":null,"code":"import request from '@/utils/request';\nexport const auth = {\n  // 密码登录\n  loginWithPassword: async data => {\n    try {\n      // 打印请求数据\n      console.log('Login request data:', {\n        account: data.account,\n        password: '***' // 不打印实际密码\n      });\n      const response = await request.post('/api/v1/users/auth/login/password/', {\n        account: data.account,\n        password: data.password\n      });\n      if (response?.data?.code === 200) {\n        // 立即设置 token\n        const token = response.data.data.access;\n        if (token) {\n          request.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        }\n      }\n      return response;\n    } catch (error) {\n      // 打印错误详情\n      console.error('Login request error:', {\n        status: error.response?.status,\n        data: error.response?.data,\n        config: {\n          url: error.config?.url,\n          method: error.config?.method,\n          data: JSON.parse(error.config?.data || '{}')\n        }\n      });\n      throw error;\n    }\n  },\n  // 退出登录\n  logout: async () => {\n    const refreshToken = localStorage.getItem('refresh_token');\n    if (!refreshToken) return;\n    try {\n      await request.post('/api/v1/users/auth/logout/', {\n        refresh: refreshToken\n      });\n    } finally {\n      // 清除所有相关的本地存储数据\n      localStorage.removeItem('token');\n      localStorage.removeItem('refresh_token');\n      localStorage.removeItem('token_expires_at');\n      // 清除用户相关数据\n      localStorage.removeItem('remember_me');\n      localStorage.removeItem('remembered_account');\n      localStorage.removeItem('userInfo');\n      // 清除其他可能存在的数据\n      localStorage.removeItem('isLoggedIn');\n      // 清除请求头中的 token\n      delete request.defaults.headers.common['Authorization'];\n    }\n  },\n  // 刷新 token\n  refreshToken: data => {\n    return request.post('/api/v1/users/auth/token/refresh/', data);\n  },\n  // 更新用户名（昵称）\n  updateUsername: data => {\n    return request.post('/api/v1/users/account/username/', data);\n  },\n  // 发送验证码\n  sendVerifyCode: data => {\n    // 验证必要参数\n    if (!data.phone || !data.scene) {\n      throw new Error('手机号和场景参数不能为空');\n    }\n\n    // 验证场景是否有效\n    const validScenes = ['register', 'login', 'reset_password', 'change_phone'];\n    if (!validScenes.includes(data.scene)) {\n      throw new Error('无效的场景类型');\n    }\n    return request({\n      url: '/api/v1/users/auth/sms/send/',\n      method: 'post',\n      data: {\n        phone: data.phone,\n        scene: data.scene\n      }\n    });\n  },\n  // 重置密码\n  resetPassword: async data => {\n    return request.post('/api/v1/users/auth/password/reset/', {\n      phone: data.phone,\n      code: data.code,\n      new_password: data.new_password,\n      confirm_password: data.confirm_password\n    });\n  },\n  // 注册\n  register: async data => {\n    return request.post('/api/v1/users/auth/register/', {\n      phone: data.phone,\n      code: data.code,\n      password: data.password,\n      confirm_password: data.confirmPassword\n    });\n  }\n};\nexport default auth;","map":{"version":3,"names":["request","auth","loginWithPassword","data","console","log","account","password","response","post","code","token","access","defaults","headers","common","error","status","config","url","method","JSON","parse","logout","refreshToken","localStorage","getItem","refresh","removeItem","updateUsername","sendVerifyCode","phone","scene","Error","validScenes","includes","resetPassword","new_password","confirm_password","register","confirmPassword"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/api/auth.js"],"sourcesContent":["import request from '@/utils/request'\n\nexport const auth = {\n  // 密码登录\n  loginWithPassword: async (data) => {\n    try {\n      // 打印请求数据\n      console.log('Login request data:', {\n        account: data.account,\n        password: '***'  // 不打印实际密码\n      })\n      const response = await request.post('/api/v1/users/auth/login/password/', {\n        account: data.account,\n        password: data.password\n      })\n      if (response?.data?.code === 200) {\n        // 立即设置 token\n        const token = response.data.data.access\n        if (token) {\n          request.defaults.headers.common['Authorization'] = `Bearer ${token}`\n        }\n      }\n      return response\n    } catch (error) {\n      // 打印错误详情\n      console.error('Login request error:', {\n        status: error.response?.status,\n        data: error.response?.data,\n        config: {\n          url: error.config?.url,\n          method: error.config?.method,\n          data: JSON.parse(error.config?.data || '{}')\n        }\n      })\n      throw error\n    }\n  },\n  \n  // 退出登录\n  logout: async () => {\n    const refreshToken = localStorage.getItem('refresh_token')\n    if (!refreshToken) return\n    try {\n      await request.post('/api/v1/users/auth/logout/', { refresh: refreshToken })\n    } finally {\n      // 清除所有相关的本地存储数据\n      localStorage.removeItem('token')\n      localStorage.removeItem('refresh_token')\n      localStorage.removeItem('token_expires_at')\n      // 清除用户相关数据\n      localStorage.removeItem('remember_me')\n      localStorage.removeItem('remembered_account')\n      localStorage.removeItem('userInfo')\n      // 清除其他可能存在的数据\n      localStorage.removeItem('isLoggedIn')\n      // 清除请求头中的 token\n      delete request.defaults.headers.common['Authorization']\n    }\n  },\n  \n  // 刷新 token\n  refreshToken: (data) => {\n    return request.post('/api/v1/users/auth/token/refresh/', data)\n  },\n  \n  // 更新用户名（昵称）\n  updateUsername: (data) => {\n    return request.post('/api/v1/users/account/username/', data)\n  },\n  \n  // 发送验证码\n  sendVerifyCode: (data) => {\n    // 验证必要参数\n    if (!data.phone || !data.scene) {\n      throw new Error('手机号和场景参数不能为空')\n    }\n    \n    // 验证场景是否有效\n    const validScenes = ['register', 'login', 'reset_password', 'change_phone']\n    if (!validScenes.includes(data.scene)) {\n      throw new Error('无效的场景类型')\n    }\n    \n    return request({\n      url: '/api/v1/users/auth/sms/send/',\n      method: 'post',\n      data: {\n        phone: data.phone,\n        scene: data.scene\n      }\n    })\n  },\n  \n  // 重置密码\n  resetPassword: async (data) => {\n    return request.post('/api/v1/users/auth/password/reset/', {\n      phone: data.phone,\n      code: data.code,\n      new_password: data.new_password,\n      confirm_password: data.confirm_password\n    })\n  },\n  \n  // 注册\n  register: async (data) => {\n    return request.post('/api/v1/users/auth/register/', {\n      phone: data.phone,\n      code: data.code,\n      password: data.password,\n      confirm_password: data.confirmPassword\n    })\n  }\n}\n\nexport default auth "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}