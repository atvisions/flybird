{"ast":null,"code":"import _objectSpread from \"/Users/liuzhao/Documents/Projects/flybird/flybird-web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport { createVNode as _createVNode } from \"vue\";\n// Styles\nimport \"./VSelectionControlGroup.css\";\n\n// Composables\nimport { makeComponentProps } from \"../../composables/component.mjs\";\nimport { provideDefaults } from \"../../composables/defaults.mjs\";\nimport { makeDensityProps } from \"../../composables/density.mjs\";\nimport { IconValue } from \"../../composables/icons.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\";\nimport { makeThemeProps } from \"../../composables/theme.mjs\"; // Utilities\nimport { computed, onScopeDispose, provide, toRef } from 'vue';\nimport { deepEqual, genericComponent, getUid, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\nexport const VSelectionControlGroupSymbol = Symbol.for('vuetify:selection-control-group');\nexport const makeSelectionControlGroupProps = propsFactory(_objectSpread(_objectSpread(_objectSpread({\n  color: String,\n  disabled: {\n    type: Boolean,\n    default: null\n  },\n  defaultsTarget: String,\n  error: Boolean,\n  id: String,\n  inline: Boolean,\n  falseIcon: IconValue,\n  trueIcon: IconValue,\n  ripple: {\n    type: [Boolean, Object],\n    default: true\n  },\n  multiple: {\n    type: Boolean,\n    default: null\n  },\n  name: String,\n  readonly: {\n    type: Boolean,\n    default: null\n  },\n  modelValue: null,\n  type: String,\n  valueComparator: {\n    type: Function,\n    default: deepEqual\n  }\n}, makeComponentProps()), makeDensityProps()), makeThemeProps()), 'SelectionControlGroup');\nexport const makeVSelectionControlGroupProps = propsFactory(_objectSpread({}, makeSelectionControlGroupProps({\n  defaultsTarget: 'VSelectionControl'\n})), 'VSelectionControlGroup');\nexport const VSelectionControlGroup = genericComponent()({\n  name: 'VSelectionControlGroup',\n  props: makeVSelectionControlGroupProps(),\n  emits: {\n    'update:modelValue': value => true\n  },\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const modelValue = useProxiedModel(props, 'modelValue');\n    const uid = getUid();\n    const id = computed(() => props.id || `v-selection-control-group-${uid}`);\n    const name = computed(() => props.name || id.value);\n    const updateHandlers = new Set();\n    provide(VSelectionControlGroupSymbol, {\n      modelValue,\n      forceUpdate: () => {\n        updateHandlers.forEach(fn => fn());\n      },\n      onForceUpdate: cb => {\n        updateHandlers.add(cb);\n        onScopeDispose(() => {\n          updateHandlers.delete(cb);\n        });\n      }\n    });\n    provideDefaults({\n      [props.defaultsTarget]: {\n        color: toRef(props, 'color'),\n        disabled: toRef(props, 'disabled'),\n        density: toRef(props, 'density'),\n        error: toRef(props, 'error'),\n        inline: toRef(props, 'inline'),\n        modelValue,\n        multiple: computed(() => !!props.multiple || props.multiple == null && Array.isArray(modelValue.value)),\n        name,\n        falseIcon: toRef(props, 'falseIcon'),\n        trueIcon: toRef(props, 'trueIcon'),\n        readonly: toRef(props, 'readonly'),\n        ripple: toRef(props, 'ripple'),\n        type: toRef(props, 'type'),\n        valueComparator: toRef(props, 'valueComparator')\n      }\n    });\n    useRender(() => _createVNode(\"div\", {\n      \"class\": ['v-selection-control-group', {\n        'v-selection-control-group--inline': props.inline\n      }, props.class],\n      \"style\": props.style,\n      \"role\": props.type === 'radio' ? 'radiogroup' : undefined\n    }, [slots.default?.()]));\n    return {};\n  }\n});","map":{"version":3,"names":["makeComponentProps","provideDefaults","makeDensityProps","IconValue","useProxiedModel","makeThemeProps","computed","onScopeDispose","provide","toRef","deepEqual","genericComponent","getUid","propsFactory","useRender","VSelectionControlGroupSymbol","Symbol","for","makeSelectionControlGroupProps","_objectSpread","color","String","disabled","type","Boolean","default","defaultsTarget","error","id","inline","falseIcon","trueIcon","ripple","Object","multiple","name","readonly","modelValue","valueComparator","Function","makeVSelectionControlGroupProps","VSelectionControlGroup","props","emits","value","setup","_ref","slots","uid","updateHandlers","Set","forceUpdate","forEach","fn","onForceUpdate","cb","add","delete","density","Array","isArray","_createVNode","class","style","undefined"],"sources":["../../../src/components/VSelectionControlGroup/VSelectionControlGroup.tsx"],"sourcesContent":["// Styles\nimport './VSelectionControlGroup.sass'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { provideDefaults } from '@/composables/defaults'\nimport { makeDensityProps } from '@/composables/density'\nimport { IconValue } from '@/composables/icons'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { makeThemeProps } from '@/composables/theme'\n\n// Utilities\nimport { computed, onScopeDispose, provide, toRef } from 'vue'\nimport { deepEqual, genericComponent, getUid, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { InjectionKey, PropType, Ref } from 'vue'\nimport type { RippleDirectiveBinding } from '@/directives/ripple'\nimport type { GenericProps } from '@/util'\n\nexport interface VSelectionGroupContext {\n  modelValue: Ref<any>\n  forceUpdate: () => void\n  onForceUpdate: (fn: () => void) => void\n}\n\nexport const VSelectionControlGroupSymbol: InjectionKey<VSelectionGroupContext> = Symbol.for('vuetify:selection-control-group')\n\nexport const makeSelectionControlGroupProps = propsFactory({\n  color: String,\n  disabled: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n  defaultsTarget: String,\n  error: Boolean,\n  id: String,\n  inline: Boolean,\n  falseIcon: IconValue,\n  trueIcon: IconValue,\n  ripple: {\n    type: [Boolean, Object] as PropType<RippleDirectiveBinding['value']>,\n    default: true,\n  },\n  multiple: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n  name: String,\n  readonly: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n  modelValue: null,\n  type: String,\n  valueComparator: {\n    type: Function as PropType<typeof deepEqual>,\n    default: deepEqual,\n  },\n\n  ...makeComponentProps(),\n  ...makeDensityProps(),\n  ...makeThemeProps(),\n}, 'SelectionControlGroup')\n\nexport const makeVSelectionControlGroupProps = propsFactory({\n  ...makeSelectionControlGroupProps({\n    defaultsTarget: 'VSelectionControl',\n  }),\n}, 'VSelectionControlGroup')\n\nexport const VSelectionControlGroup = genericComponent<new <T>(\n  props: {\n    modelValue?: T\n    'onUpdate:modelValue'?: (value: T) => void\n  },\n  slots: { default: never },\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VSelectionControlGroup',\n\n  props: makeVSelectionControlGroupProps(),\n\n  emits: {\n    'update:modelValue': (value: any) => true,\n  },\n\n  setup (props, { slots }) {\n    const modelValue = useProxiedModel(props, 'modelValue')\n    const uid = getUid()\n    const id = computed(() => props.id || `v-selection-control-group-${uid}`)\n    const name = computed(() => props.name || id.value)\n\n    const updateHandlers = new Set<() => void>()\n    provide(VSelectionControlGroupSymbol, {\n      modelValue,\n      forceUpdate: () => {\n        updateHandlers.forEach(fn => fn())\n      },\n      onForceUpdate: cb => {\n        updateHandlers.add(cb)\n        onScopeDispose(() => {\n          updateHandlers.delete(cb)\n        })\n      },\n    })\n\n    provideDefaults({\n      [props.defaultsTarget]: {\n        color: toRef(props, 'color'),\n        disabled: toRef(props, 'disabled'),\n        density: toRef(props, 'density'),\n        error: toRef(props, 'error'),\n        inline: toRef(props, 'inline'),\n        modelValue,\n        multiple: computed(() => !!props.multiple || (props.multiple == null && Array.isArray(modelValue.value))),\n        name,\n        falseIcon: toRef(props, 'falseIcon'),\n        trueIcon: toRef(props, 'trueIcon'),\n        readonly: toRef(props, 'readonly'),\n        ripple: toRef(props, 'ripple'),\n        type: toRef(props, 'type'),\n        valueComparator: toRef(props, 'valueComparator'),\n      },\n    })\n\n    useRender(() => (\n      <div\n        class={[\n          'v-selection-control-group',\n          { 'v-selection-control-group--inline': props.inline },\n          props.class,\n        ]}\n        style={ props.style }\n        role={ props.type === 'radio' ? 'radiogroup' : undefined }\n      >\n        { slots.default?.() }\n      </div>\n    ))\n\n    return {}\n  },\n})\n\nexport type VSelectionControlGroup = InstanceType<typeof VSelectionControlGroup>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}