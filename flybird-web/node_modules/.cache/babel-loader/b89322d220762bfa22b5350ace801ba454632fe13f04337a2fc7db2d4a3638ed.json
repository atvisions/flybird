{"ast":null,"code":"import { ref } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { useStore } from 'vuex';\nimport { auth } from '@/api/auth';\nimport { SMS_SCENE } from '@/constants';\nimport { showToast } from '@/components/ToastMessage';\nexport function useRegister() {\n  const router = useRouter();\n  const store = useStore();\n\n  // 表单数据\n  const form = ref({\n    phone: '',\n    code: '',\n    password: '',\n    confirmPassword: '',\n    countdown: 0\n  });\n\n  // 状态\n  const loading = ref(false);\n  const sendingCode = ref(false);\n  const agreed = ref(false);\n  const showPassword = ref(false);\n\n  // 表单验证\n  const validateForm = () => {\n    if (!form.value.phone || !form.value.code || !form.value.password || !form.value.confirmPassword) {\n      showToast('请填写完整信息', 'warning');\n      return false;\n    }\n\n    // 验证两次密码是否一致\n    if (form.value.password !== form.value.confirmPassword) {\n      showToast('两次输入的密码不一致', 'warning');\n      return false;\n    }\n    return true;\n  };\n\n  // 处理错误\n  const handleError = (error, {\n    type,\n    onRegistered\n  }) => {\n    // 处理限速错误\n    if (error.isRateLimit) {\n      const minutes = Math.ceil(error.retryAfter / 60);\n      showToast(`操作过于频繁，请在 ${minutes} 分钟后重试`, 'warning');\n      return;\n    }\n    const errorData = error.response?.data;\n\n    // 处理已注册错误\n    if (errorData?.errors?.phone?.[0]?.includes('已注册')) {\n      showToast('手机号已注册', 'warning');\n      onRegistered?.();\n      return;\n    }\n\n    // 处理验证码错误\n    if (errorData?.errors?.code?.[0]?.includes('验证码')) {\n      showToast('验证码错误或已过期，请重新获取', 'error');\n      return;\n    }\n\n    // 处理其他业务错误\n    if (errorData?.message) {\n      showToast(errorData.message, 'error');\n      return;\n    }\n\n    // 处理默认错误\n    const defaultMessages = {\n      sendCode: '发送验证码失败，请稍后重试',\n      register: '注册失败，请稍后重试'\n    };\n    showToast(defaultMessages[type], 'error');\n  };\n\n  // 添加 startCountdown 函数\n  const startCountdown = () => {\n    form.value.countdown = 60;\n    const timer = setInterval(() => {\n      form.value.countdown--;\n      if (form.value.countdown <= 0) {\n        clearInterval(timer);\n      }\n    }, 1000);\n  };\n  const handleSendCode = async () => {\n    // 先检查手机号是否为空\n    if (!form.value.phone) {\n      showToast('请输入手机号', 'warning');\n      return;\n    }\n\n    // 再检查手机号格式是否正确\n    if (!/^1[3-9]\\d{9}$/.test(form.value.phone)) {\n      showToast('请输入正确的手机号', 'warning');\n      return;\n    }\n    try {\n      sendingCode.value = true;\n      const response = await auth.sendVerifyCode({\n        phone: form.value.phone,\n        scene: SMS_SCENE.REGISTER\n      });\n      if (response.data?.code === 200) {\n        showToast('验证码已发送', 'success');\n        startCountdown();\n      } else {\n        throw new Error(response.data?.message || '发送验证码失败');\n      }\n    } catch (error) {\n      // 直接使用错误信息显示\n      showToast(error.response?.data?.message || error.message || '发送验证码失败', 'error');\n    } finally {\n      sendingCode.value = false;\n    }\n  };\n\n  // 注册处理\n  const handleRegister = async () => {\n    if (!validateForm()) return;\n    try {\n      loading.value = true;\n\n      // 1. 注册 - 修改请求数据结构\n      const registerResponse = await auth.register({\n        phone: form.value.phone.trim(),\n        code: form.value.code,\n        password: form.value.password,\n        confirm_password: form.value.password\n      });\n      if (!registerResponse.data || registerResponse.data.code !== 200) {\n        throw new Error(registerResponse.data?.message || '注册失败');\n      }\n\n      // 2. 从响应中获取 tokens\n      const {\n        access,\n        refresh\n      } = registerResponse.data.data;\n\n      // 3. 更新 store 状态\n      await store.dispatch('login', {\n        access,\n        refresh,\n        rememberMe: false\n      });\n      showToast('注册成功', 'success');\n\n      // 4. 等待一下再跳转\n      await new Promise(resolve => setTimeout(resolve, 300));\n      router.push('/user');\n    } catch (error) {\n      console.error('注册失败:', error);\n      handleError(error, {\n        type: 'register',\n        onRegistered: () => router.push('/login')\n      });\n    } finally {\n      loading.value = false;\n    }\n  };\n  return {\n    form,\n    loading,\n    sendingCode,\n    agreed,\n    showPassword,\n    handleRegister,\n    handleSendCode\n  };\n}","map":{"version":3,"names":["ref","useRouter","useStore","auth","SMS_SCENE","showToast","useRegister","router","store","form","phone","code","password","confirmPassword","countdown","loading","sendingCode","agreed","showPassword","validateForm","value","handleError","error","type","onRegistered","isRateLimit","minutes","Math","ceil","retryAfter","errorData","response","data","errors","includes","message","defaultMessages","sendCode","register","startCountdown","timer","setInterval","clearInterval","handleSendCode","test","sendVerifyCode","scene","REGISTER","Error","handleRegister","registerResponse","trim","confirm_password","access","refresh","dispatch","rememberMe","Promise","resolve","setTimeout","push","console"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/composables/useRegister.js"],"sourcesContent":["import { ref } from 'vue'\nimport { useRouter } from 'vue-router'\nimport { useStore } from 'vuex'\nimport { auth } from '@/api/auth'\nimport { SMS_SCENE } from '@/constants'\nimport { showToast } from '@/components/ToastMessage'\n\nexport function useRegister() {\n  const router = useRouter()\n  const store = useStore()\n  \n  // 表单数据\n  const form = ref({\n    phone: '',\n    code: '',\n    password: '',\n    confirmPassword: '',\n    countdown: 0\n  })\n  \n  // 状态\n  const loading = ref(false)\n  const sendingCode = ref(false)\n  const agreed = ref(false)\n  const showPassword = ref(false)\n\n  // 表单验证\n  const validateForm = () => {\n    if (!form.value.phone || !form.value.code || !form.value.password || !form.value.confirmPassword) {\n      showToast('请填写完整信息', 'warning')\n      return false\n    }\n\n    // 验证两次密码是否一致\n    if (form.value.password !== form.value.confirmPassword) {\n      showToast('两次输入的密码不一致', 'warning')\n      return false\n    }\n\n    return true\n  }\n\n\n  // 处理错误\n  const handleError = (error, { type, onRegistered }) => {\n    // 处理限速错误\n    if (error.isRateLimit) {\n      const minutes = Math.ceil(error.retryAfter / 60)\n      showToast(`操作过于频繁，请在 ${minutes} 分钟后重试`, 'warning')\n      return\n    }\n\n    const errorData = error.response?.data\n    \n    // 处理已注册错误\n    if (errorData?.errors?.phone?.[0]?.includes('已注册')) {\n      showToast('手机号已注册', 'warning')\n      onRegistered?.()\n      return\n    }\n    \n    // 处理验证码错误\n    if (errorData?.errors?.code?.[0]?.includes('验证码')) {\n      showToast('验证码错误或已过期，请重新获取', 'error')\n      return\n    }\n    \n    // 处理其他业务错误\n    if (errorData?.message) {\n      showToast(errorData.message, 'error')\n      return\n    }\n    \n    // 处理默认错误\n    const defaultMessages = {\n      sendCode: '发送验证码失败，请稍后重试',\n      register: '注册失败，请稍后重试'\n    }\n    showToast(defaultMessages[type], 'error')\n  }\n\n  // 添加 startCountdown 函数\n  const startCountdown = () => {\n    form.value.countdown = 60\n    const timer = setInterval(() => {\n      form.value.countdown--\n      if (form.value.countdown <= 0) {\n        clearInterval(timer)\n      }\n    }, 1000)\n  }\n\n  const handleSendCode = async () => {\n    // 先检查手机号是否为空\n    if (!form.value.phone) {\n      showToast('请输入手机号', 'warning')\n      return\n    }\n    \n    // 再检查手机号格式是否正确\n    if (!/^1[3-9]\\d{9}$/.test(form.value.phone)) {\n      showToast('请输入正确的手机号', 'warning')\n      return\n    }\n    \n    try {\n      sendingCode.value = true\n      const response = await auth.sendVerifyCode({\n        phone: form.value.phone,\n        scene: SMS_SCENE.REGISTER\n      })\n\n      if (response.data?.code === 200) {\n        showToast('验证码已发送', 'success')\n        startCountdown()\n      } else {\n        throw new Error(response.data?.message || '发送验证码失败')\n      }\n    } catch (error) {\n      // 直接使用错误信息显示\n      showToast(error.response?.data?.message || error.message || '发送验证码失败', 'error')\n    } finally {\n      sendingCode.value = false\n    }\n  }\n\n  // 注册处理\n  const handleRegister = async () => {\n    if (!validateForm()) return\n    \n    try {\n      loading.value = true\n      \n      // 1. 注册 - 修改请求数据结构\n      const registerResponse = await auth.register({\n        phone: form.value.phone.trim(),\n        code: form.value.code,\n        password: form.value.password,\n        confirm_password: form.value.password\n      })\n\n      if (!registerResponse.data || registerResponse.data.code !== 200) {\n        throw new Error(registerResponse.data?.message || '注册失败')\n      }\n\n      // 2. 从响应中获取 tokens\n      const { access, refresh } = registerResponse.data.data\n\n      // 3. 更新 store 状态\n      await store.dispatch('login', {\n        access,\n        refresh,\n        rememberMe: false\n      })\n\n      showToast('注册成功', 'success')\n\n      // 4. 等待一下再跳转\n      await new Promise(resolve => setTimeout(resolve, 300))\n      router.push('/user')\n    } catch (error) {\n      console.error('注册失败:', error)\n      handleError(error, {\n        type: 'register',\n        onRegistered: () => router.push('/login')\n      })\n    } finally {\n      loading.value = false\n    }\n  }\n\n  return {\n    form,\n    loading,\n    sendingCode,\n    agreed,\n    showPassword,\n    handleRegister,\n    handleSendCode\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}