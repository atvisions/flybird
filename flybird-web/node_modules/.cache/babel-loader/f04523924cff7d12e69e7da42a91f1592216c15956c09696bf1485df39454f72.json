{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.every.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport { ref, computed, onMounted, nextTick, watch } from 'vue';\nimport { useWindowSize } from '@vueuse/core';\nimport { XMarkIcon, CheckCircleIcon, XCircleIcon, MinusCircleIcon } from '@heroicons/vue/24/solid';\nimport { ElMessageBox, ElMessage } from 'element-plus';\nimport { Dialog, DialogPanel, DialogTitle, TransitionChild, TransitionRoot } from '@headlessui/vue';\nexport default {\n  __name: 'AIOptimizeDialog',\n  props: {\n    modelValue: {\n      type: Boolean,\n      default: false\n    },\n    profileData: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  emits: ['update:modelValue', 'apply'],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n    const props = __props;\n    const emit = __emit;\n\n    // 修改字段配置，只保留需要优化的字段\n    const fieldConfig = [\n    // 基本信息 - 只优化个人简介\n    {\n      name: 'basic_info.personal_summary',\n      label: '个人简介',\n      group: '基本信息'\n    },\n    // 求职意向 - 全部需要优化\n    {\n      name: 'job_intention.job_type',\n      label: '工作类型',\n      group: '求职意向'\n    }, {\n      name: 'job_intention.job_status',\n      label: '求职状态',\n      group: '求职意向'\n    }, {\n      name: 'job_intention.expected_salary',\n      label: '期望薪资',\n      group: '求职意向'\n    }, {\n      name: 'job_intention.industries',\n      label: '期望行业',\n      group: '求职意向'\n    },\n    // 工作经历 - 优化职位、描述、成就和技术栈\n    {\n      name: 'work_experiences',\n      label: '工作经历',\n      group: '工作经历',\n      isArray: true,\n      fields: [{\n        name: 'position',\n        label: '职位名称'\n      }, {\n        name: 'department',\n        label: '所在部门'\n      }, {\n        name: 'description',\n        label: '工作描述'\n      }, {\n        name: 'achievements',\n        label: '工作成就'\n      }, {\n        name: 'technologies',\n        label: '技术栈'\n      }]\n    },\n    // 教育经历 - 只优化在校经历\n    {\n      name: 'educations',\n      label: '教育经历',\n      group: '教育经历',\n      isArray: true,\n      fields: [{\n        name: 'description',\n        label: '在校经历'\n      }]\n    },\n    // 技能特长 - 优化描述和等级\n    {\n      name: 'skills',\n      label: '技能特长',\n      group: '技能特长',\n      isArray: true,\n      fields: [{\n        name: 'level',\n        label: '掌握程度'\n      }, {\n        name: 'description',\n        label: '技能描述'\n      }]\n    },\n    // 证书成就 - 只优化描述\n    {\n      name: 'certificates',\n      label: '证书成就',\n      group: '证书成就',\n      isArray: true,\n      fields: [{\n        name: 'description',\n        label: '证书描述'\n      }]\n    },\n    // 项目经历 - 优化角色、描述、成就和技术栈\n    {\n      name: 'projects',\n      label: '项目经历',\n      group: '项目经历',\n      isArray: true,\n      fields: [{\n        name: 'role',\n        label: '担任角色'\n      }, {\n        name: 'description',\n        label: '项目描述'\n      }, {\n        name: 'achievements',\n        label: '项目成就'\n      }, {\n        name: 'technologies',\n        label: '使用技术'\n      }]\n    }];\n\n    // 修改模拟优化方法\n    const mockOptimize = async (field, value) => {\n      if (!value) return null;\n      const optimizations = {\n        // 基本信息优化\n        personal_summary: value => `我是一名经验丰富的${value.includes('开发') ? '开发工程师' : '专业人士'}，${value}`,\n        // 求职意向优化\n        expected_salary: value => value.includes('面议') ? '根据经验和能力，期望薪资15k-25k' : value,\n        industries: value => value.split(',').map(i => i.trim()).join('、'),\n        job_type: value => value || '全职',\n        job_status: value => value || '在职，考虑新机会',\n        // 工作经历优化\n        position: value => value.replace(/^高级/, '资深').replace(/工程师$/, '开发工程师'),\n        department: value => value || '技术部',\n        description: value => value.replace(/^我/, '').replace(/。$/, '，工作中注重团队协作和技术创新。'),\n        achievements: value => value ? `${value}，为团队和公司创造了显著价值。` : '通过技术创新和流程优化，提升了团队工作效率，获得领导和同事的一致好评。',\n        technologies: value => value ? value.split(',').sort().join(', ') : '',\n        // 技能特长优化\n        level: value => value === '熟悉' ? '精通' : value,\n        'skills.description': value => `精通${value}，有丰富的实践经验。`,\n        // 项目经历优化\n        role: value => value || '核心开发工程师',\n        'projects.description': value => value ? value.replace(/。$/, '，负责核心功能开发和性能优化。') : '负责项目核心功能开发，解决技术难点，提升系统性能。',\n        'projects.achievements': value => value ? `${value}，获得客户好评。` : '按时完成项目交付，解决多个技术难点，提升系统性能30%以上。'\n      };\n\n      // 模拟 API 延迟\n      await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));\n\n      // 根据字段名返回优化结果\n      const fieldKey = field.name.split('.').pop();\n      return optimizations[fieldKey] ? optimizations[fieldKey](value) : value; // 如果没有优化规则，返回原值\n    };\n\n    // 修改处理字段数据的方法\n    const processFields = () => {\n      if (!props.profileData) return [];\n      const allFields = [];\n\n      // 基本信息\n      if (props.profileData.basic_info) {\n        allFields.push({\n          name: 'basic_info.bio',\n          label: '个人简介',\n          currentValue: props.profileData.basic_info.bio,\n          optimizedValue: '',\n          status: 'pending'\n        });\n      }\n\n      // 工作经历\n      if (props.profileData.work_experiences?.length) {\n        props.profileData.work_experiences.forEach((exp, index) => {\n          allFields.push({\n            name: `work_experiences.${index}.description`,\n            label: `工作描述 ${index + 1}`,\n            currentValue: exp.description,\n            optimizedValue: '',\n            status: 'pending'\n          });\n          if (exp.achievements) {\n            allFields.push({\n              name: `work_experiences.${index}.achievements`,\n              label: `工作成就 ${index + 1}`,\n              currentValue: exp.achievements,\n              optimizedValue: '',\n              status: 'pending'\n            });\n          }\n        });\n      }\n\n      // 项目经历\n      if (props.profileData.projects?.length) {\n        props.profileData.projects.forEach((project, index) => {\n          allFields.push({\n            name: `projects.${index}.description`,\n            label: `项目描述 ${index + 1}`,\n            currentValue: project.description,\n            optimizedValue: '',\n            status: 'pending'\n          });\n          if (project.achievements) {\n            allFields.push({\n              name: `projects.${index}.achievements`,\n              label: `项目成就 ${index + 1}`,\n              currentValue: project.achievements,\n              optimizedValue: '',\n              status: 'pending'\n            });\n          }\n        });\n      }\n      return allFields;\n    };\n    const fields = ref(processFields());\n\n    // 计算属性\n    const displayFields = computed(() => {\n      return fields.value.sort((a, b) => {\n        if (a.status === 'pending' && b.status !== 'pending') return 1;\n        if (a.status !== 'pending' && b.status === 'pending') return -1;\n        return 0;\n      });\n    });\n    const completedCount = computed(() => fields.value.filter(f => ['success', 'failed'].includes(f.status)).length);\n    const totalFields = computed(() => fields.value.length);\n    const hasOptimized = computed(() => fields.value.some(f => f.status === 'success'));\n\n    // 添加优化状态标志\n    const isOptimizing = ref(false);\n\n    // 添加新的计算属性\n    const hasFailedFields = computed(() => fields.value.some(f => f.status === 'failed'));\n    const hasProcessingFields = computed(() => fields.value.some(f => f.status === 'processing'));\n\n    // 修改 canApply 计算属性的逻辑\n    const canApply = computed(() => {\n      // 不能有正在处理的字段\n      if (hasProcessingFields.value) return false;\n\n      // 至少要有一个成功优化的字段\n      const hasSuccessFields = fields.value.some(f => f.status === 'success' && f.optimizedValue !== f.currentValue);\n\n      // 所有有内容的字段都必须完成优化（成功或失败）\n      const allFieldsProcessed = fields.value.every(f => !f.currentValue ||\n      // 未填写的字段可以跳过\n      f.status === 'success' || f.status === 'failed');\n      return hasSuccessFields && allFieldsProcessed;\n    });\n\n    // 修改底部文本\n    const footerText = computed(() => {\n      if (!isOptimizing.value) return '点击\"一键优化\"开始AI优化';\n      if (hasProcessingFields.value) return '正在优化中，请稍候...';\n      if (hasFailedFields.value) return '部分优化失败，您可以选择继续优化或应用已优化的内容';\n      if (canApply.value) return '优化完成，您可以选择应用建议的内容';\n      return '正在准备优化...';\n    });\n\n    // 添加滚动容器的引用\n    const scrollContainer = ref(null);\n\n    // 修改开始优化方法\n    const startOptimize = async () => {\n      isOptimizing.value = true;\n      // 只优化有内容的待处理字段\n      const pendingFields = fields.value.filter(f => f.currentValue && f.status === 'pending');\n      for (let i = 0; i < pendingFields.length; i++) {\n        const field = pendingFields[i];\n        field.status = 'processing';\n        try {\n          const optimized = await mockOptimize(field, field.currentValue);\n          if (optimized) {\n            field.optimizedValue = optimized;\n            field.status = 'success';\n          } else {\n            field.status = 'failed'; // 改为失败而不是重置为 pending\n          }\n\n          // 等待DOM更新后滚动\n          await nextTick();\n          if (i < pendingFields.length - 1) {\n            const container = scrollContainer.value;\n            const itemHeight = 60;\n            const scrollAmount = itemHeight * (i + 1);\n            container.scrollTo({\n              top: scrollAmount,\n              behavior: 'smooth'\n            });\n          }\n        } catch (error) {\n          console.error('优化失败:', error);\n          field.status = 'failed';\n        }\n        await new Promise(resolve => setTimeout(resolve, 500));\n      }\n    };\n\n    // 修改处理关闭方法\n    const handleClose = () => {\n      if (isOptimizing.value) {\n        // 如果正在优化，提示用户是否确认关闭\n        if (confirm('正在优化中，确定要关闭吗？')) {\n          isOptimizing.value = false;\n          dialogVisible.value = false;\n        }\n      } else {\n        dialogVisible.value = false;\n      }\n    };\n\n    // 修改处理应用优化的方法\n    const handleApply = async () => {\n      try {\n        // 获取已优化的字段数量\n        const optimizedCount = fields.value.filter(f => f.status === 'success' && f.optimizedValue !== f.currentValue).length;\n\n        // 构建确认消息\n        const message = `确定要应用 ${optimizedCount} 条优化建议吗？此操作将覆盖原有内容且不可撤销。`;\n\n        // 显示确认对话框\n        const confirmed = await ElMessageBox.confirm(message, '应用优化建议', {\n          confirmButtonText: '确定应用',\n          cancelButtonText: '取消',\n          type: 'warning',\n          closeOnClickModal: false,\n          closeOnPressEscape: false,\n          distinguishCancelAndClose: true,\n          confirmButtonClass: 'el-button--danger'\n        });\n        if (confirmed === 'confirm') {\n          const optimizedData = {};\n          fields.value.forEach(field => {\n            if (field.status === 'success' && field.optimizedValue !== field.currentValue) {\n              // 解析字段路径\n              const pathParts = field.name.split('.');\n              if (pathParts.length === 4) {\n                // 数组字段，例如: work_experiences.0.description\n                const [collection, index, key] = pathParts.slice(1);\n                if (!optimizedData[pathParts[0]]) {\n                  optimizedData[pathParts[0]] = [];\n                }\n                if (!optimizedData[pathParts[0]][parseInt(index)]) {\n                  optimizedData[pathParts[0]][parseInt(index)] = {};\n                }\n                optimizedData[pathParts[0]][parseInt(index)][key] = field.optimizedValue;\n              } else {\n                // 普通字段\n                const [category, key] = pathParts;\n                if (category && key) {\n                  if (!optimizedData[category]) {\n                    optimizedData[category] = {};\n                  }\n                  optimizedData[category][key] = field.optimizedValue;\n                } else {\n                  optimizedData[field.name] = field.optimizedValue;\n                }\n              }\n            }\n          });\n          emit('apply', optimizedData);\n          ElMessage.success('优化内容已保存');\n          dialogVisible.value = false;\n        }\n      } catch (error) {\n        if (error !== 'cancel') {\n          console.error('应用优化失败:', error);\n          ElMessage.error('应用优化失败，请重试');\n        }\n      }\n    };\n\n    // 添加回对话框控制代码\n    const dialogVisible = computed({\n      get: () => props.modelValue,\n      set: value => emit('update:modelValue', value)\n    });\n\n    // 响应式布局\n    const {\n      width\n    } = useWindowSize();\n    const isMobile = computed(() => width.value < 640);\n    const dialogWidth = computed(() => {\n      if (isMobile.value) return '100%';\n      return '1000px'; // 增加宽度以适应内容\n    });\n\n    // 移除 onMounted 中的自动处理\n    onMounted(() => {\n      if (props.profileData) {\n        fields.value = processFields();\n      }\n    });\n\n    // 监听对话框显示状态\n    watch(() => dialogVisible.value, visible => {\n      if (visible) {\n        fields.value = processFields();\n      }\n    });\n\n    // 修改表格列宽度\n    const columnWidths = {\n      label: 'w-[120px] min-w-[120px]',\n      content: 'w-[200px] min-w-[200px]',\n      suggestion: 'min-w-[300px] flex-1',\n      status: 'w-[60px] min-w-[60px]'\n    };\n\n    // 添加 watch 来监控数据变化\n    watch(() => props.profileData, newVal => {\n      if (newVal) {\n        fields.value = processFields();\n      }\n    }, {\n      immediate: true,\n      deep: true\n    });\n\n    // 添加重试优化方法\n    const retryOptimize = async field => {\n      field.status = 'processing';\n      try {\n        const optimized = await mockOptimize(field, field.currentValue);\n        if (optimized) {\n          field.optimizedValue = optimized;\n          field.status = 'success';\n        } else {\n          field.status = 'failed';\n        }\n      } catch (error) {\n        console.error('重新优化失败:', error);\n        field.status = 'failed';\n      }\n    };\n\n    // 添加重试所有失败的优化方法\n    const retryFailedOptimizations = async () => {\n      const failedFields = fields.value.filter(f => f.status === 'failed');\n      isOptimizing.value = true;\n      for (const field of failedFields) {\n        await retryOptimize(field);\n        // 添加短暂延迟\n        await new Promise(resolve => setTimeout(resolve, 500));\n      }\n      isOptimizing.value = false;\n    };\n    const __returned__ = {\n      props,\n      emit,\n      fieldConfig,\n      mockOptimize,\n      processFields,\n      fields,\n      displayFields,\n      completedCount,\n      totalFields,\n      hasOptimized,\n      isOptimizing,\n      hasFailedFields,\n      hasProcessingFields,\n      canApply,\n      footerText,\n      scrollContainer,\n      startOptimize,\n      handleClose,\n      handleApply,\n      dialogVisible,\n      width,\n      isMobile,\n      dialogWidth,\n      columnWidths,\n      retryOptimize,\n      retryFailedOptimizations,\n      ref,\n      computed,\n      onMounted,\n      nextTick,\n      watch,\n      get useWindowSize() {\n        return useWindowSize;\n      },\n      get XMarkIcon() {\n        return XMarkIcon;\n      },\n      get CheckCircleIcon() {\n        return CheckCircleIcon;\n      },\n      get XCircleIcon() {\n        return XCircleIcon;\n      },\n      get MinusCircleIcon() {\n        return MinusCircleIcon;\n      },\n      get ElMessageBox() {\n        return ElMessageBox;\n      },\n      get ElMessage() {\n        return ElMessage;\n      },\n      get Dialog() {\n        return Dialog;\n      },\n      get DialogPanel() {\n        return DialogPanel;\n      },\n      get DialogTitle() {\n        return DialogTitle;\n      },\n      get TransitionChild() {\n        return TransitionChild;\n      },\n      get TransitionRoot() {\n        return TransitionRoot;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","nextTick","watch","useWindowSize","XMarkIcon","CheckCircleIcon","XCircleIcon","MinusCircleIcon","ElMessageBox","ElMessage","Dialog","DialogPanel","DialogTitle","TransitionChild","TransitionRoot","props","__props","emit","__emit","fieldConfig","name","label","group","isArray","fields","mockOptimize","field","value","optimizations","personal_summary","includes","expected_salary","industries","split","map","i","trim","join","job_type","job_status","position","replace","department","description","achievements","technologies","sort","level","role","Promise","resolve","setTimeout","Math","random","fieldKey","pop","processFields","profileData","allFields","basic_info","push","currentValue","bio","optimizedValue","status","work_experiences","length","forEach","exp","index","projects","project","displayFields","a","b","completedCount","filter","f","totalFields","hasOptimized","some","isOptimizing","hasFailedFields","hasProcessingFields","canApply","hasSuccessFields","allFieldsProcessed","every","footerText","scrollContainer","startOptimize","pendingFields","optimized","container","itemHeight","scrollAmount","scrollTo","top","behavior","error","console","handleClose","confirm","dialogVisible","handleApply","optimizedCount","message","confirmed","confirmButtonText","cancelButtonText","type","closeOnClickModal","closeOnPressEscape","distinguishCancelAndClose","confirmButtonClass","optimizedData","pathParts","collection","key","slice","parseInt","category","success","get","modelValue","set","width","isMobile","dialogWidth","visible","columnWidths","content","suggestion","newVal","immediate","deep","retryOptimize","retryFailedOptimizations","failedFields"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/views/user/MyProfile/dialogs/AIOptimizeDialog.vue"],"sourcesContent":["<template>\n  <TransitionRoot appear :show=\"!!modelValue\" as=\"template\">\n    <Dialog as=\"div\" class=\"relative z-50\" @close=\"handleClose\">\n      <!-- 背景遮罩 -->\n      <TransitionChild\n        as=\"template\"\n        enter=\"duration-300 ease-out\"\n        enter-from=\"opacity-0\"\n        enter-to=\"opacity-100\"\n        leave=\"duration-200 ease-in\"\n        leave-from=\"opacity-100\"\n        leave-to=\"opacity-0\"\n      >\n        <div class=\"fixed inset-0 bg-black/25\" />\n      </TransitionChild>\n\n      <!-- 对话框 -->\n      <div class=\"fixed inset-0 overflow-y-auto\">\n        <div class=\"flex min-h-full items-center justify-center p-4 text-center\">\n          <TransitionChild\n            as=\"template\"\n            enter=\"duration-300 ease-out\"\n            enter-from=\"opacity-0 scale-95\"\n            enter-to=\"opacity-100 scale-100\"\n            leave=\"duration-200 ease-in\"\n            leave-from=\"opacity-100 scale-100\"\n            leave-to=\"opacity-0 scale-95\"\n          >\n            <DialogPanel class=\"w-full max-w-2xl transform overflow-hidden rounded-xl bg-white text-left align-middle shadow-xl transition-all\">\n              <!-- 头部 -->\n              <DialogTitle as=\"div\" class=\"flex items-center justify-between px-6 py-4 border-b border-gray-200\">\n                <div class=\"flex items-center space-x-2\">\n                  <h3 class=\"text-lg font-medium text-gray-900\">AI 优化</h3>\n                  <div v-if=\"isOptimizing\" class=\"flex items-center space-x-1 text-sm text-gray-500\">\n                    <span>已完成</span>\n                    <span class=\"font-medium text-blue-600\">{{ completedCount }}</span>\n                    <span>/</span>\n                    <span>{{ totalFields }}</span>\n                  </div>\n                </div>\n                <button\n                  @click=\"handleClose\"\n                  class=\"rounded-full p-1 hover:bg-gray-100 transition-colors\"\n                >\n                  <XMarkIcon class=\"w-5 h-5 text-gray-400\" />\n                </button>\n              </DialogTitle>\n\n              <!-- 内容区域 -->\n              <div class=\"px-6 py-4 overflow-y-auto max-h-[calc(100vh-16rem)]\">\n                <!-- 移动端视图 -->\n                <div v-if=\"isMobile\" class=\"divide-y divide-gray-100\">\n                  <div \n                    v-for=\"field in displayFields\" \n                    :key=\"field.name\"\n                    class=\"py-4 space-y-3\"\n                  >\n                    <!-- 字段名和状态 -->\n                    <div class=\"flex justify-between items-center\">\n                      <div class=\"font-medium text-sm text-gray-900\">{{ field.label }}</div>\n                      <div class=\"flex items-center\">\n                        <template v-if=\"field.status === 'success'\">\n                          <CheckCircleIcon class=\"w-5 h-5 text-green-500\" />\n                        </template>\n                        <template v-else-if=\"field.status === 'failed'\">\n                          <XCircleIcon class=\"w-5 h-5 text-red-500\" />\n                        </template>\n                        <template v-else-if=\"field.status === 'processing'\">\n                          <div class=\"animate-spin rounded-full h-5 w-5 border-2 border-gray-300 border-t-blue-600\"></div>\n                        </template>\n                        <template v-else>\n                          <MinusCircleIcon class=\"w-5 h-5 text-gray-300\" />\n                        </template>\n                      </div>\n                    </div>\n                    \n                    <!-- 当前内容 -->\n                    <div class=\"text-sm text-gray-500\">\n                      <div class=\"font-medium text-xs text-gray-400 mb-1\">当前内容</div>\n                      <div class=\"break-words\">{{ field.currentValue || '未填写' }}</div>\n                    </div>\n                    \n                    <!-- 优化建议 -->\n                    <div class=\"text-sm text-gray-900\">\n                      <div class=\"font-medium text-xs text-gray-400 mb-1\">优化建议</div>\n                      <div class=\"break-words\">\n                        <template v-if=\"field.status === 'processing'\">\n                          <div class=\"flex items-center space-x-2 text-gray-500\">\n                            <div class=\"animate-spin rounded-full h-4 w-4 border-2 border-gray-300 border-t-blue-600\"></div>\n                            <span>优化中...</span>\n                          </div>\n                        </template>\n                        <template v-else>\n                          <div class=\"flex items-center justify-between\">\n                            <div class=\"flex-1 pr-2\">{{ field.optimizedValue || '等待优化' }}</div>\n                            <button\n                              v-if=\"field.status === 'failed'\"\n                              @click=\"retryOptimize(field)\"\n                              :disabled=\"isOptimizing\"\n                              class=\"shrink-0 px-2 py-1 text-xs text-blue-600 hover:text-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n                            >\n                              重新优化\n                            </button>\n                          </div>\n                        </template>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <!-- 桌面端表格视图 -->\n                <div v-else class=\"min-w-full\">\n                  <!-- 表格头部 -->\n                  <div class=\"sticky top-0 z-10 bg-gray-50 border-b border-gray-200\">\n                    <div class=\"grid grid-cols-12 gap-0\">\n                      <div class=\"col-span-2 py-3 px-4 text-left text-sm font-medium text-gray-900\">字段</div>\n                      <div class=\"col-span-4 py-3 px-4 text-left text-sm font-medium text-gray-900\">当前内容</div>\n                      <div class=\"col-span-5 py-3 px-4 text-left text-sm font-medium text-gray-900\">优化建议</div>\n                      <div class=\"col-span-1 py-3 px-4 text-center text-sm font-medium text-gray-900\">状态</div>\n                    </div>\n                  </div>\n\n                  <!-- 表格内容 -->\n                  <div class=\"bg-white\">\n                    <div class=\"transition-all duration-300\">\n                      <div\n                        v-for=\"field in displayFields\" \n                        :key=\"field.name\"\n                        class=\"grid grid-cols-12 gap-0 border-b border-gray-100 hover:bg-gray-50 field-row\"\n                      >\n                        <!-- 字段名 -->\n                        <div class=\"col-span-2 py-3 px-4 text-sm text-gray-900\">\n                          {{ field.label }}\n                        </div>\n                        \n                        <!-- 当前内容 -->\n                        <div class=\"col-span-4 py-3 px-4 text-sm text-gray-500\">\n                          <div class=\"break-words\">\n                            {{ field.currentValue || '未填写' }}\n                          </div>\n                        </div>\n                        \n                        <!-- 优化建议 -->\n                        <div class=\"col-span-5 py-3 px-4 text-sm text-gray-900\">\n                          <div class=\"break-words\">\n                            <template v-if=\"field.status === 'processing'\">\n                              <div class=\"flex items-center space-x-2 text-gray-500\">\n                                <div class=\"animate-spin rounded-full h-4 w-4 border-2 border-gray-300 border-t-blue-600\"></div>\n                                <span>优化中...</span>\n                              </div>\n                            </template>\n                            <template v-else>\n                              <div class=\"flex items-center justify-between\">\n                                <div>{{ field.optimizedValue || '等待优化' }}</div>\n                                <button\n                                  v-if=\"field.status === 'failed'\"\n                                  @click=\"retryOptimize(field)\"\n                                  :disabled=\"isOptimizing\"\n                                  class=\"ml-2 px-2 py-1 text-xs text-blue-600 hover:text-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n                                >\n                                  重新优化\n                                </button>\n                              </div>\n                            </template>\n                          </div>\n                        </div>\n                        \n                        <!-- 状态 -->\n                        <div class=\"col-span-1 py-3 px-4 flex items-center justify-center\">\n                          <template v-if=\"field.status === 'success'\">\n                            <CheckCircleIcon class=\"w-5 h-5 text-green-500\" />\n                          </template>\n                          <template v-else-if=\"field.status === 'failed'\">\n                            <XCircleIcon class=\"w-5 h-5 text-red-500\" />\n                          </template>\n                          <template v-else-if=\"field.status === 'processing'\">\n                            <div class=\"animate-spin rounded-full h-5 w-5 border-2 border-gray-300 border-t-blue-600\"></div>\n                          </template>\n                          <template v-else>\n                            <MinusCircleIcon class=\"w-5 h-5 text-gray-300\" />\n                          </template>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <!-- 底部按钮 -->\n              <div class=\"px-6 py-4 bg-gray-50 border-t border-gray-200\">\n                <div class=\"flex flex-col sm:flex-row sm:justify-between sm:items-center space-y-3 sm:space-y-0\">\n                  <div class=\"text-sm text-gray-500\">\n                    {{ footerText }}\n                  </div>\n                  <div class=\"flex justify-end space-x-3\">\n                    <button\n                      @click=\"handleClose\"\n                      :disabled=\"isOptimizing\"\n                      class=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n                    >\n                      取消\n                    </button>\n                    <button v-if=\"!isOptimizing\"\n                      @click=\"startOptimize\"\n                      class=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-lg hover:bg-blue-700\"\n                    >\n                      一键优化\n                    </button>\n                    <button v-else-if=\"hasFailedFields && !hasProcessingFields\"\n                      @click=\"retryFailedOptimizations\"\n                      class=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-lg hover:bg-blue-700\"\n                    >\n                      继续优化\n                    </button>\n                    <button v-else\n                      @click=\"handleApply\"\n                      :disabled=\"!canApply\"\n                      class=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n                    >\n                      应用优化\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </DialogPanel>\n          </TransitionChild>\n        </div>\n      </div>\n    </Dialog>\n  </TransitionRoot>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted, nextTick, watch } from 'vue'\nimport { useWindowSize } from '@vueuse/core'\nimport { \n  XMarkIcon, \n  CheckCircleIcon, \n  XCircleIcon,\n  MinusCircleIcon\n} from '@heroicons/vue/24/solid'\nimport { ElMessageBox, ElMessage } from 'element-plus'\nimport {\n  Dialog,\n  DialogPanel,\n  DialogTitle,\n  TransitionChild,\n  TransitionRoot\n} from '@headlessui/vue'\n\nconst props = defineProps({\n  modelValue: {\n    type: Boolean,\n    default: false\n  },\n  profileData: {\n    type: Object,\n    default: () => ({})\n  }\n})\n\nconst emit = defineEmits(['update:modelValue', 'apply'])\n\n// 修改字段配置，只保留需要优化的字段\nconst fieldConfig = [\n  // 基本信息 - 只优化个人简介\n  { name: 'basic_info.personal_summary', label: '个人简介', group: '基本信息' },\n  \n  // 求职意向 - 全部需要优化\n  { name: 'job_intention.job_type', label: '工作类型', group: '求职意向' },\n  { name: 'job_intention.job_status', label: '求职状态', group: '求职意向' },\n  { name: 'job_intention.expected_salary', label: '期望薪资', group: '求职意向' },\n  { name: 'job_intention.industries', label: '期望行业', group: '求职意向' },\n\n  // 工作经历 - 优化职位、描述、成就和技术栈\n  { name: 'work_experiences', label: '工作经历', group: '工作经历', isArray: true, fields: [\n    { name: 'position', label: '职位名称' },\n    { name: 'department', label: '所在部门' },\n    { name: 'description', label: '工作描述' },\n    { name: 'achievements', label: '工作成就' },\n    { name: 'technologies', label: '技术栈' }\n  ]},\n\n  // 教育经历 - 只优化在校经历\n  { name: 'educations', label: '教育经历', group: '教育经历', isArray: true, fields: [\n    { name: 'description', label: '在校经历' }\n  ]},\n\n  // 技能特长 - 优化描述和等级\n  { name: 'skills', label: '技能特长', group: '技能特长', isArray: true, fields: [\n    { name: 'level', label: '掌握程度' },\n    { name: 'description', label: '技能描述' }\n  ]},\n\n  // 证书成就 - 只优化描述\n  { name: 'certificates', label: '证书成就', group: '证书成就', isArray: true, fields: [\n    { name: 'description', label: '证书描述' }\n  ]},\n\n  // 项目经历 - 优化角色、描述、成就和技术栈\n  { name: 'projects', label: '项目经历', group: '项目经历', isArray: true, fields: [\n    { name: 'role', label: '担任角色' },\n    { name: 'description', label: '项目描述' },\n    { name: 'achievements', label: '项目成就' },\n    { name: 'technologies', label: '使用技术' }\n  ]}\n]\n\n// 修改模拟优化方法\nconst mockOptimize = async (field, value) => {\n  if (!value) return null\n  \n  const optimizations = {\n    // 基本信息优化\n    personal_summary: value => `我是一名经验丰富的${value.includes('开发') ? '开发工程师' : '专业人士'}，${value}`,\n\n    // 求职意向优化\n    expected_salary: value => value.includes('面议') ? '根据经验和能力，期望薪资15k-25k' : value,\n    industries: value => value.split(',').map(i => i.trim()).join('、'),\n    job_type: value => value || '全职',\n    job_status: value => value || '在职，考虑新机会',\n\n    // 工作经历优化\n    position: value => value.replace(/^高级/, '资深').replace(/工程师$/, '开发工程师'),\n    department: value => value || '技术部',\n    description: value => value.replace(/^我/, '').replace(/。$/, '，工作中注重团队协作和技术创新。'),\n    achievements: value => value ? `${value}，为团队和公司创造了显著价值。` : '通过技术创新和流程优化，提升了团队工作效率，获得领导和同事的一致好评。',\n    technologies: value => value ? value.split(',').sort().join(', ') : '',\n\n    // 技能特长优化\n    level: value => value === '熟悉' ? '精通' : value,\n    'skills.description': value => `精通${value}，有丰富的实践经验。`,\n\n    // 项目经历优化\n    role: value => value || '核心开发工程师',\n    'projects.description': value => value ? \n      value.replace(/。$/, '，负责核心功能开发和性能优化。') : \n      '负责项目核心功能开发，解决技术难点，提升系统性能。',\n    'projects.achievements': value => value ? \n      `${value}，获得客户好评。` : \n      '按时完成项目交付，解决多个技术难点，提升系统性能30%以上。'\n  }\n\n  // 模拟 API 延迟\n  await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000))\n\n  // 根据字段名返回优化结果\n  const fieldKey = field.name.split('.').pop()\n  return optimizations[fieldKey] ? \n    optimizations[fieldKey](value) : \n    value // 如果没有优化规则，返回原值\n}\n\n// 修改处理字段数据的方法\nconst processFields = () => {\n  if (!props.profileData) return []\n  \n  const allFields = []\n  \n  // 基本信息\n  if (props.profileData.basic_info) {\n    allFields.push({\n      name: 'basic_info.bio',\n      label: '个人简介',\n      currentValue: props.profileData.basic_info.bio,\n      optimizedValue: '',\n      status: 'pending'\n    })\n  }\n  \n  // 工作经历\n  if (props.profileData.work_experiences?.length) {\n    props.profileData.work_experiences.forEach((exp, index) => {\n      allFields.push({\n        name: `work_experiences.${index}.description`,\n        label: `工作描述 ${index + 1}`,\n        currentValue: exp.description,\n        optimizedValue: '',\n        status: 'pending'\n      })\n      \n      if (exp.achievements) {\n        allFields.push({\n          name: `work_experiences.${index}.achievements`,\n          label: `工作成就 ${index + 1}`,\n          currentValue: exp.achievements,\n          optimizedValue: '',\n          status: 'pending'\n        })\n      }\n    })\n  }\n  \n  // 项目经历\n  if (props.profileData.projects?.length) {\n    props.profileData.projects.forEach((project, index) => {\n      allFields.push({\n        name: `projects.${index}.description`,\n        label: `项目描述 ${index + 1}`,\n        currentValue: project.description,\n        optimizedValue: '',\n        status: 'pending'\n      })\n      \n      if (project.achievements) {\n        allFields.push({\n          name: `projects.${index}.achievements`,\n          label: `项目成就 ${index + 1}`,\n          currentValue: project.achievements,\n          optimizedValue: '',\n          status: 'pending'\n        })\n      }\n    })\n  }\n  \n  return allFields\n}\n\nconst fields = ref(processFields())\n\n// 计算属性\nconst displayFields = computed(() => {\n  return fields.value.sort((a, b) => {\n    if (a.status === 'pending' && b.status !== 'pending') return 1\n    if (a.status !== 'pending' && b.status === 'pending') return -1\n    return 0\n  })\n})\n\nconst completedCount = computed(() => \n  fields.value.filter(f => ['success', 'failed'].includes(f.status)).length\n)\n\nconst totalFields = computed(() => fields.value.length)\n\nconst hasOptimized = computed(() => \n  fields.value.some(f => f.status === 'success')\n)\n\n// 添加优化状态标志\nconst isOptimizing = ref(false)\n\n// 添加新的计算属性\nconst hasFailedFields = computed(() => \n  fields.value.some(f => f.status === 'failed')\n)\n\nconst hasProcessingFields = computed(() => \n  fields.value.some(f => f.status === 'processing')\n)\n\n// 修改 canApply 计算属性的逻辑\nconst canApply = computed(() => {\n  // 不能有正在处理的字段\n  if (hasProcessingFields.value) return false\n  \n  // 至少要有一个成功优化的字段\n  const hasSuccessFields = fields.value.some(f => \n    f.status === 'success' && f.optimizedValue !== f.currentValue\n  )\n  \n  // 所有有内容的字段都必须完成优化（成功或失败）\n  const allFieldsProcessed = fields.value.every(f => \n    !f.currentValue || // 未填写的字段可以跳过\n    f.status === 'success' || \n    f.status === 'failed'\n  )\n  \n  return hasSuccessFields && allFieldsProcessed\n})\n\n// 修改底部文本\nconst footerText = computed(() => {\n  if (!isOptimizing.value) return '点击\"一键优化\"开始AI优化'\n  if (hasProcessingFields.value) return '正在优化中，请稍候...'\n  if (hasFailedFields.value) return '部分优化失败，您可以选择继续优化或应用已优化的内容'\n  if (canApply.value) return '优化完成，您可以选择应用建议的内容'\n  return '正在准备优化...'\n})\n\n// 添加滚动容器的引用\nconst scrollContainer = ref(null)\n\n// 修改开始优化方法\nconst startOptimize = async () => {\n  isOptimizing.value = true\n  // 只优化有内容的待处理字段\n  const pendingFields = fields.value.filter(f => \n    f.currentValue && f.status === 'pending'\n  )\n  \n  for (let i = 0; i < pendingFields.length; i++) {\n    const field = pendingFields[i]\n    field.status = 'processing'\n    \n    try {\n      const optimized = await mockOptimize(field, field.currentValue)\n      if (optimized) {\n        field.optimizedValue = optimized\n        field.status = 'success'\n      } else {\n        field.status = 'failed' // 改为失败而不是重置为 pending\n      }\n      \n      // 等待DOM更新后滚动\n      await nextTick()\n      if (i < pendingFields.length - 1) {\n        const container = scrollContainer.value\n        const itemHeight = 60\n        const scrollAmount = itemHeight * (i + 1)\n        container.scrollTo({\n          top: scrollAmount,\n          behavior: 'smooth'\n        })\n      }\n    } catch (error) {\n      console.error('优化失败:', error)\n      field.status = 'failed'\n    }\n    \n    await new Promise(resolve => setTimeout(resolve, 500))\n  }\n}\n\n// 修改处理关闭方法\nconst handleClose = () => {\n  if (isOptimizing.value) {\n    // 如果正在优化，提示用户是否确认关闭\n    if (confirm('正在优化中，确定要关闭吗？')) {\n      isOptimizing.value = false\n      dialogVisible.value = false\n    }\n  } else {\n    dialogVisible.value = false\n  }\n}\n\n// 修改处理应用优化的方法\nconst handleApply = async () => {\n  try {\n    // 获取已优化的字段数量\n    const optimizedCount = fields.value.filter(f => \n      f.status === 'success' && f.optimizedValue !== f.currentValue\n    ).length\n\n    // 构建确认消息\n    const message = `确定要应用 ${optimizedCount} 条优化建议吗？此操作将覆盖原有内容且不可撤销。`\n\n    // 显示确认对话框\n    const confirmed = await ElMessageBox.confirm(\n      message,\n      '应用优化建议',\n      {\n        confirmButtonText: '确定应用',\n        cancelButtonText: '取消',\n        type: 'warning',\n        closeOnClickModal: false,\n        closeOnPressEscape: false,\n        distinguishCancelAndClose: true,\n        confirmButtonClass: 'el-button--danger',\n      }\n    )\n\n    if (confirmed === 'confirm') {\n      const optimizedData = {}\n      fields.value.forEach(field => {\n        if (field.status === 'success' && field.optimizedValue !== field.currentValue) {\n          // 解析字段路径\n          const pathParts = field.name.split('.')\n          \n          if (pathParts.length === 4) { // 数组字段，例如: work_experiences.0.description\n            const [collection, index, key] = pathParts.slice(1)\n            if (!optimizedData[pathParts[0]]) {\n              optimizedData[pathParts[0]] = []\n            }\n            if (!optimizedData[pathParts[0]][parseInt(index)]) {\n              optimizedData[pathParts[0]][parseInt(index)] = {}\n            }\n            optimizedData[pathParts[0]][parseInt(index)][key] = field.optimizedValue\n          } else { // 普通字段\n            const [category, key] = pathParts\n            if (category && key) {\n              if (!optimizedData[category]) {\n                optimizedData[category] = {}\n              }\n              optimizedData[category][key] = field.optimizedValue\n            } else {\n              optimizedData[field.name] = field.optimizedValue\n            }\n          }\n        }\n      })\n\n      emit('apply', optimizedData)\n      ElMessage.success('优化内容已保存')\n      dialogVisible.value = false\n    }\n  } catch (error) {\n    if (error !== 'cancel') {\n      console.error('应用优化失败:', error)\n      ElMessage.error('应用优化失败，请重试')\n    }\n  }\n}\n\n// 添加回对话框控制代码\nconst dialogVisible = computed({\n  get: () => props.modelValue,\n  set: (value) => emit('update:modelValue', value)\n})\n\n// 响应式布局\nconst { width } = useWindowSize()\nconst isMobile = computed(() => width.value < 640)\nconst dialogWidth = computed(() => {\n  if (isMobile.value) return '100%'\n  return '1000px'  // 增加宽度以适应内容\n})\n\n// 移除 onMounted 中的自动处理\nonMounted(() => {\n  if (props.profileData) {\n    fields.value = processFields()\n  }\n})\n\n// 监听对话框显示状态\nwatch(() => dialogVisible.value, (visible) => {\n  if (visible) {\n    fields.value = processFields()\n  }\n})\n\n// 修改表格列宽度\nconst columnWidths = {\n  label: 'w-[120px] min-w-[120px]',\n  content: 'w-[200px] min-w-[200px]',\n  suggestion: 'min-w-[300px] flex-1',\n  status: 'w-[60px] min-w-[60px]'\n}\n\n// 添加 watch 来监控数据变化\nwatch(() => props.profileData, (newVal) => {\n  if (newVal) {\n    fields.value = processFields()\n  }\n}, { immediate: true, deep: true })\n\n// 添加重试优化方法\nconst retryOptimize = async (field) => {\n  field.status = 'processing'\n  try {\n    const optimized = await mockOptimize(field, field.currentValue)\n    if (optimized) {\n      field.optimizedValue = optimized\n      field.status = 'success'\n    } else {\n      field.status = 'failed'\n    }\n  } catch (error) {\n    console.error('重新优化失败:', error)\n    field.status = 'failed'\n  }\n}\n\n// 添加重试所有失败的优化方法\nconst retryFailedOptimizations = async () => {\n  const failedFields = fields.value.filter(f => f.status === 'failed')\n  isOptimizing.value = true\n  \n  for (const field of failedFields) {\n    await retryOptimize(field)\n    // 添加短暂延迟\n    await new Promise(resolve => setTimeout(resolve, 500))\n  }\n  \n  isOptimizing.value = false\n}\n</script>\n\n<style scoped>\n/* 动画效果 */\n.list-move,\n.list-enter-active,\n.list-leave-active {\n  transition: all 0.5s ease;\n}\n\n.list-enter-from,\n.list-leave-to {\n  opacity: 0;\n  transform: translateY(30px);\n}\n\n.list-leave-active {\n  position: absolute;\n}\n\n/* 滚动条美化 */\n.overflow-y-auto {\n  scrollbar-width: thin;\n  scrollbar-color: rgba(0, 0, 0, 0.2) transparent;\n}\n\n.overflow-y-auto::-webkit-scrollbar {\n  width: 6px;\n}\n\n.overflow-y-auto::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n.overflow-y-auto::-webkit-scrollbar-thumb {\n  background-color: rgba(0, 0, 0, 0.2);\n  border-radius: 3px;\n}\n\n/* 文本换行 */\n.break-words {\n  word-break: break-word;\n  overflow-wrap: break-word;\n}\n\n/* 添加平滑滚动 */\n.overflow-y-auto {\n  scroll-behavior: smooth;\n}\n\n/* 优化滚动体验 */\n.field-row {\n  scroll-margin: 100px; /* 确保滚动时有足够的上下文 */\n}\n\n/* 优化滚动行为 */\n.scroll-smooth {\n  scroll-behavior: smooth;\n}\n\n/* 确保每个字段行高一致 */\n.field-row {\n  min-height: 60px; /* 与 itemHeight 对应 */\n}\n\n/* 移动端优化 */\n@media (max-width: 640px) {\n  .field-row {\n    min-height: auto;\n  }\n  \n  .optimize-dialog {\n    margin: 0;\n  }\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}