{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createBlock as _createBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"min-h-screen bg-gray-50\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_view = _resolveComponent(\"router-view\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 主要内容区域 \"), _createElementVNode(\"main\", null, [_createVNode(_component_router_view)]), _createCommentVNode(\" Toast 消息组件 \"), $setup.toastMessage ? (_openBlock(), _createBlock($setup[\"ToastMessage\"], {\n    key: 0,\n    message: $setup.toastMessage,\n    type: $setup.toastType,\n    duration: $setup.toastDuration,\n    onDestroy: $setup.handleToastDestroy\n  }, null, 8 /* PROPS */, [\"message\", \"type\", \"duration\"])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_createVNode","_component_router_view","$setup","toastMessage","_createBlock","key","message","type","toastType","duration","toastDuration","onDestroy","handleToastDestroy"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/App.vue"],"sourcesContent":["<template>\n  <div class=\"min-h-screen bg-gray-50\">\n\n    \n    <!-- 主要内容区域 -->\n    <main>\n      <router-view></router-view>\n    </main>\n    \n    \n    <!-- Toast 消息组件 -->\n    <ToastMessage \n      v-if=\"toastMessage\"\n      :message=\"toastMessage\"\n      :type=\"toastType\"\n      :duration=\"toastDuration\"\n      @destroy=\"handleToastDestroy\"\n    />\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted, defineAsyncComponent } from 'vue'\nimport { useRouter } from 'vue-router'\nimport { useAuthStore } from '@/stores/auth'\n\nconst router = useRouter()\nconst authStore = useAuthStore()\n\n// 不需要登录的路由\nconst publicRoutes = ['/login', '/register', '/reset-password']\n\n// Toast 相关状态\nconst toastMessage = ref('')\nconst toastType = ref('info')\nconst toastDuration = ref(3000)\n\n// 处理 Toast 销毁\nconst handleToastDestroy = () => {\n  toastMessage.value = ''\n  toastType.value = 'info'\n}\n\n// 计算是否显示头部和底部\nconst showHeaderAndFooter = computed(() => {\n  const path = router.currentRoute.value.path\n  return !publicRoutes.includes(path)\n})\n\n// 计算是否显示登录按钮\nconst showLoginButton = computed(() => !authStore.isAuthenticated)\n\nonMounted(() => {\n  // 检查认证状态\n  if (!authStore.isAuthenticated) {\n    const currentPath = router.currentRoute.value.path\n    // 只有非公开路由才需要重定向到登录页\n    if (!publicRoutes.includes(currentPath)) {\n      // 保存当前路径用于登录后重定向\n      const redirect = encodeURIComponent(currentPath)\n      router.push(`/login?redirect=${redirect}`)\n    }\n  }\n})\n\n// 异步导入组件\nconst ToastMessage = defineAsyncComponent(() => import('@/components/ToastMessage.vue'))\n</script>\n\n<style>\n.app-wrapper {\n  position: relative;\n  min-height: 100vh;\n}\n\n.bg-image {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 0;\n  pointer-events: none;\n}\n\n/* 可选：添加一个半透明遮罩让内容更易读 */\n.bg-image::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(255, 255, 255, 0.8);\n}\n\n/* 确保内容在背景之上 */\n.app-wrapper > *:not(.bg-image) {\n  position: relative;\n  z-index: 1;\n}\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAyB;;;uBAApCC,mBAAA,CAiBM,OAjBNC,UAiBM,GAdJC,mBAAA,YAAe,EACfC,mBAAA,CAEO,eADLC,YAAA,CAA2BC,sBAAA,E,GAI7BH,mBAAA,gBAAmB,EAEXI,MAAA,CAAAC,YAAY,I,cADpBC,YAAA,CAMEF,MAAA;IAjBNG,GAAA;IAaOC,OAAO,EAAEJ,MAAA,CAAAC,YAAY;IACrBI,IAAI,EAAEL,MAAA,CAAAM,SAAS;IACfC,QAAQ,EAAEP,MAAA,CAAAQ,aAAa;IACvBC,SAAO,EAAET,MAAA,CAAAU;8DAhBhBd,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}