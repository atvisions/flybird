{"ast":null,"code":"import { ref, reactive } from 'vue';\nimport { ElMessage } from 'element-plus';\nimport request from '@/utils/request';\nimport { useStore } from 'vuex';\nexport function useEmail() {\n  const store = useStore();\n  const state = reactive({\n    value: '',\n    // 邮箱地址\n    code: '',\n    // 验证码\n    password: '',\n    // 添加密码字段\n    loading: false,\n    countdown: 0,\n    sendingCode: false\n  });\n\n  // 发送验证码\n  const handleSendCode = async () => {\n    // 简单的邮箱格式验证\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(state.value)) {\n      ElMessage.error('请输入正确的邮箱地址');\n      return;\n    }\n    try {\n      state.sendingCode = true;\n      await request.post('/api/v1/users/account/send-email-code/', {\n        email: state.value\n      });\n      ElMessage.success('验证码已发送');\n      // 开始倒计时\n      state.countdown = 60;\n      const timer = setInterval(() => {\n        state.countdown--;\n        if (state.countdown <= 0) {\n          clearInterval(timer);\n        }\n      }, 1000);\n    } catch (error) {\n      console.error('发送验证码失败:', error);\n      ElMessage.error(error.response?.data?.detail || '发送验证码失败');\n    } finally {\n      state.sendingCode = false;\n    }\n  };\n\n  // 绑定邮箱\n  const handleUpdate = async () => {\n    if (!state.value || !state.code || store.state.userInfo?.data?.user?.email && !state.password) {\n      ElMessage.error('请填写完整信息');\n      return false;\n    }\n    try {\n      state.loading = true;\n      // 如果已有邮箱，使用更换邮箱接口\n      const url = store.state.userInfo?.data?.user?.email ? '/api/v1/users/account/change-email/' : '/api/v1/users/account/bind-email/';\n\n      // 根据是否是更换邮箱发送不同的参数\n      const data = store.state.userInfo?.data?.user?.email ? {\n        email: state.value,\n        code: state.code,\n        password: state.password\n      } : {\n        email: state.value,\n        code: state.code\n      };\n      await request.post(url, data);\n\n      // 更新 store 中的用户信息\n      await store.dispatch('fetchUserInfo');\n      ElMessage.success(store.state.userInfo?.data?.user?.email ? '邮箱更换成功' : '邮箱绑定成功');\n      return true;\n    } catch (error) {\n      console.error('邮箱操作失败:', error);\n      ElMessage.error(error.response?.data?.detail || '操作失败');\n      return false;\n    } finally {\n      state.loading = false;\n    }\n  };\n  return {\n    state,\n    handleSendCode,\n    handleUpdate\n  };\n}","map":{"version":3,"names":["ref","reactive","ElMessage","request","useStore","useEmail","store","state","value","code","password","loading","countdown","sendingCode","handleSendCode","emailRegex","test","error","post","email","success","timer","setInterval","clearInterval","console","response","data","detail","handleUpdate","userInfo","user","url","dispatch"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/composables/useEmail.js"],"sourcesContent":["import { ref, reactive } from 'vue'\nimport { ElMessage } from 'element-plus'\nimport request from '@/utils/request'\nimport { useStore } from 'vuex'\n\nexport function useEmail() {\n  const store = useStore()\n  const state = reactive({\n    value: '',  // 邮箱地址\n    code: '',   // 验证码\n    password: '', // 添加密码字段\n    loading: false,\n    countdown: 0,\n    sendingCode: false\n  })\n\n  // 发送验证码\n  const handleSendCode = async () => {\n    // 简单的邮箱格式验证\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n    if (!emailRegex.test(state.value)) {\n      ElMessage.error('请输入正确的邮箱地址')\n      return\n    }\n\n    try {\n      state.sendingCode = true\n      await request.post('/api/v1/users/account/send-email-code/', {\n        email: state.value\n      })\n      \n      ElMessage.success('验证码已发送')\n      // 开始倒计时\n      state.countdown = 60\n      const timer = setInterval(() => {\n        state.countdown--\n        if (state.countdown <= 0) {\n          clearInterval(timer)\n        }\n      }, 1000)\n    } catch (error) {\n      console.error('发送验证码失败:', error)\n      ElMessage.error(error.response?.data?.detail || '发送验证码失败')\n    } finally {\n      state.sendingCode = false\n    }\n  }\n\n  // 绑定邮箱\n  const handleUpdate = async () => {\n    if (!state.value || !state.code || (store.state.userInfo?.data?.user?.email && !state.password)) {\n      ElMessage.error('请填写完整信息')\n      return false\n    }\n\n    try {\n      state.loading = true\n      // 如果已有邮箱，使用更换邮箱接口\n      const url = store.state.userInfo?.data?.user?.email \n        ? '/api/v1/users/account/change-email/'\n        : '/api/v1/users/account/bind-email/'\n      \n      // 根据是否是更换邮箱发送不同的参数\n      const data = store.state.userInfo?.data?.user?.email\n        ? {\n            email: state.value,\n            code: state.code,\n            password: state.password\n          }\n        : {\n            email: state.value,\n            code: state.code\n          }\n      \n      await request.post(url, data)\n      \n      // 更新 store 中的用户信息\n      await store.dispatch('fetchUserInfo')\n      \n      ElMessage.success(store.state.userInfo?.data?.user?.email ? '邮箱更换成功' : '邮箱绑定成功')\n      return true\n    } catch (error) {\n      console.error('邮箱操作失败:', error)\n      ElMessage.error(error.response?.data?.detail || '操作失败')\n      return false\n    } finally {\n      state.loading = false\n    }\n  }\n\n  return {\n    state,\n    handleSendCode,\n    handleUpdate\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}