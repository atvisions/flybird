{"ast":null,"code":"import axios from 'axios';\nimport { ElMessage } from 'element-plus';\nimport { useAuthStore } from '@/stores/auth';\n\n// 创建 axios 实例\nconst service = axios.create({\n  baseURL: process.env.VUE_APP_API_BASE_URL || 'http://192.168.3.16:8080',\n  timeout: 15000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器\nservice.interceptors.request.use(config => {\n  // 从 auth store 获取 token\n  const authStore = useAuthStore();\n  const token = authStore.token;\n\n  // 如果有 token 就添加到请求头\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  console.log(error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(response => {\n  const res = response.data;\n\n  // 处理不同的响应状态码\n  if (res.code === 401) {\n    // token 过期或未登录\n    const authStore = useAuthStore();\n    authStore.logout(); // 清除登录状态\n    ElMessage({\n      message: '登录已过期，请重新登录',\n      type: 'error',\n      duration: 5 * 1000\n    });\n    // 可以在这里添加重定向到登录页的逻辑\n    return Promise.reject(new Error('未登录或登录已过期'));\n  }\n  if (res.code !== 200) {\n    ElMessage({\n      message: res.message || '请求失败',\n      type: 'error',\n      duration: 5 * 1000\n    });\n    return Promise.reject(new Error(res.message || '请求失败'));\n  }\n  return response;\n}, error => {\n  // 处理网络错误\n  let message = '请求失败';\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        message = '未登录或登录已过期';\n        // 清除登录状态\n        const authStore = useAuthStore();\n        authStore.logout();\n        break;\n      case 403:\n        message = '没有权限访问';\n        break;\n      case 404:\n        message = '请求的资源不存在';\n        break;\n      case 500:\n        message = '服务器错误';\n        break;\n      default:\n        message = error.message;\n    }\n  } else if (error.request) {\n    message = '网络连接失败';\n  }\n  ElMessage({\n    message: message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","ElMessage","useAuthStore","service","create","baseURL","process","env","VUE_APP_API_BASE_URL","timeout","headers","interceptors","request","use","config","authStore","token","error","console","log","Promise","reject","response","res","data","code","logout","message","type","duration","Error","status"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport { ElMessage } from 'element-plus'\nimport { useAuthStore } from '@/stores/auth'\n\n// 创建 axios 实例\nconst service = axios.create({\n  baseURL: process.env.VUE_APP_API_BASE_URL || 'http://192.168.3.16:8080',\n  timeout: 15000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n\n// 请求拦截器\nservice.interceptors.request.use(\n  config => {\n    // 从 auth store 获取 token\n    const authStore = useAuthStore()\n    const token = authStore.token\n    \n    // 如果有 token 就添加到请求头\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`\n    }\n    \n    return config\n  },\n  error => {\n    console.log(error)\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\nservice.interceptors.response.use(\n  response => {\n    const res = response.data\n\n    // 处理不同的响应状态码\n    if (res.code === 401) {\n      // token 过期或未登录\n      const authStore = useAuthStore()\n      authStore.logout()  // 清除登录状态\n      ElMessage({\n        message: '登录已过期，请重新登录',\n        type: 'error',\n        duration: 5 * 1000\n      })\n      // 可以在这里添加重定向到登录页的逻辑\n      return Promise.reject(new Error('未登录或登录已过期'))\n    }\n    \n    if (res.code !== 200) {\n      ElMessage({\n        message: res.message || '请求失败',\n        type: 'error',\n        duration: 5 * 1000\n      })\n      return Promise.reject(new Error(res.message || '请求失败'))\n    }\n    \n    return response\n  },\n  error => {\n    // 处理网络错误\n    let message = '请求失败'\n    if (error.response) {\n      switch (error.response.status) {\n        case 401:\n          message = '未登录或登录已过期'\n          // 清除登录状态\n          const authStore = useAuthStore()\n          authStore.logout()\n          break\n        case 403:\n          message = '没有权限访问'\n          break\n        case 404:\n          message = '请求的资源不存在'\n          break\n        case 500:\n          message = '服务器错误'\n          break\n        default:\n          message = error.message\n      }\n    } else if (error.request) {\n      message = '网络连接失败'\n    }\n    \n    ElMessage({\n      message: message,\n      type: 'error',\n      duration: 5 * 1000\n    })\n    return Promise.reject(error)\n  }\n)\n\nexport default service"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,cAAc;AACxC,SAASC,YAAY,QAAQ,eAAe;;AAE5C;AACA,MAAMC,OAAO,GAAGH,KAAK,CAACI,MAAM,CAAC;EAC3BC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,oBAAoB,IAAI,0BAA0B;EACvEC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAP,OAAO,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9BC,MAAM,IAAI;EACR;EACA,MAAMC,SAAS,GAAGb,YAAY,CAAC,CAAC;EAChC,MAAMc,KAAK,GAAGD,SAAS,CAACC,KAAK;;EAE7B;EACA,IAAIA,KAAK,EAAE;IACTF,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUM,KAAK,EAAE;EACrD;EAEA,OAAOF,MAAM;AACf,CAAC,EACDG,KAAK,IAAI;EACPC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EAClB,OAAOG,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAd,OAAO,CAACQ,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC/BS,QAAQ,IAAI;EACV,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAAI;;EAEzB;EACA,IAAID,GAAG,CAACE,IAAI,KAAK,GAAG,EAAE;IACpB;IACA,MAAMV,SAAS,GAAGb,YAAY,CAAC,CAAC;IAChCa,SAAS,CAACW,MAAM,CAAC,CAAC,EAAE;IACpBzB,SAAS,CAAC;MACR0B,OAAO,EAAE,aAAa;MACtBC,IAAI,EAAE,OAAO;MACbC,QAAQ,EAAE,CAAC,GAAG;IAChB,CAAC,CAAC;IACF;IACA,OAAOT,OAAO,CAACC,MAAM,CAAC,IAAIS,KAAK,CAAC,WAAW,CAAC,CAAC;EAC/C;EAEA,IAAIP,GAAG,CAACE,IAAI,KAAK,GAAG,EAAE;IACpBxB,SAAS,CAAC;MACR0B,OAAO,EAAEJ,GAAG,CAACI,OAAO,IAAI,MAAM;MAC9BC,IAAI,EAAE,OAAO;MACbC,QAAQ,EAAE,CAAC,GAAG;IAChB,CAAC,CAAC;IACF,OAAOT,OAAO,CAACC,MAAM,CAAC,IAAIS,KAAK,CAACP,GAAG,CAACI,OAAO,IAAI,MAAM,CAAC,CAAC;EACzD;EAEA,OAAOL,QAAQ;AACjB,CAAC,EACDL,KAAK,IAAI;EACP;EACA,IAAIU,OAAO,GAAG,MAAM;EACpB,IAAIV,KAAK,CAACK,QAAQ,EAAE;IAClB,QAAQL,KAAK,CAACK,QAAQ,CAACS,MAAM;MAC3B,KAAK,GAAG;QACNJ,OAAO,GAAG,WAAW;QACrB;QACA,MAAMZ,SAAS,GAAGb,YAAY,CAAC,CAAC;QAChCa,SAAS,CAACW,MAAM,CAAC,CAAC;QAClB;MACF,KAAK,GAAG;QACNC,OAAO,GAAG,QAAQ;QAClB;MACF,KAAK,GAAG;QACNA,OAAO,GAAG,UAAU;QACpB;MACF,KAAK,GAAG;QACNA,OAAO,GAAG,OAAO;QACjB;MACF;QACEA,OAAO,GAAGV,KAAK,CAACU,OAAO;IAC3B;EACF,CAAC,MAAM,IAAIV,KAAK,CAACL,OAAO,EAAE;IACxBe,OAAO,GAAG,QAAQ;EACpB;EAEA1B,SAAS,CAAC;IACR0B,OAAO,EAAEA,OAAO;IAChBC,IAAI,EAAE,OAAO;IACbC,QAAQ,EAAE,CAAC,GAAG;EAChB,CAAC,CAAC;EACF,OAAOT,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAed,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}