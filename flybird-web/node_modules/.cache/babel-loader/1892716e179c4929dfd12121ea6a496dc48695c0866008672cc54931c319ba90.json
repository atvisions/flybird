{"ast":null,"code":"import _objectSpread from \"/Users/liuzhao/Documents/Projects/flybird/flybird-web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport { ref, computed, onMounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { ElMessage } from 'element-plus';\nimport EditorToolbar from '../components/toolbar/EditorToolbar.vue';\nimport ComponentPanel from '../components/panels/ComponentPanel.vue';\nimport EditorCanvas from '../components/canvas/EditorCanvas.vue';\nimport PropertyPanel from '../components/panels/PropertyPanel.vue';\nimport { useTemplateStore } from '../store/template';\nimport { useComponentStore } from '../store/component';\n\n// 模板数据\n\nexport default {\n  __name: 'TemplateEditor',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const template = ref({\n      id: null,\n      name: '新建模板',\n      category: null,\n      layout: [],\n      styles: {}\n    });\n\n    // 计算属性，确保数据的安全访问\n    const templateData = computed({\n      get: () => ({\n        layout: template.value?.layout || [],\n        styles: template.value?.styles || {}\n      }),\n      set: value => {\n        if (template.value) {\n          template.value.layout = value.layout;\n          template.value.styles = value.styles;\n        }\n      }\n    });\n\n    // 选中的组件\n    const selectedComponent = ref(null);\n\n    // 获取可用组件列表\n    const componentStore = useComponentStore();\n    const availableComponents = computed(() => componentStore.components);\n\n    // 路由参数\n    const route = useRoute();\n    const templateStore = useTemplateStore();\n\n    // 初始化\n    onMounted(async () => {\n      // 如果有模板ID，加载模板数据\n      if (route.params.id) {\n        const data = await templateStore.getTemplate(route.params.id);\n        template.value = _objectSpread({}, data);\n      }\n\n      // 加载可用组件\n      await componentStore.loadComponents();\n\n      // 添加默认组件\n      const defaultComponents = [{\n        type: 'basic_info',\n        position: {\n          x: 0,\n          y: 0\n        },\n        data: componentStore.components.find(c => c.type === 'basic_info')?.demo_data || {}\n      }, {\n        type: 'job_intention',\n        position: {\n          x: 0,\n          y: 4\n        },\n        data: componentStore.components.find(c => c.type === 'job_intention')?.demo_data || {}\n      }, {\n        type: 'education',\n        position: {\n          x: 0,\n          y: 8\n        },\n        data: componentStore.components.find(c => c.type === 'education')?.demo_data || {}\n      }];\n\n      // 如果是新建模板，添加默认组件\n      if (!route.params.id) {\n        defaultComponents.forEach(component => {\n          handleAddComponent(component);\n        });\n      }\n    });\n\n    // 处理添加组件\n    const handleAddComponent = component => {\n      console.log('Handling add component:', component);\n      const id = `component_${Date.now()}`;\n\n      // 为布局组件设置默认数据\n      let defaultData = {};\n      if (component.type === 'column') {\n        defaultData = {\n          columns: 2,\n          gap: '20px'\n        };\n      } else if (component.type === 'section') {\n        defaultData = {\n          title: '分组标题',\n          subtitle: '副标题'\n        };\n      } else if (component.type === 'card') {\n        defaultData = {\n          title: '卡片标题',\n          shadow: 'always'\n        };\n      }\n\n      // 创建新的布局项，包含组件数据\n      const newLayoutItem = {\n        i: id,\n        x: component.position?.x || 0,\n        y: component.position?.y || template.value.layout.length * 4,\n        w: 12,\n        h: 4,\n        type: component.type,\n        data: _objectSpread(_objectSpread({}, defaultData), component.demo_data) || component.data || {},\n        styles: component.styles || {}\n      };\n      console.log('New layout item:', newLayoutItem);\n\n      // 更新布局数据\n      template.value.layout = [...(template.value.layout || []), newLayoutItem];\n\n      // 选中新添加的组件\n      selectedComponent.value = {\n        id,\n        type: component.type,\n        data: newLayoutItem.data,\n        styles: newLayoutItem.styles\n      };\n      console.log('Updated template:', template.value);\n    };\n\n    // 处理选中组件\n    const handleSelectComponent = componentId => {\n      const component = template.value?.layout?.find(item => item.i === componentId);\n      selectedComponent.value = component ? {\n        id: componentId,\n        type: component.type,\n        data: component.data || {},\n        styles: component.styles || {}\n      } : null;\n    };\n\n    // 处理组件更新\n    const handleComponentUpdate = (componentId, data) => {\n      const index = template.value?.layout?.findIndex(item => item.i === componentId);\n      if (index > -1) {\n        template.value.layout[index] = _objectSpread(_objectSpread({}, template.value.layout[index]), data);\n      }\n    };\n\n    // 处理布局更新\n    const handleLayoutUpdate = layout => {\n      if (template.value) {\n        template.value.layout = layout;\n      }\n    };\n\n    // 保存模板\n    const handleSave = async () => {\n      try {\n        await templateStore.saveTemplate(template.value);\n        ElMessage.success('保存成功');\n      } catch (error) {\n        ElMessage.error('保存失败');\n      }\n    };\n\n    // 预览模板\n    const handlePreview = () => {\n      // 实现预览逻辑\n    };\n\n    // 发布模板\n    const handlePublish = async () => {\n      try {\n        await templateStore.publishTemplate(template.value.id);\n        ElMessage.success('发布成功');\n      } catch (error) {\n        ElMessage.error('发布失败');\n      }\n    };\n    const __returned__ = {\n      template,\n      templateData,\n      selectedComponent,\n      componentStore,\n      availableComponents,\n      route,\n      templateStore,\n      handleAddComponent,\n      handleSelectComponent,\n      handleComponentUpdate,\n      handleLayoutUpdate,\n      handleSave,\n      handlePreview,\n      handlePublish,\n      ref,\n      computed,\n      onMounted,\n      get useRoute() {\n        return useRoute;\n      },\n      get ElMessage() {\n        return ElMessage;\n      },\n      EditorToolbar,\n      ComponentPanel,\n      EditorCanvas,\n      PropertyPanel,\n      get useTemplateStore() {\n        return useTemplateStore;\n      },\n      get useComponentStore() {\n        return useComponentStore;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","useRoute","ElMessage","EditorToolbar","ComponentPanel","EditorCanvas","PropertyPanel","useTemplateStore","useComponentStore","template","id","name","category","layout","styles","templateData","get","value","set","selectedComponent","componentStore","availableComponents","components","route","templateStore","params","data","getTemplate","_objectSpread","loadComponents","defaultComponents","type","position","x","y","find","c","demo_data","forEach","component","handleAddComponent","console","log","Date","now","defaultData","columns","gap","title","subtitle","shadow","newLayoutItem","i","length","w","h","handleSelectComponent","componentId","item","handleComponentUpdate","index","findIndex","handleLayoutUpdate","handleSave","saveTemplate","success","error","handlePreview","handlePublish","publishTemplate"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/template-editor/views/TemplateEditor.vue"],"sourcesContent":["<!-- 模板编辑器主视图 -->\n<template>\n  <div class=\"template-editor\">\n    <!-- 顶部工具栏 -->\n    <editor-toolbar \n      :template=\"template.value || {}\"\n      @save=\"handleSave\"\n      @preview=\"handlePreview\"\n      @publish=\"handlePublish\"\n      @update:name=\"name => template.value.name = name\"\n    />\n    \n    <!-- 主要编辑区域 -->\n    <div class=\"editor-main\">\n      <!-- 左侧组件面板 -->\n      <component-panel\n        :components=\"availableComponents\"\n        @add-component=\"handleAddComponent\"\n      />\n      \n      <!-- 中间画布区域 -->\n      <editor-canvas\n        v-model=\"templateData.layout\"\n        :styles=\"templateData.styles\"\n        @select=\"handleSelectComponent\"\n        @add-component=\"handleAddComponent\"\n      />\n      \n      <!-- 右侧属性面板 -->\n      <property-panel\n        v-if=\"selectedComponent\"\n        :component=\"selectedComponent\"\n        @update=\"handleComponentUpdate\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted } from 'vue'\nimport { useRoute } from 'vue-router'\nimport { ElMessage } from 'element-plus'\nimport EditorToolbar from '../components/toolbar/EditorToolbar.vue'\nimport ComponentPanel from '../components/panels/ComponentPanel.vue'\nimport EditorCanvas from '../components/canvas/EditorCanvas.vue'\nimport PropertyPanel from '../components/panels/PropertyPanel.vue'\nimport { useTemplateStore } from '../store/template'\nimport { useComponentStore } from '../store/component'\n\n// 模板数据\nconst template = ref({\n  id: null,\n  name: '新建模板',\n  category: null,\n  layout: [],\n  styles: {}\n})\n\n// 计算属性，确保数据的安全访问\nconst templateData = computed({\n  get: () => ({\n    layout: template.value?.layout || [],\n    styles: template.value?.styles || {}\n  }),\n  set: (value) => {\n    if (template.value) {\n      template.value.layout = value.layout\n      template.value.styles = value.styles\n    }\n  }\n})\n\n// 选中的组件\nconst selectedComponent = ref(null)\n\n// 获取可用组件列表\nconst componentStore = useComponentStore()\nconst availableComponents = computed(() => componentStore.components)\n\n// 路由参数\nconst route = useRoute()\nconst templateStore = useTemplateStore()\n\n// 初始化\nonMounted(async () => {\n  // 如果有模板ID，加载模板数据\n  if (route.params.id) {\n    const data = await templateStore.getTemplate(route.params.id)\n    template.value = { ...data }\n  }\n  \n  // 加载可用组件\n  await componentStore.loadComponents()\n  \n  // 添加默认组件\n  const defaultComponents = [\n    {\n      type: 'basic_info',\n      position: { x: 0, y: 0 },\n      data: componentStore.components.find(c => c.type === 'basic_info')?.demo_data || {}\n    },\n    {\n      type: 'job_intention',\n      position: { x: 0, y: 4 },\n      data: componentStore.components.find(c => c.type === 'job_intention')?.demo_data || {}\n    },\n    {\n      type: 'education',\n      position: { x: 0, y: 8 },\n      data: componentStore.components.find(c => c.type === 'education')?.demo_data || {}\n    }\n  ]\n  \n  // 如果是新建模板，添加默认组件\n  if (!route.params.id) {\n    defaultComponents.forEach(component => {\n      handleAddComponent(component)\n    })\n  }\n})\n\n// 处理添加组件\nconst handleAddComponent = (component) => {\n  console.log('Handling add component:', component)\n  \n  const id = `component_${Date.now()}`\n  \n  // 为布局组件设置默认数据\n  let defaultData = {}\n  if (component.type === 'column') {\n    defaultData = {\n      columns: 2,\n      gap: '20px'\n    }\n  } else if (component.type === 'section') {\n    defaultData = {\n      title: '分组标题',\n      subtitle: '副标题'\n    }\n  } else if (component.type === 'card') {\n    defaultData = {\n      title: '卡片标题',\n      shadow: 'always'\n    }\n  }\n  \n  // 创建新的布局项，包含组件数据\n  const newLayoutItem = {\n    i: id,\n    x: component.position?.x || 0,\n    y: component.position?.y || template.value.layout.length * 4,\n    w: 12,\n    h: 4,\n    type: component.type,\n    data: { ...defaultData, ...component.demo_data } || component.data || {},\n    styles: component.styles || {}\n  }\n  \n  console.log('New layout item:', newLayoutItem)\n  \n  // 更新布局数据\n  template.value.layout = [...(template.value.layout || []), newLayoutItem]\n  \n  // 选中新添加的组件\n  selectedComponent.value = {\n    id,\n    type: component.type,\n    data: newLayoutItem.data,\n    styles: newLayoutItem.styles\n  }\n  \n  console.log('Updated template:', template.value)\n}\n\n// 处理选中组件\nconst handleSelectComponent = (componentId) => {\n  const component = template.value?.layout?.find(item => item.i === componentId)\n  selectedComponent.value = component\n    ? {\n        id: componentId,\n        type: component.type,\n        data: component.data || {},\n        styles: component.styles || {}\n      }\n    : null\n}\n\n// 处理组件更新\nconst handleComponentUpdate = (componentId, data) => {\n  const index = template.value?.layout?.findIndex(item => item.i === componentId)\n  if (index > -1) {\n    template.value.layout[index] = {\n      ...template.value.layout[index],\n      ...data\n    }\n  }\n}\n\n// 处理布局更新\nconst handleLayoutUpdate = (layout) => {\n  if (template.value) {\n    template.value.layout = layout\n  }\n}\n\n// 保存模板\nconst handleSave = async () => {\n  try {\n    await templateStore.saveTemplate(template.value)\n    ElMessage.success('保存成功')\n  } catch (error) {\n    ElMessage.error('保存失败')\n  }\n}\n\n// 预览模板\nconst handlePreview = () => {\n  // 实现预览逻辑\n}\n\n// 发布模板\nconst handlePublish = async () => {\n  try {\n    await templateStore.publishTemplate(template.value.id)\n    ElMessage.success('发布成功')\n  } catch (error) {\n    ElMessage.error('发布失败')\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.template-editor {\n  @apply h-full flex flex-col;\n  \n  .editor-main {\n    @apply flex-1 flex;\n    height: calc(100vh - 64px); // 减去顶部工具栏高度\n  }\n}\n</style> "],"mappings":";;;;AAuCA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,KAAI;AAC7C,SAASC,QAAQ,QAAQ,YAAW;AACpC,SAASC,SAAS,QAAQ,cAAa;AACvC,OAAOC,aAAa,MAAM,yCAAwC;AAClE,OAAOC,cAAc,MAAM,yCAAwC;AACnE,OAAOC,YAAY,MAAM,uCAAsC;AAC/D,OAAOC,aAAa,MAAM,wCAAuC;AACjE,SAASC,gBAAgB,QAAQ,mBAAkB;AACnD,SAASC,iBAAiB,QAAQ,oBAAmB;;AAErD;;;;;;;;IACA,MAAMC,QAAQ,GAAGX,GAAG,CAAC;MACnBY,EAAE,EAAE,IAAI;MACRC,IAAI,EAAE,MAAM;MACZC,QAAQ,EAAE,IAAI;MACdC,MAAM,EAAE,EAAE;MACVC,MAAM,EAAE,CAAC;IACX,CAAC;;IAED;IACA,MAAMC,YAAY,GAAGhB,QAAQ,CAAC;MAC5BiB,GAAG,EAAEA,CAAA,MAAO;QACVH,MAAM,EAAEJ,QAAQ,CAACQ,KAAK,EAAEJ,MAAM,IAAI,EAAE;QACpCC,MAAM,EAAEL,QAAQ,CAACQ,KAAK,EAAEH,MAAM,IAAI,CAAC;MACrC,CAAC,CAAC;MACFI,GAAG,EAAGD,KAAK,IAAK;QACd,IAAIR,QAAQ,CAACQ,KAAK,EAAE;UAClBR,QAAQ,CAACQ,KAAK,CAACJ,MAAM,GAAGI,KAAK,CAACJ,MAAK;UACnCJ,QAAQ,CAACQ,KAAK,CAACH,MAAM,GAAGG,KAAK,CAACH,MAAK;QACrC;MACF;IACF,CAAC;;IAED;IACA,MAAMK,iBAAiB,GAAGrB,GAAG,CAAC,IAAI;;IAElC;IACA,MAAMsB,cAAc,GAAGZ,iBAAiB,CAAC;IACzC,MAAMa,mBAAmB,GAAGtB,QAAQ,CAAC,MAAMqB,cAAc,CAACE,UAAU;;IAEpE;IACA,MAAMC,KAAK,GAAGtB,QAAQ,CAAC;IACvB,MAAMuB,aAAa,GAAGjB,gBAAgB,CAAC;;IAEvC;IACAP,SAAS,CAAC,YAAY;MACpB;MACA,IAAIuB,KAAK,CAACE,MAAM,CAACf,EAAE,EAAE;QACnB,MAAMgB,IAAI,GAAG,MAAMF,aAAa,CAACG,WAAW,CAACJ,KAAK,CAACE,MAAM,CAACf,EAAE;QAC5DD,QAAQ,CAACQ,KAAK,GAAAW,aAAA,KAAQF,IAAI,CAAC;MAC7B;;MAEA;MACA,MAAMN,cAAc,CAACS,cAAc,CAAC;;MAEpC;MACA,MAAMC,iBAAiB,GAAG,CACxB;QACEC,IAAI,EAAE,YAAY;QAClBC,QAAQ,EAAE;UAAEC,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE;QAAE,CAAC;QACxBR,IAAI,EAAEN,cAAc,CAACE,UAAU,CAACa,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACL,IAAI,KAAK,YAAY,CAAC,EAAEM,SAAS,IAAI,CAAC;MACpF,CAAC,EACD;QACEN,IAAI,EAAE,eAAe;QACrBC,QAAQ,EAAE;UAAEC,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE;QAAE,CAAC;QACxBR,IAAI,EAAEN,cAAc,CAACE,UAAU,CAACa,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACL,IAAI,KAAK,eAAe,CAAC,EAAEM,SAAS,IAAI,CAAC;MACvF,CAAC,EACD;QACEN,IAAI,EAAE,WAAW;QACjBC,QAAQ,EAAE;UAAEC,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE;QAAE,CAAC;QACxBR,IAAI,EAAEN,cAAc,CAACE,UAAU,CAACa,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACL,IAAI,KAAK,WAAW,CAAC,EAAEM,SAAS,IAAI,CAAC;MACnF,EACF;;MAEA;MACA,IAAI,CAACd,KAAK,CAACE,MAAM,CAACf,EAAE,EAAE;QACpBoB,iBAAiB,CAACQ,OAAO,CAACC,SAAS,IAAI;UACrCC,kBAAkB,CAACD,SAAS;QAC9B,CAAC;MACH;IACF,CAAC;;IAED;IACA,MAAMC,kBAAkB,GAAID,SAAS,IAAK;MACxCE,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEH,SAAS;MAEhD,MAAM7B,EAAE,GAAG,aAAaiC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAC;;MAEnC;MACA,IAAIC,WAAW,GAAG,CAAC;MACnB,IAAIN,SAAS,CAACR,IAAI,KAAK,QAAQ,EAAE;QAC/Bc,WAAW,GAAG;UACZC,OAAO,EAAE,CAAC;UACVC,GAAG,EAAE;QACP;MACF,CAAC,MAAM,IAAIR,SAAS,CAACR,IAAI,KAAK,SAAS,EAAE;QACvCc,WAAW,GAAG;UACZG,KAAK,EAAE,MAAM;UACbC,QAAQ,EAAE;QACZ;MACF,CAAC,MAAM,IAAIV,SAAS,CAACR,IAAI,KAAK,MAAM,EAAE;QACpCc,WAAW,GAAG;UACZG,KAAK,EAAE,MAAM;UACbE,MAAM,EAAE;QACV;MACF;;MAEA;MACA,MAAMC,aAAa,GAAG;QACpBC,CAAC,EAAE1C,EAAE;QACLuB,CAAC,EAAEM,SAAS,CAACP,QAAQ,EAAEC,CAAC,IAAI,CAAC;QAC7BC,CAAC,EAAEK,SAAS,CAACP,QAAQ,EAAEE,CAAC,IAAIzB,QAAQ,CAACQ,KAAK,CAACJ,MAAM,CAACwC,MAAM,GAAG,CAAC;QAC5DC,CAAC,EAAE,EAAE;QACLC,CAAC,EAAE,CAAC;QACJxB,IAAI,EAAEQ,SAAS,CAACR,IAAI;QACpBL,IAAI,EAAEE,aAAA,CAAAA,aAAA,KAAKiB,WAAW,GAAKN,SAAS,CAACF,SAAS,KAAME,SAAS,CAACb,IAAI,IAAI,CAAC,CAAC;QACxEZ,MAAM,EAAEyB,SAAS,CAACzB,MAAM,IAAI,CAAC;MAC/B;MAEA2B,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAES,aAAa;;MAE7C;MACA1C,QAAQ,CAACQ,KAAK,CAACJ,MAAM,GAAG,CAAC,IAAIJ,QAAQ,CAACQ,KAAK,CAACJ,MAAM,IAAI,EAAE,CAAC,EAAEsC,aAAa;;MAExE;MACAhC,iBAAiB,CAACF,KAAK,GAAG;QACxBP,EAAE;QACFqB,IAAI,EAAEQ,SAAS,CAACR,IAAI;QACpBL,IAAI,EAAEyB,aAAa,CAACzB,IAAI;QACxBZ,MAAM,EAAEqC,aAAa,CAACrC;MACxB;MAEA2B,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEjC,QAAQ,CAACQ,KAAK;IACjD;;IAEA;IACA,MAAMuC,qBAAqB,GAAIC,WAAW,IAAK;MAC7C,MAAMlB,SAAS,GAAG9B,QAAQ,CAACQ,KAAK,EAAEJ,MAAM,EAAEsB,IAAI,CAACuB,IAAI,IAAIA,IAAI,CAACN,CAAC,KAAKK,WAAW;MAC7EtC,iBAAiB,CAACF,KAAK,GAAGsB,SAAQ,GAC9B;QACE7B,EAAE,EAAE+C,WAAW;QACf1B,IAAI,EAAEQ,SAAS,CAACR,IAAI;QACpBL,IAAI,EAAEa,SAAS,CAACb,IAAI,IAAI,CAAC,CAAC;QAC1BZ,MAAM,EAAEyB,SAAS,CAACzB,MAAM,IAAI,CAAC;MAC/B,IACA,IAAG;IACT;;IAEA;IACA,MAAM6C,qBAAqB,GAAGA,CAACF,WAAW,EAAE/B,IAAI,KAAK;MACnD,MAAMkC,KAAK,GAAGnD,QAAQ,CAACQ,KAAK,EAAEJ,MAAM,EAAEgD,SAAS,CAACH,IAAI,IAAIA,IAAI,CAACN,CAAC,KAAKK,WAAW;MAC9E,IAAIG,KAAK,GAAG,CAAC,CAAC,EAAE;QACdnD,QAAQ,CAACQ,KAAK,CAACJ,MAAM,CAAC+C,KAAK,CAAC,GAAAhC,aAAA,CAAAA,aAAA,KACvBnB,QAAQ,CAACQ,KAAK,CAACJ,MAAM,CAAC+C,KAAK,CAAC,GAC5BlC,IAAG,CACR;MACF;IACF;;IAEA;IACA,MAAMoC,kBAAkB,GAAIjD,MAAM,IAAK;MACrC,IAAIJ,QAAQ,CAACQ,KAAK,EAAE;QAClBR,QAAQ,CAACQ,KAAK,CAACJ,MAAM,GAAGA,MAAK;MAC/B;IACF;;IAEA;IACA,MAAMkD,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMvC,aAAa,CAACwC,YAAY,CAACvD,QAAQ,CAACQ,KAAK;QAC/Cf,SAAS,CAAC+D,OAAO,CAAC,MAAM;MAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdhE,SAAS,CAACgE,KAAK,CAAC,MAAM;MACxB;IACF;;IAEA;IACA,MAAMC,aAAa,GAAGA,CAAA,KAAM;MAC1B;IAAA,CACF;;IAEA;IACA,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAM5C,aAAa,CAAC6C,eAAe,CAAC5D,QAAQ,CAACQ,KAAK,CAACP,EAAE;QACrDR,SAAS,CAAC+D,OAAO,CAAC,MAAM;MAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdhE,SAAS,CAACgE,KAAK,CAAC,MAAM;MACxB;IACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}