{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock, Fragment as _Fragment, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"template-selector\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_select = _resolveComponent(\"v-select\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_v_select, {\n    modelValue: _ctx.selectedTemplate,\n    \"onUpdate:modelValue\": [_cache[0] || (_cache[0] = $event => _ctx.selectedTemplate = $event), $setup.handleTemplateChange],\n    items: $setup.templates,\n    \"item-title\": \"name\",\n    \"item-value\": \"id\",\n    label: \"选择模板\"\n  }, null, 8 /* PROPS */, [\"modelValue\", \"items\"])]), _createCommentVNode(\" 根据模板类型渲染不同的布局组件 \"), (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.getLayoutComponent(_ctx.currentTemplate?.layout_config.type)), {\n    config: _ctx.currentTemplate?.layout_config,\n    \"onUpdate:config\": _ctx.handleLayoutUpdate\n  }, null, 40 /* PROPS, NEED_HYDRATION */, [\"config\", \"onUpdate:config\"]))], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementBlock","_Fragment","_createElementVNode","_hoisted_1","_createVNode","_component_v_select","modelValue","_ctx","selectedTemplate","$event","$setup","handleTemplateChange","items","templates","label","_createCommentVNode","_createBlock","_resolveDynamicComponent","getLayoutComponent","currentTemplate","layout_config","type","config","handleLayoutUpdate"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/views/resume-editor/components/ToolbarPanel.vue"],"sourcesContent":["<template>\n  <div class=\"template-selector\">\n    <v-select\n      v-model=\"selectedTemplate\"\n      :items=\"templates\"\n      item-title=\"name\"\n      item-value=\"id\"\n      label=\"选择模板\"\n      @update:model-value=\"handleTemplateChange\"\n    />\n  </div>\n  \n  <!-- 根据模板类型渲染不同的布局组件 -->\n  <component\n    :is=\"getLayoutComponent(currentTemplate?.layout_config.type)\"\n    :config=\"currentTemplate?.layout_config\"\n    @update:config=\"handleLayoutUpdate\"\n  />\n</template>\n\n<script setup>\nimport { ref, onMounted, watch } from 'vue'\nimport axios from 'axios'\nimport draggable from 'vuedraggable'\n\nconst props = defineProps({\n  modelValue: {\n    type: String,\n    default: 'layout'\n  }\n})\n\nconst emit = defineEmits(['update:modelValue'])\n\nconst activeTab = ref(props.modelValue)\nconst loading = ref(false)\nconst layoutComponents = ref([])\nconst basicComponents = ref([])\nconst templates = ref([])\n\nconst tabs = [\n  { code: 'template', text: '模板', icon: 'mdi-file-document-outline' },\n  { code: 'layout', text: '布局', icon: 'mdi-view-dashboard' },\n  { code: 'component', text: '组件', icon: 'mdi-puzzle' },\n  { code: 'file', text: '文件', icon: 'mdi-file' }\n]\n\nwatch(activeTab, (newValue) => {\n  emit('update:modelValue', newValue)\n  if (newValue === 'layout' && layoutComponents.value.length === 0) {\n    fetchLayoutComponents()\n  } else if (newValue === 'component' && basicComponents.value.length === 0) {\n    fetchBasicComponents()\n  } else if (newValue === 'template' && templates.value.length === 0) {\n    fetchTemplates()\n  }\n})\n\nconst handleDragStart = (event, component) => {\n  console.log('ToolbarPanel - dragstart:', component)\n  event.dataTransfer.effectAllowed = 'copy'\n  event.dataTransfer.dropEffect = 'copy'\n  event.target.classList.add('dragging')\n  const data = JSON.stringify(component)\n  console.log('ToolbarPanel - Setting data:', data)\n  event.dataTransfer.setData('application/json', data)\n}\n\nconst fetchLayoutComponents = async () => {\n  try {\n    loading.value = true\n    const response = await axios.get('/api/v1/resume/component-categories/main_categories/')\n    const categories = response.data\n    console.log('ToolbarPanel - Categories:', categories)\n    const layoutCategory = categories.find(cat => cat.code === 'layout')\n    if (layoutCategory) {\n      const componentsResponse = await axios.get(`/api/v1/resume/component-categories/${layoutCategory.id}/components/`)\n      console.log('ToolbarPanel - Layout components:', componentsResponse.data)\n      layoutComponents.value = componentsResponse.data\n    }\n  } catch (error) {\n    console.error('ToolbarPanel - 获取布局组件失败:', error)\n  } finally {\n    loading.value = false\n  }\n}\n\nconst fetchBasicComponents = async () => {\n  try {\n    loading.value = true\n    const response = await axios.get('/api/v1/resume/component-categories/main_categories/')\n    const categories = response.data\n    const componentCategory = categories.find(cat => cat.code === 'component')\n    if (componentCategory) {\n      const componentsResponse = await axios.get(`/api/v1/resume/component-categories/${componentCategory.id}/components/`)\n      basicComponents.value = componentsResponse.data\n    }\n  } catch (error) {\n    console.error('获取基本组件失败:', error)\n  } finally {\n    loading.value = false\n  }\n}\n\n// 获取模板列表\nconst fetchTemplates = async () => {\n  try {\n    loading.value = true\n    const response = await axios.get('/api/v1/resume/templates/')\n    templates.value = response.data\n  } catch (error) {\n    console.error('获取模板列表失败:', error)\n  } finally {\n    loading.value = false\n  }\n}\n\n// 切换模板\nconst handleTemplateChange = async (templateId) => {\n  const template = templates.value.find(t => t.id === templateId)\n  if (template) {\n    emit('template-change', template)\n  }\n}\n\nonMounted(() => {\n  if (activeTab.value === 'layout') {\n    fetchLayoutComponents()\n  }\n})\n</script>\n\n<style scoped>\n.toolbar-panel {\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  background: #fff;\n}\n\n.panel-tabs {\n  width: 48px;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  border-right: 1px solid #e4e7ed;\n  background: #f5f7fa;\n}\n\n.tab-item {\n  height: 48px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  writing-mode: vertical-rl;\n  color: #909399;\n}\n\n.tab-item:hover {\n  background: #ecf5ff;\n  color: #409eff;\n}\n\n.tab-item.active {\n  background: #ecf5ff;\n  color: #409eff;\n  border-right: 2px solid #409eff;\n}\n\n.tab-text {\n  font-size: 12px;\n  margin-top: 4px;\n}\n\n.panel-content {\n  flex: 1;\n  height: 100%;\n  overflow: hidden;\n}\n\n.panel-section {\n  height: 100%;\n  overflow-y: auto;\n  padding: 12px;\n}\n\n.component-blocks {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.component-block {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 12px;\n  background: #f5f7fa;\n  border: 1px solid #e4e7ed;\n  border-radius: 4px;\n  cursor: move;\n}\n\n.component-block:hover {\n  background: #ecf5ff;\n  border-color: #409eff;\n}\n\n.block-title {\n  font-size: 14px;\n  color: #606266;\n}\n\n.empty-tip {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  color: #909399;\n  gap: 8px;\n}\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAmB;;;uBADhCC,mBAAA,CAAAC,SAAA,SACEC,mBAAA,CASM,OATNC,UASM,GARJC,YAAA,CAOEC,mBAAA;IATNC,UAAA,EAGeC,IAAA,CAAAC,gBAAgB;IAH/B,wB,oCAGeD,IAAA,CAAAC,gBAAgB,GAAAC,MAAA,GAKJC,MAAA,CAAAC,oBAAoB,C;IAJxCC,KAAK,EAAEF,MAAA,CAAAG,SAAS;IACjB,YAAU,EAAC,MAAM;IACjB,YAAU,EAAC,IAAI;IACfC,KAAK,EAAC;sDAKVC,mBAAA,qBAAwB,G,cACxBC,YAAA,CAIEC,wBAjBJ,CAcSV,IAAA,CAAAW,kBAAkB,CAACX,IAAA,CAAAY,eAAe,EAAEC,aAAa,CAACC,IAAI;IAC1DC,MAAM,EAAEf,IAAA,CAAAY,eAAe,EAAEC,aAAa;IACtC,iBAAa,EAAEb,IAAA,CAAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}