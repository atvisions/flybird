{"ast":null,"code":"//这里是\nimport request from '@/utils/request';\n\n// 档案数据管理\nconst profile = {\n  // 获取完整档案数据\n  getData() {\n    console.log('Calling getData...');\n    return request.get('/api/v1/users/profile/data/').then(response => {\n      console.log('getData raw response:', response);\n      return response;\n    });\n  },\n  // 获取档案完整度（仅在档案页面使用）\n  getCompleteness() {\n    return request.get('/api/v1/users/profile/completeness/');\n  },\n  // 更新模块数据\n  updateModule(type, data) {\n    // 确保技能模块使用正确的类型名\n    const moduleType = type === 'skill' ? 'skills' : type;\n    const id = data.id;\n    if (id) {\n      // 编辑现有数据\n      return request({\n        url: `/api/v1/users/profile/${moduleType}/${id}/`,\n        method: 'put',\n        data\n      });\n    } else {\n      // 对于 basic_info，使用不同的处理方式，因为它是一对一关系\n      if (moduleType === 'basic_info') {\n        return request({\n          url: `/api/v1/users/profile/${moduleType}/`,\n          method: 'put',\n          data\n        });\n      }\n      // 其他模块的新增\n      return request({\n        url: `/api/v1/users/profile/${moduleType}/`,\n        method: 'post',\n        data\n      });\n    }\n  },\n  // 删除模块项目\n  deleteModuleItem(type, id) {\n    // 处理特殊的模块类型名称\n    const moduleTypeMap = {\n      'skill': 'skills',\n      'certificate': 'certificates'\n      // 添加其他需要映射的类型...\n    };\n    // 确保技能模块使用正确的类型名\n    const moduleType = type === 'skill' ? 'skills' : type;\n    return request({\n      url: `/api/v1/users/profile/${moduleType}/${id}/`,\n      method: 'delete'\n    });\n  },\n  uploadBackground(formData) {\n    return request({\n      url: '/api/v1/users/profile/background/upload/',\n      method: 'post',\n      headers: {\n        // 让 axios 自动设置 Content-Type 和 boundary\n        'Content-Type': undefined\n      },\n      data: formData\n    });\n  },\n  // 获取布局配置（保留特殊接口）\n  getLayout() {\n    return request.get('/api/v1/users/profile/layout/');\n  },\n  // 更新布局配置（保留特殊接口）\n  updateLayout(data) {\n    return request({\n      url: '/api/v1/users/profile/layout/',\n      method: 'put',\n      data\n    });\n  },\n  // 上传头像\n  uploadAvatar: async file => {\n    console.log('Profile API - 开始上传头像:', {\n      file,\n      size: file.size,\n      type: file.type\n    });\n    const formData = new FormData();\n    formData.append('avatar', file);\n    try {\n      const response = await request({\n        url: '/api/v1/users/profile/avatar/',\n        method: 'post',\n        data: formData,\n        headers: {\n          // 让浏览器自动设置正确的 Content-Type 和 boundary\n          'Content-Type': undefined\n        }\n      });\n      console.log('Profile API - 头像上传响应:', response);\n\n      // 如果上传成功，同时更新用户中心的头像\n      if (response?.data?.code === 200) {\n        try {\n          console.log('Profile API - 开始同步用户中心头像');\n          await request({\n            url: '/api/v1/users/userInfo/avatar/',\n            method: 'post',\n            data: formData,\n            headers: {\n              // 让浏览器自动设置正确的 Content-Type 和 boundary\n              'Content-Type': undefined\n            }\n          });\n          console.log('Profile API - 用户中心头像同步成功');\n        } catch (error) {\n          console.error('同步用户中心头像失败:', error);\n        }\n      }\n      return response;\n    } catch (error) {\n      console.error('头像上传失败:', error);\n      throw error;\n    }\n  }\n};\nexport default profile;","map":{"version":3,"names":["request","profile","getData","console","log","get","then","response","getCompleteness","updateModule","type","data","moduleType","id","url","method","deleteModuleItem","moduleTypeMap","uploadBackground","formData","headers","undefined","getLayout","updateLayout","uploadAvatar","file","size","FormData","append","code","error"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/api/profile.js"],"sourcesContent":["//这里是\nimport request from '@/utils/request'\n\n// 档案数据管理\nconst profile = {\n  // 获取完整档案数据\n  getData() {\n    console.log('Calling getData...')\n    return request.get('/api/v1/users/profile/data/').then(response => {\n      console.log('getData raw response:', response)\n      return response\n    })\n  },\n\n  // 获取档案完整度（仅在档案页面使用）\n  getCompleteness() {\n    return request.get('/api/v1/users/profile/completeness/')\n  },\n\n  // 更新模块数据\n  updateModule(type, data) {\n    // 确保技能模块使用正确的类型名\n    const moduleType = type === 'skill' ? 'skills' : type\n    const id = data.id\n    \n    if (id) {\n      // 编辑现有数据\n      return request({\n        url: `/api/v1/users/profile/${moduleType}/${id}/`,\n        method: 'put',\n        data\n      })\n    } else {\n      // 对于 basic_info，使用不同的处理方式，因为它是一对一关系\n      if (moduleType === 'basic_info') {\n        return request({\n          url: `/api/v1/users/profile/${moduleType}/`,\n          method: 'put',\n          data\n        })\n      }\n      // 其他模块的新增\n      return request({\n        url: `/api/v1/users/profile/${moduleType}/`,\n        method: 'post',\n        data\n      })\n    }\n  },\n\n  // 删除模块项目\n  deleteModuleItem(type, id) {\n    // 处理特殊的模块类型名称\n    const moduleTypeMap = {\n      'skill': 'skills',\n      'certificate': 'certificates',\n      // 添加其他需要映射的类型...\n    }\n    // 确保技能模块使用正确的类型名\n    const moduleType = type === 'skill' ? 'skills' : type\n    return request({\n      url: `/api/v1/users/profile/${moduleType}/${id}/`,\n      method: 'delete'\n    })\n  },\n\n  uploadBackground(formData) {\n    return request({\n      url: '/api/v1/users/profile/background/upload/',\n      method: 'post',\n      headers: {\n        // 让 axios 自动设置 Content-Type 和 boundary\n        'Content-Type': undefined\n      },\n      data: formData\n    })\n  },\n\n  // 获取布局配置（保留特殊接口）\n  getLayout() {\n    return request.get('/api/v1/users/profile/layout/')\n  },\n\n  // 更新布局配置（保留特殊接口）\n  updateLayout(data) {\n    return request({\n      url: '/api/v1/users/profile/layout/',\n      method: 'put',\n      data\n    })\n  },\n\n  // 上传头像\n  uploadAvatar: async (file) => {\n    console.log('Profile API - 开始上传头像:', {\n      file,\n      size: file.size,\n      type: file.type\n    })\n    const formData = new FormData()\n    formData.append('avatar', file)\n    \n    try {\n      const response = await request({\n        url: '/api/v1/users/profile/avatar/',\n        method: 'post',\n        data: formData,\n        headers: {\n          // 让浏览器自动设置正确的 Content-Type 和 boundary\n          'Content-Type': undefined\n        }\n      })\n      console.log('Profile API - 头像上传响应:', response)\n      \n      // 如果上传成功，同时更新用户中心的头像\n      if (response?.data?.code === 200) {\n        try {\n          console.log('Profile API - 开始同步用户中心头像')\n          await request({\n            url: '/api/v1/users/userInfo/avatar/',\n            method: 'post',\n            data: formData,\n            headers: {\n              // 让浏览器自动设置正确的 Content-Type 和 boundary\n              'Content-Type': undefined\n            }\n          })\n          console.log('Profile API - 用户中心头像同步成功')\n        } catch (error) {\n          console.error('同步用户中心头像失败:', error)\n        }\n      }\n      \n      return response\n    } catch (error) {\n      console.error('头像上传失败:', error)\n      throw error\n    }\n  },\n\n}\n\nexport default profile "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}