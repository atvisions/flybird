{"ast":null,"code":"import axios from 'axios';\nimport { ElMessage } from 'element-plus';\nimport { useAuthStore } from '@/stores/auth';\nimport router from '@/router';\n\n// 创建 axios 实例\nconst service = axios.create({\n  baseURL: process.env.VUE_APP_API_BASE_URL || 'http://192.168.3.16:8080',\n  timeout: 15000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 不需要token的白名单路径\nconst whiteList = ['/api/auth/login', '/api/auth/register', '/api/auth/captcha'\n// 添加其他不需要token的路径\n];\n\n// 请求拦截器\nservice.interceptors.request.use(config => {\n  const authStore = useAuthStore();\n  const token = authStore.token;\n\n  // 如果请求路径不在白名单中，且没有token，直接拒绝请求\n  if (!whiteList.includes(config.url) && !token) {\n    // 如果不是登录页面，重定向到登录页\n    if (router.currentRoute.value.path !== '/login') {\n      router.push({\n        path: '/login',\n        query: {\n          redirect: router.currentRoute.value.fullPath\n        }\n      });\n    }\n    return Promise.reject(new Error('请先登录'));\n  }\n\n  // 有token则添加到请求头\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(response => {\n  const res = response.data;\n  if (res.code === 401 && !isRedirecting) {\n    isRedirecting = true;\n    const authStore = useAuthStore();\n    authStore.logout();\n\n    // 如果不是登录页面，才显示提示并重定向\n    if (router.currentRoute.value.path !== '/login') {\n      ElMessage({\n        message: '登录已过期，请重新登录',\n        type: 'warning',\n        duration: 3000\n      });\n\n      // 记住当前路由，登录后可以跳回来\n      const redirect = router.currentRoute.value.fullPath;\n      router.push({\n        path: '/login',\n        query: {\n          redirect\n        }\n      });\n    }\n\n    // 重置重定向状态\n    setTimeout(() => {\n      isRedirecting = false;\n    }, 1000);\n    return Promise.reject(new Error('未登录或登录已过期'));\n  }\n  if (res.code !== 200) {\n    ElMessage({\n      message: res.message || '请求失败',\n      type: 'error',\n      duration: 3000\n    });\n    return Promise.reject(new Error(res.message || '请求失败'));\n  }\n  return response;\n}, error => {\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        if (!isRedirecting) {\n          isRedirecting = true;\n          const authStore = useAuthStore();\n          authStore.logout();\n          if (router.currentRoute.value.path !== '/login') {\n            ElMessage({\n              message: '未登录或登录已过期',\n              type: 'warning',\n              duration: 3000\n            });\n            const redirect = router.currentRoute.value.fullPath;\n            router.push({\n              path: '/login',\n              query: {\n                redirect\n              }\n            });\n          }\n          setTimeout(() => {\n            isRedirecting = false;\n          }, 1000);\n        }\n        break;\n      case 403:\n        ElMessage({\n          message: '没有权限访问',\n          type: 'error',\n          duration: 3000\n        });\n        break;\n      default:\n        ElMessage({\n          message: error.message || '请求失败',\n          type: 'error',\n          duration: 3000\n        });\n    }\n  } else if (error.request) {\n    ElMessage({\n      message: '网络连接失败',\n      type: 'error',\n      duration: 3000\n    });\n  }\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","ElMessage","useAuthStore","router","service","create","baseURL","process","env","VUE_APP_API_BASE_URL","timeout","headers","whiteList","interceptors","request","use","config","authStore","token","includes","url","currentRoute","value","path","push","query","redirect","fullPath","Promise","reject","Error","error","response","res","data","code","isRedirecting","logout","message","type","duration","setTimeout","status"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport { ElMessage } from 'element-plus'\nimport { useAuthStore } from '@/stores/auth'\nimport router from '@/router'\n\n// 创建 axios 实例\nconst service = axios.create({\n  baseURL: process.env.VUE_APP_API_BASE_URL || 'http://192.168.3.16:8080',\n  timeout: 15000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n\n// 不需要token的白名单路径\nconst whiteList = [\n  '/api/auth/login',\n  '/api/auth/register',\n  '/api/auth/captcha',\n  // 添加其他不需要token的路径\n]\n\n// 请求拦截器\nservice.interceptors.request.use(\n  config => {\n    const authStore = useAuthStore()\n    const token = authStore.token\n    \n    // 如果请求路径不在白名单中，且没有token，直接拒绝请求\n    if (!whiteList.includes(config.url) && !token) {\n      // 如果不是登录页面，重定向到登录页\n      if (router.currentRoute.value.path !== '/login') {\n        router.push({\n          path: '/login',\n          query: { redirect: router.currentRoute.value.fullPath }\n        })\n      }\n      return Promise.reject(new Error('请先登录'))\n    }\n    \n    // 有token则添加到请求头\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`\n    }\n    \n    return config\n  },\n  error => {\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\nservice.interceptors.response.use(\n  response => {\n    const res = response.data\n\n    if (res.code === 401 && !isRedirecting) {\n      isRedirecting = true\n      const authStore = useAuthStore()\n      authStore.logout()\n      \n      // 如果不是登录页面，才显示提示并重定向\n      if (router.currentRoute.value.path !== '/login') {\n        ElMessage({\n          message: '登录已过期，请重新登录',\n          type: 'warning',\n          duration: 3000\n        })\n        \n        // 记住当前路由，登录后可以跳回来\n        const redirect = router.currentRoute.value.fullPath\n        router.push({\n          path: '/login',\n          query: { redirect }\n        })\n      }\n      \n      // 重置重定向状态\n      setTimeout(() => {\n        isRedirecting = false\n      }, 1000)\n      \n      return Promise.reject(new Error('未登录或登录已过期'))\n    }\n    \n    if (res.code !== 200) {\n      ElMessage({\n        message: res.message || '请求失败',\n        type: 'error',\n        duration: 3000\n      })\n      return Promise.reject(new Error(res.message || '请求失败'))\n    }\n    \n    return response\n  },\n  error => {\n    if (error.response) {\n      switch (error.response.status) {\n        case 401:\n          if (!isRedirecting) {\n            isRedirecting = true\n            const authStore = useAuthStore()\n            authStore.logout()\n            \n            if (router.currentRoute.value.path !== '/login') {\n              ElMessage({\n                message: '未登录或登录已过期',\n                type: 'warning',\n                duration: 3000\n              })\n              \n              const redirect = router.currentRoute.value.fullPath\n              router.push({\n                path: '/login',\n                query: { redirect }\n              })\n            }\n            \n            setTimeout(() => {\n              isRedirecting = false\n            }, 1000)\n          }\n          break\n        case 403:\n          ElMessage({\n            message: '没有权限访问',\n            type: 'error',\n            duration: 3000\n          })\n          break\n        default:\n          ElMessage({\n            message: error.message || '请求失败',\n            type: 'error',\n            duration: 3000\n          })\n      }\n    } else if (error.request) {\n      ElMessage({\n        message: '网络连接失败',\n        type: 'error',\n        duration: 3000\n      })\n    }\n    \n    return Promise.reject(error)\n  }\n)\n\nexport default service"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}