{"ast":null,"code":"import { defineStore } from 'pinia';\nimport { user } from '@/api/user';\nimport { showToast } from '@/components/ToastMessage';\nexport const useUserStore = defineStore('user', {\n  state: () => ({\n    userInfo: null,\n    loading: false,\n    error: null\n  }),\n  getters: {\n    userBasicInfo: state => state.userInfo,\n    username: state => state.userInfo?.username,\n    avatar: state => state.userInfo?.avatar,\n    isLoading: state => state.loading,\n    hasError: state => state.error !== null\n  },\n  actions: {\n    async getUserInfo() {\n      try {\n        this.loading = true;\n        this.error = null;\n        const response = await user.getUserInfo();\n        if (response?.data?.code === 200) {\n          this.userInfo = response.data.data;\n          return this.userInfo;\n        }\n        throw new Error(response?.data?.message || '获取用户信息失败');\n      } catch (error) {\n        console.error('获取用户信息失败:', error);\n        this.error = error.message;\n        throw error;\n      } finally {\n        this.loading = false;\n      }\n    },\n    clearUserInfo() {\n      this.userInfo = null;\n      this.loading = false;\n      this.error = null;\n    }\n  }\n});","map":{"version":3,"names":["defineStore","user","showToast","useUserStore","state","userInfo","loading","error","getters","userBasicInfo","username","avatar","isLoading","hasError","actions","getUserInfo","response","data","code","Error","message","console","clearUserInfo"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/stores/user.js"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { user } from '@/api/user'\nimport { showToast } from '@/components/ToastMessage'\n\nexport const useUserStore = defineStore('user', {\n  state: () => ({\n    userInfo: null,\n    loading: false,\n    error: null\n  }),\n\n  getters: {\n    userBasicInfo: (state) => state.userInfo,\n    username: (state) => state.userInfo?.username,\n    avatar: (state) => state.userInfo?.avatar,\n    isLoading: (state) => state.loading,\n    hasError: (state) => state.error !== null\n  },\n\n  actions: {\n    async getUserInfo() {\n      try {\n        this.loading = true\n        this.error = null\n        \n        const response = await user.getUserInfo()\n        \n        if (response?.data?.code === 200) {\n          this.userInfo = response.data.data\n          return this.userInfo\n        }\n        \n        throw new Error(response?.data?.message || '获取用户信息失败')\n      } catch (error) {\n        console.error('获取用户信息失败:', error)\n        this.error = error.message\n        throw error\n      } finally {\n        this.loading = false\n      }\n    },\n\n    clearUserInfo() {\n      this.userInfo = null\n      this.loading = false\n      this.error = null\n    }\n  }\n}) "],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,IAAI,QAAQ,YAAY;AACjC,SAASC,SAAS,QAAQ,2BAA2B;AAErD,OAAO,MAAMC,YAAY,GAAGH,WAAW,CAAC,MAAM,EAAE;EAC9CI,KAAK,EAAEA,CAAA,MAAO;IACZC,QAAQ,EAAE,IAAI;IACdC,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE;EACT,CAAC,CAAC;EAEFC,OAAO,EAAE;IACPC,aAAa,EAAGL,KAAK,IAAKA,KAAK,CAACC,QAAQ;IACxCK,QAAQ,EAAGN,KAAK,IAAKA,KAAK,CAACC,QAAQ,EAAEK,QAAQ;IAC7CC,MAAM,EAAGP,KAAK,IAAKA,KAAK,CAACC,QAAQ,EAAEM,MAAM;IACzCC,SAAS,EAAGR,KAAK,IAAKA,KAAK,CAACE,OAAO;IACnCO,QAAQ,EAAGT,KAAK,IAAKA,KAAK,CAACG,KAAK,KAAK;EACvC,CAAC;EAEDO,OAAO,EAAE;IACP,MAAMC,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,IAAI,CAACT,OAAO,GAAG,IAAI;QACnB,IAAI,CAACC,KAAK,GAAG,IAAI;QAEjB,MAAMS,QAAQ,GAAG,MAAMf,IAAI,CAACc,WAAW,CAAC,CAAC;QAEzC,IAAIC,QAAQ,EAAEC,IAAI,EAAEC,IAAI,KAAK,GAAG,EAAE;UAChC,IAAI,CAACb,QAAQ,GAAGW,QAAQ,CAACC,IAAI,CAACA,IAAI;UAClC,OAAO,IAAI,CAACZ,QAAQ;QACtB;QAEA,MAAM,IAAIc,KAAK,CAACH,QAAQ,EAAEC,IAAI,EAAEG,OAAO,IAAI,UAAU,CAAC;MACxD,CAAC,CAAC,OAAOb,KAAK,EAAE;QACdc,OAAO,CAACd,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;QACjC,IAAI,CAACA,KAAK,GAAGA,KAAK,CAACa,OAAO;QAC1B,MAAMb,KAAK;MACb,CAAC,SAAS;QACR,IAAI,CAACD,OAAO,GAAG,KAAK;MACtB;IACF,CAAC;IAEDgB,aAAaA,CAAA,EAAG;MACd,IAAI,CAACjB,QAAQ,GAAG,IAAI;MACpB,IAAI,CAACC,OAAO,GAAG,KAAK;MACpB,IAAI,CAACC,KAAK,GAAG,IAAI;IACnB;EACF;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}