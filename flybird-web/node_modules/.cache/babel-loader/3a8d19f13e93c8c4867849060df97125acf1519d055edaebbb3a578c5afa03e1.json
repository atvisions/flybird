{"ast":null,"code":"import { defineStore } from 'pinia';\nimport { auth } from '@/api/auth';\nimport { user } from '@/api/user';\nexport const useUserStore = defineStore('user', {\n  state: () => ({\n    isLoggedIn: false,\n    userInfo: null,\n    rememberMe: false // 添加记住我状态\n  }),\n  actions: {\n    async login(credentials, rememberMe = false) {\n      try {\n        const response = await auth.loginWithPassword({\n          account: credentials.account.trim(),\n          password: credentials.password\n        });\n        if (response?.data?.code === 200) {\n          const {\n            access,\n            refresh\n          } = response.data.data;\n\n          // 根据记住我选项设置不同的过期时间\n          const expiresIn = rememberMe ? 7 * 24 * 60 * 60 * 1000 : 24 * 60 * 60 * 1000;\n          const expiresAt = new Date().getTime() + expiresIn;\n\n          // 存储 token 和过期时间\n          localStorage.setItem('token', access);\n          localStorage.setItem('refresh_token', refresh);\n          localStorage.setItem('token_expires_at', expiresAt);\n          localStorage.setItem('remember_me', rememberMe);\n\n          // 如果记住我，保存账号\n          if (rememberMe) {\n            localStorage.setItem('remembered_account', credentials.account);\n          } else {\n            localStorage.removeItem('remembered_account');\n          }\n          this.isLoggedIn = true;\n          this.rememberMe = rememberMe;\n\n          // 获取用户信息\n          await this.getUserInfo();\n          return true;\n        }\n        return false;\n      } catch (error) {\n        console.error('Login failed:', error);\n        throw error;\n      }\n    },\n    async logout() {\n      try {\n        await auth.logout();\n      } finally {\n        this.clearUserData();\n      }\n    },\n    clearUserData() {\n      localStorage.removeItem('token');\n      localStorage.removeItem('refresh_token');\n      localStorage.removeItem('token_expires_at');\n      localStorage.removeItem('remember_me');\n      this.isLoggedIn = false;\n      this.userInfo = null;\n      this.rememberMe = false;\n    },\n    async getUserInfo() {\n      try {\n        const response = await user.getUserInfo();\n        if (response?.data?.code === 200) {\n          this.userInfo = response.data.data;\n          return this.userInfo;\n        }\n        return null;\n      } catch (error) {\n        console.error('Get user info failed:', error);\n        throw error;\n      }\n    },\n    // 检查 token 是否过期\n    isTokenExpired() {\n      const expiresAt = localStorage.getItem('token_expires_at');\n      if (!expiresAt) return true;\n      return new Date().getTime() > parseInt(expiresAt);\n    }\n  }\n});","map":{"version":3,"names":["defineStore","auth","user","useUserStore","state","isLoggedIn","userInfo","rememberMe","actions","login","credentials","response","loginWithPassword","account","trim","password","data","code","access","refresh","expiresIn","expiresAt","Date","getTime","localStorage","setItem","removeItem","getUserInfo","error","console","logout","clearUserData","isTokenExpired","getItem","parseInt"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/stores/user.js"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { auth } from '@/api/auth'\nimport { user } from '@/api/user'\n\nexport const useUserStore = defineStore('user', {\n  state: () => ({\n    isLoggedIn: false,\n    userInfo: null,\n    rememberMe: false  // 添加记住我状态\n  }),\n\n  actions: {\n    async login(credentials, rememberMe = false) {\n      try {\n        const response = await auth.loginWithPassword({\n          account: credentials.account.trim(),\n          password: credentials.password\n        })\n        \n        if (response?.data?.code === 200) {\n          const { access, refresh } = response.data.data\n          \n          // 根据记住我选项设置不同的过期时间\n          const expiresIn = rememberMe ? 7 * 24 * 60 * 60 * 1000 : 24 * 60 * 60 * 1000\n          const expiresAt = new Date().getTime() + expiresIn\n          \n          // 存储 token 和过期时间\n          localStorage.setItem('token', access)\n          localStorage.setItem('refresh_token', refresh)\n          localStorage.setItem('token_expires_at', expiresAt)\n          localStorage.setItem('remember_me', rememberMe)\n          \n          // 如果记住我，保存账号\n          if (rememberMe) {\n            localStorage.setItem('remembered_account', credentials.account)\n          } else {\n            localStorage.removeItem('remembered_account')\n          }\n          \n          this.isLoggedIn = true\n          this.rememberMe = rememberMe\n          \n          // 获取用户信息\n          await this.getUserInfo()\n          return true\n        }\n        return false\n      } catch (error) {\n        console.error('Login failed:', error)\n        throw error\n      }\n    },\n\n    async logout() {\n      try {\n        await auth.logout()\n      } finally {\n        this.clearUserData()\n      }\n    },\n\n    clearUserData() {\n      localStorage.removeItem('token')\n      localStorage.removeItem('refresh_token')\n      localStorage.removeItem('token_expires_at')\n      localStorage.removeItem('remember_me')\n      this.isLoggedIn = false\n      this.userInfo = null\n      this.rememberMe = false\n    },\n\n    async getUserInfo() {\n      try {\n        const response = await user.getUserInfo()\n        if (response?.data?.code === 200) {\n          this.userInfo = response.data.data\n          return this.userInfo\n        }\n        return null\n      } catch (error) {\n        console.error('Get user info failed:', error)\n        throw error\n      }\n    },\n\n    // 检查 token 是否过期\n    isTokenExpired() {\n      const expiresAt = localStorage.getItem('token_expires_at')\n      if (!expiresAt) return true\n      return new Date().getTime() > parseInt(expiresAt)\n    }\n  }\n}) "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}