{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass, createBlock as _createBlock } from \"vue\";\nimport _imports_0 from '@/assets/logo.png';\nconst _hoisted_1 = {\n  class: \"bg-white shadow-sm\"\n};\nconst _hoisted_2 = {\n  class: \"mx-auto px-4 sm:px-6 lg:px-8\",\n  \"aria-label\": \"Top\"\n};\nconst _hoisted_3 = {\n  class: \"flex items-center justify-between h-16\"\n};\nconst _hoisted_4 = {\n  class: \"flex\"\n};\nconst _hoisted_5 = {\n  class: \"hidden md:flex space-x-8\"\n};\nconst _hoisted_6 = {\n  class: \"flex items-center\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(\"header\", _hoisted_1, [_createElementVNode(\"nav\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createCommentVNode(\" Logo \"), _createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_router_link, {\n    to: \"/\",\n    class: \"flex items-center\"\n  }, {\n    default: _withCtx(() => _cache[0] || (_cache[0] = [_createElementVNode(\"img\", {\n      class: \"h-8 w-auto\",\n      src: _imports_0,\n      alt: \"Logo\"\n    }, null, -1 /* HOISTED */)])),\n    _: 1 /* STABLE */\n  })]), _createCommentVNode(\" 导航链接 - 仅在非移动端显示 \"), _createElementVNode(\"div\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.mainTabs, tab => {\n    return _openBlock(), _createBlock(_component_router_link, {\n      key: tab.path,\n      to: tab.path,\n      class: _normalizeClass([\"text-gray-500 hover:text-gray-900 px-3 py-2 text-sm font-medium\", {\n        'text-blue-500': $setup.route.path === tab.path\n      }])\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(tab.name), 1 /* TEXT */)]),\n      _: 2 /* DYNAMIC */\n    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"to\", \"class\"]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" 右侧按钮区域 \"), _createElementVNode(\"div\", _hoisted_6, [_createCommentVNode(\" 我的页面链接 - 仅在非移动端显示 \"), _createVNode(_component_router_link, {\n    to: _ctx.myTab.path,\n    class: _normalizeClass([\"hidden md:flex items-center text-gray-500 hover:text-gray-900 px-3 py-2 text-sm font-medium\", {\n      'text-blue-500': $setup.route.path === _ctx.myTab.path\n    }])\n  }, {\n    default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.myTab.name), 1 /* TEXT */)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"to\", \"class\"]), _createCommentVNode(\" 其他按钮（如果有的话） \")])])])]);\n}","map":{"version":3,"names":["_imports_0","class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_createCommentVNode","_hoisted_4","_createVNode","_component_router_link","to","default","_withCtx","_cache","src","alt","_","_hoisted_5","_Fragment","_renderList","_ctx","mainTabs","tab","_createBlock","key","path","_normalizeClass","$setup","route","_createTextVNode","_toDisplayString","name","_hoisted_6","myTab"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/components/HeadView.vue"],"sourcesContent":["<template>\n  <header class=\"bg-white shadow-sm\">\n    <nav class=\"mx-auto px-4 sm:px-6 lg:px-8\" aria-label=\"Top\">\n      <div class=\"flex items-center justify-between h-16\">\n        <!-- Logo -->\n        <div class=\"flex\">\n          <router-link to=\"/\" class=\"flex items-center\">\n            <img class=\"h-8 w-auto\" src=\"@/assets/logo.png\" alt=\"Logo\" />\n          </router-link>\n        </div>\n\n        <!-- 导航链接 - 仅在非移动端显示 -->\n        <div class=\"hidden md:flex space-x-8\">\n          <router-link\n            v-for=\"tab in mainTabs\"\n            :key=\"tab.path\"\n            :to=\"tab.path\"\n            class=\"text-gray-500 hover:text-gray-900 px-3 py-2 text-sm font-medium\"\n            :class=\"{ 'text-blue-500': route.path === tab.path }\"\n          >\n            {{ tab.name }}\n          </router-link>\n        </div>\n\n        <!-- 右侧按钮区域 -->\n        <div class=\"flex items-center\">\n          <!-- 我的页面链接 - 仅在非移动端显示 -->\n          <router-link\n            :to=\"myTab.path\"\n            class=\"hidden md:flex items-center text-gray-500 hover:text-gray-900 px-3 py-2 text-sm font-medium\"\n            :class=\"{ 'text-blue-500': route.path === myTab.path }\"\n          >\n            {{ myTab.name }}\n          </router-link>\n\n          <!-- 其他按钮（如果有的话） -->\n        </div>\n      </div>\n    </nav>\n  </header>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted, onUnmounted, watch } from 'vue'\nimport { useRouter, useRoute } from 'vue-router'\nimport { useStore } from 'vuex'\nimport defaultAvatarImage from '@/assets/images/default-avatar.png'\nimport navigation from '@/config/navigation.json'\nimport { eventBus } from '@/utils/eventBus'\nimport { useLogout } from '@/composables/useLogout'\nimport { API_URL } from '@/config'\nimport { showToast } from '@/components/ToastMessage'\n\n// 导入所需的图标\nimport {\n  DocumentTextIcon,\n  UserIcon,\n  Cog6ToothIcon,\n  ArrowRightOnRectangleIcon,\n  BellIcon,\n  HeartIcon,\n  ShieldCheckIcon,\n  UserCircleIcon,\n  WrenchScrewdriverIcon\n} from '@heroicons/vue/24/outline'\n\n// 添加图标映射函数\nconst getIcon = (menuKey) => {\n  const iconMap = {  \n    // 用户菜单图标\n    'profile': UserCircleIcon,\n    'resumes': DocumentTextIcon,\n    'favorites': HeartIcon,\n    'notifications': BellIcon,\n    'settings': Cog6ToothIcon,\n    'security': ShieldCheckIcon,\n    'account': WrenchScrewdriverIcon,\n    'logout': ArrowRightOnRectangleIcon,\n  }\n  return iconMap[menuKey] || UserIcon // 默认返回 UserIcon\n}\n\n// 状态管理\nconst router = useRouter()\nconst route = useRoute()\nconst store = useStore()\nconst mobileMenuOpen = ref(false)\nconst userMenuOpen = ref(false)\nconst resourceMenuOpen = ref(false)\nconst mobileSubmenuOpen = ref({})\nconst userBasicInfo = ref(null)\n\n// 监听 store 中的用户信息变化，更新用户基本信息\nwatch(\n  () => store.state.userInfo,\n  (newUserInfo) => {\n    if (newUserInfo?.data?.basic_info) {\n      userBasicInfo.value = {\n        ...newUserInfo.data.basic_info,\n        ...newUserInfo.data.user\n      }\n    }\n  },\n  { immediate: true, deep: true }\n)\n\n// 响应式计算\nconst isMobile = computed(() => {\n  return window.innerWidth < 1024\n})\n\n\n\n\n// 统一的菜单关闭处理\nconst closeMenus = (e) => {\n  if (!e.target.closest('.resource-menu')) {\n    resourceMenuOpen.value = false\n  }\n  if (!e.target.closest('.user-menu')) {\n    userMenuOpen.value = false\n  }\n}\n\n// 移动端菜单开关\nconst toggleMenu = () => {\n  mobileMenuOpen.value = !mobileMenuOpen.value\n  if (mobileMenuOpen.value) {\n    userMenuOpen.value = false\n    resourceMenuOpen.value = false\n    mobileSubmenuOpen.value = {}\n  }\n}\n\n\n\n\n// 判断当前路由是否匹配\nconst isCurrentRoute = (href) => {\n  return route.path === href\n}\n\n\n\n// 用户昵称计算属性\nconst username = computed(() => {\n  const username = store.state.userInfo?.data?.user?.username\n  return username || '未设置昵称'\n})\n\n// 头像 URL 计算属性\nconst avatarUrl = computed(() => {\n  const avatar = store.state.userInfo?.data?.basic_info?.avatar\n  if (!avatar) return defaultAvatarImage\n  \n  if (avatar.startsWith('http') || avatar.startsWith('data:')) {\n    return avatar\n  }\n  return `${API_URL}${avatar}`\n})\n\n// 获取用户信息的函数\nconst fetchUserInfo = async () => {\n  if (store.state.isAuthenticated) {\n    try {\n      await store.dispatch('fetchUserInfo')\n      userBasicInfo.value = {\n        ...store.state.userInfo?.data?.basic_info,\n        ...store.state.userInfo?.data?.user\n      }\n    } catch (error) {\n      console.error('Failed to fetch user info:', error)\n    }\n  }\n}\n\n\n// 生命周期钩子，监听事件，监听登录状态\nonMounted(async () => {\n  document.addEventListener('click', closeMenus)\n  window.addEventListener('resize', () => {\n    if (!isMobile.value) {\n      mobileMenuOpen.value = false\n    }\n  })\n  \n  if (store.state.isAuthenticated) {\n    try {\n      await fetchUserInfo()\n    } catch (error) {\n      console.error('Failed to fetch user info:', error)\n      if (error.response?.status === 401) {\n        store.commit('SET_LOGGED_IN', false)\n      }\n    }\n  }\n  \n  eventBus.on('avatar-updated', handleAvatarUpdate)\n})\n\n// 保持原有的事件清理\nonUnmounted(() => {\n  eventBus.off('avatar-updated', handleAvatarUpdate)\n})\n\n// 简化头像更新处理方法\nconst handleAvatarUpdate = (newAvatar) => {\n  store.commit('SET_USER_INFO', {\n    ...store.state.userInfo,\n    data: {\n      ...store.state.userInfo?.data,\n      basic_info: {\n        ...store.state.userInfo?.data?.basic_info,\n        avatar: newAvatar\n      }\n    }\n  })\n}\n// 从 store 获取用户信息和认证状态，并计算是否已登录\nconst isAuthenticated = computed(() => store.state.isAuthenticated)\n// 监听登录状态变化\nwatch(() => store.state.isAuthenticated, (newValue) => {\n  if (newValue) {\n    fetchUserInfo()\n  } else {\n    userBasicInfo.value = null\n  }\n}, { immediate: true })\n\n// 监听头像更新\nwatch(() => store.state.avatarUpdateTime, () => {\n  if (store.state.isAuthenticated) {\n    fetchUserInfo()\n  }\n})\n\n// 处理图片加载错误\nconst handleImageError = (e) => {\n  e.target.src = defaultAvatarImage\n}\n\n// 用户类型\nconst userType = computed(() => '普通用户')\n\n// 用户菜单选项\nconst userMenuItems = computed(() => {\n  return [\n    {\n      key: 'profile',\n      label: '我的档案',\n      icon: 'profile',\n      action: () => router.push('/user?tab=profile')\n    },\n    {\n      key: 'resumes',\n      label: '我的简历',\n      icon: 'resumes',\n      action: () => router.push('/user?tab=resumes')\n    },\n    {\n      key:'creations',\n      label:'我的创作',\n      icon:'creations',\n      action: () => router.push('/user?tab=creations')\n    },\n    {\n      key: 'portfolio',\n      label: '我的作品集',\n      icon: 'portfolio',\n      action: () => router.push('/user?tab=portfolio')\n    },\n    {\n      key: 'favorites',\n      label: '我的收藏',\n      icon: 'favorites',\n      action: () => router.push('/user?tab=favorites')\n    },\n    {\n      key: 'notifications',\n      label: '消息通知',\n      icon: 'notifications',\n      action: () => router.push('/user?tab=messages')\n    },\n    {\n      key: 'homepage',\n      label: '我的主页',\n      icon: 'homepage',\n      action: () => router.push('/u/10001')\n    },\n    {\n      key: 'settings',\n      label: '账号设置',\n      icon: 'settings',\n      action: () => router.push('/user?tab=account')\n    },\n    {\n      key: 'logout',\n      label: '退出登录',\n      icon: 'logout',\n      action: handleLogout\n    }\n  ]\n})\n\n// 处理退出登录\nconst handleLogout = async () => {\n  try {\n    // 关闭用户菜单\n    userMenuOpen.value = false\n    \n    await store.dispatch('logout')\n    showToast('退出成功', 'success')\n    \n    // 获取当前路径作为重定向地址\n    const currentPath = router.currentRoute.value.fullPath\n    // 跳转到登录页面，并带上当前路径作为 redirect 参数\n    router.push(`/login?redirect=${encodeURIComponent(currentPath)}`)\n    \n  } catch (error) {\n    console.error('退出失败:', error)\n    showToast('退出失败，请重试', 'error')\n  }\n}\n\n</script>\n<style scoped>\n/* 添加过渡动画 */\n.aspect-h-9 {\n  position: relative;\n  padding-bottom: 56.25%;\n}\n\n.aspect-h-9 img {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  transition: opacity 0.3s ease;\n}\n\n/* 添加菜单hover效果 */\n.hover\\:bg-gray-100:hover {\n  background-color: rgba(243, 244, 246, 1);\n}\n\n/* 确保下拉菜单定位正确 */\n.resource-menu {\n  position: static;\n}\n\n@media (min-width: 1024px) {\n  .resource-menu {\n    position: relative;\n  }\n}\n\n/* 添加过渡动画 */\n.transition-transform {\n  transition-property: transform;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-duration: 200ms;\n}\n\n/* 移动端菜单动画 */\n.mobile-menu-enter-active,\n.mobile-menu-leave-active {\n  transition: transform 0.3s ease-in-out;\n}\n\n.mobile-menu-enter-from,\n.mobile-menu-leave-to {\n  transform: translateX(100%);\n}\n\n/* 下拉菜单动画 */\n.dropdown-enter-active,\n.dropdown-leave-active {\n  transition: opacity 0.2s, transform 0.2s;\n}\n\n.dropdown-enter-from,\n.dropdown-leave-to {\n  opacity: 0;\n  transform: translateY(-10px);\n}\n/* 确保下拉菜单始终最上层 */\n:deep(.el-dropdown-menu) {\n  z-index: 3000 !important;\n}\n\n/* 调整资源菜单定位 */\n.resource-menu {\n  position: static;\n}\n\n@media (min-width: 1024px) {\n  .resource-menu {\n    position: relative;\n  }\n}\n</style>"],"mappings":";OAOoCA,UAAuB;;EANjDC,KAAK,EAAC;AAAoB;;EAC3BA,KAAK,EAAC,8BAA8B;EAAC,YAAU,EAAC;;;EAC9CA,KAAK,EAAC;AAAwC;;EAE5CA,KAAK,EAAC;AAAM;;EAOZA,KAAK,EAAC;AAA0B;;EAahCA,KAAK,EAAC;AAAmB;;;uBAxBpCC,mBAAA,CAsCS,UAtCTC,UAsCS,GArCPC,mBAAA,CAoCM,OApCNC,UAoCM,GAnCJD,mBAAA,CAkCM,OAlCNE,UAkCM,GAjCJC,mBAAA,UAAa,EACbH,mBAAA,CAIM,OAJNI,UAIM,GAHJC,YAAA,CAEcC,sBAAA;IAFDC,EAAE,EAAC,GAAG;IAACV,KAAK,EAAC;;IANpCW,OAAA,EAAAC,QAAA,CAOY,MAA6DC,MAAA,QAAAA,MAAA,OAA7DV,mBAAA,CAA6D;MAAxDH,KAAK,EAAC,YAAY;MAACc,GAAuB,EAAvBf,UAAuB;MAACgB,GAAG,EAAC;;IAPhEC,CAAA;QAWQV,mBAAA,qBAAwB,EACxBH,mBAAA,CAUM,OAVNc,UAUM,I,kBATJhB,mBAAA,CAQciB,SAAA,QArBxBC,WAAA,CAc0BC,IAAA,CAAAC,QAAQ,EAAfC,GAAG;yBADZC,YAAA,CAQcd,sBAAA;MANXe,GAAG,EAAEF,GAAG,CAACG,IAAI;MACbf,EAAE,EAAEY,GAAG,CAACG,IAAI;MACbzB,KAAK,EAjBjB0B,eAAA,EAiBkB,iEAAiE;QAAA,iBAC5CC,MAAA,CAAAC,KAAK,CAACH,IAAI,KAAKH,GAAG,CAACG;MAAI;;MAlB9Dd,OAAA,EAAAC,QAAA,CAoBY,MAAc,CApB1BiB,gBAAA,CAAAC,gBAAA,CAoBeR,GAAG,CAACS,IAAI,iB;MApBvBf,CAAA;;oCAwBQV,mBAAA,YAAe,EACfH,mBAAA,CAWM,OAXN6B,UAWM,GAVJ1B,mBAAA,uBAA0B,EAC1BE,YAAA,CAMcC,sBAAA;IALXC,EAAE,EAAEU,IAAA,CAAAa,KAAK,CAACR,IAAI;IACfzB,KAAK,EA7BjB0B,eAAA,EA6BkB,6FAA6F;MAAA,iBACxEC,MAAA,CAAAC,KAAK,CAACH,IAAI,KAAKL,IAAA,CAAAa,KAAK,CAACR;IAAI;;IA9BhEd,OAAA,EAAAC,QAAA,CAgCY,MAAgB,CAhC5BiB,gBAAA,CAAAC,gBAAA,CAgCeV,IAAA,CAAAa,KAAK,CAACF,IAAI,iB;IAhCzBf,CAAA;sCAmCUV,mBAAA,iBAAoB,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}