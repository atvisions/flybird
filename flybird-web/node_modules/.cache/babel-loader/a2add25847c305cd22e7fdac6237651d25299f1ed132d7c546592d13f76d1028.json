{"ast":null,"code":"import { auth } from '@/api/auth';\nimport { storage } from './storage';\nimport { STORAGE_KEYS } from '@/constants';\nexport const authManager = {\n  // 检查是否已登录\n  isAuthenticated() {\n    const authData = storage.getAuth();\n    if (!authData) return false;\n\n    // 修改为毫秒级比较，因为 storage.getAuth 已经返回毫秒级时间戳\n    return authData.expiration > Date.now();\n  },\n  // 获取当前token\n  getToken() {\n    const authData = storage.getAuth();\n    return authData?.access;\n  },\n  // 获取刷新token\n  getRefreshToken() {\n    const authData = storage.getAuth();\n    return authData?.refresh;\n  },\n  // 处理登录\n  async login(credentials, remember = false) {\n    const response = await auth.loginWithPassword(credentials);\n    if (response.data?.code === 200) {\n      const {\n        access,\n        refresh\n      } = response.data.data;\n      storage.saveAuth({\n        access,\n        refresh\n      }, remember);\n      if (remember) {\n        storage.savePhone(credentials.phone, true);\n      }\n    }\n    return response;\n  },\n  // 处理登出\n  async logout() {\n    try {\n      await auth.logout();\n    } finally {\n      storage.clearAuth();\n    }\n  }\n};\n\n// 检查 token 是否过期\nexport const isTokenExpired = () => {\n  const expiresAt = localStorage.getItem(STORAGE_KEYS.TOKEN_EXPIRES);\n  if (!expiresAt) return true;\n\n  // 将存储的秒级时间戳转换为毫秒级进行比较\n  const expirationTime = parseInt(expiresAt) * 1000;\n  return Date.now() >= expirationTime;\n};\n\n// 格式化过期时间\nexport const formatExpireTime = timestamp => {\n  // 将秒级时间戳转换为毫秒级再格式化\n  return new Date(timestamp * 1000).toLocaleString();\n};\n\n// 获取当前时间戳（秒）\nexport const getCurrentTimestamp = () => {\n  return Math.floor(Date.now() / 1000);\n};\n\n// 计算过期时间（秒）\nexport const calculateExpiration = (remember = false) => {\n  // 添加调试信息\n  console.log('Calculating expiration with remember:', remember);\n  const now = getCurrentTimestamp();\n  const expiresIn = remember ? 7 * 24 * 60 * 60 :\n  // 7天（秒）\n  24 * 60 * 60; // 24小时（秒）\n\n  const expiration = now + expiresIn;\n  console.log('Expiration calculation:', {\n    remember,\n    now,\n    expiresIn,\n    expiration,\n    formattedExpiration: new Date(expiration * 1000).toLocaleString()\n  });\n  return expiration;\n};\n\n// 添加一个辅助函数用于调试\nexport const getExpirationInfo = () => {\n  const expiresAt = localStorage.getItem(STORAGE_KEYS.TOKEN_EXPIRES);\n  if (!expiresAt) return null;\n  const expirationTime = parseInt(expiresAt) * 1000;\n  return {\n    expiresAt,\n    expirationTime,\n    formattedTime: new Date(expirationTime).toLocaleString(),\n    now: Date.now(),\n    formattedNow: new Date().toLocaleString(),\n    isExpired: Date.now() >= expirationTime\n  };\n};","map":{"version":3,"names":["auth","storage","STORAGE_KEYS","authManager","isAuthenticated","authData","getAuth","expiration","Date","now","getToken","access","getRefreshToken","refresh","login","credentials","remember","response","loginWithPassword","data","code","saveAuth","savePhone","phone","logout","clearAuth","isTokenExpired","expiresAt","localStorage","getItem","TOKEN_EXPIRES","expirationTime","parseInt","formatExpireTime","timestamp","toLocaleString","getCurrentTimestamp","Math","floor","calculateExpiration","console","log","expiresIn","formattedExpiration","getExpirationInfo","formattedTime","formattedNow","isExpired"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/utils/auth.js"],"sourcesContent":["import { auth } from '@/api/auth'\nimport { storage } from './storage'\nimport { STORAGE_KEYS } from '@/constants'\n\nexport const authManager = {\n  // 检查是否已登录\n  isAuthenticated() {\n    const authData = storage.getAuth()\n    if (!authData) return false\n    \n    // 修改为毫秒级比较，因为 storage.getAuth 已经返回毫秒级时间戳\n    return authData.expiration > Date.now()\n  },\n\n  // 获取当前token\n  getToken() {\n    const authData = storage.getAuth()\n    return authData?.access\n  },\n\n  // 获取刷新token\n  getRefreshToken() {\n    const authData = storage.getAuth()\n    return authData?.refresh\n  },\n\n  // 处理登录\n  async login(credentials, remember = false) {\n    const response = await auth.loginWithPassword(credentials)\n    \n    if (response.data?.code === 200) {\n      const { access, refresh } = response.data.data\n      storage.saveAuth({ access, refresh }, remember)\n      if (remember) {\n        storage.savePhone(credentials.phone, true)\n      }\n    }\n    \n    return response\n  },\n\n  // 处理登出\n  async logout() {\n    try {\n      await auth.logout()\n    } finally {\n      storage.clearAuth()\n    }\n  }\n}\n\n// 检查 token 是否过期\nexport const isTokenExpired = () => {\n  const expiresAt = localStorage.getItem(STORAGE_KEYS.TOKEN_EXPIRES)\n  if (!expiresAt) return true\n  \n  // 将存储的秒级时间戳转换为毫秒级进行比较\n  const expirationTime = parseInt(expiresAt) * 1000\n  return Date.now() >= expirationTime\n}\n\n// 格式化过期时间\nexport const formatExpireTime = (timestamp) => {\n  // 将秒级时间戳转换为毫秒级再格式化\n  return new Date(timestamp * 1000).toLocaleString()\n}\n\n// 获取当前时间戳（秒）\nexport const getCurrentTimestamp = () => {\n  return Math.floor(Date.now() / 1000)\n}\n\n// 计算过期时间（秒）\nexport const calculateExpiration = (remember = false) => {\n  // 添加调试信息\n  console.log('Calculating expiration with remember:', remember)\n  \n  const now = getCurrentTimestamp()\n  const expiresIn = remember ? \n    7 * 24 * 60 * 60 :  // 7天（秒）\n    24 * 60 * 60        // 24小时（秒）\n  \n  const expiration = now + expiresIn\n  console.log('Expiration calculation:', {\n    remember,\n    now,\n    expiresIn,\n    expiration,\n    formattedExpiration: new Date(expiration * 1000).toLocaleString()\n  })\n  \n  return expiration\n}\n\n// 添加一个辅助函数用于调试\nexport const getExpirationInfo = () => {\n  const expiresAt = localStorage.getItem(STORAGE_KEYS.TOKEN_EXPIRES)\n  if (!expiresAt) return null\n  \n  const expirationTime = parseInt(expiresAt) * 1000\n  return {\n    expiresAt,\n    expirationTime,\n    formattedTime: new Date(expirationTime).toLocaleString(),\n    now: Date.now(),\n    formattedNow: new Date().toLocaleString(),\n    isExpired: Date.now() >= expirationTime\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}