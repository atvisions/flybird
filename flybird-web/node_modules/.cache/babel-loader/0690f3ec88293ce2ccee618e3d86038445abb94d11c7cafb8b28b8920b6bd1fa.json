{"ast":null,"code":"import { ref, computed, onMounted, onUnmounted } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { showToast } from '@/components/ToastMessage';\nimport { useDeleteAccount } from '@/composables/useDeleteAccount';\nimport { usePhone } from '@/composables/usePhone';\nimport { useEmail } from '@/composables/useEmail';\nimport { useChangePassword } from '@/composables/useChangePassword';\nimport { ElMessageBox } from 'element-plus';\nimport { account } from '@/api/account';\nimport { useAuthStore } from '@/stores/auth';\nimport { useUserStore } from '@/stores/user';\nexport default {\n  __name: 'AccountSettings',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const router = useRouter();\n    const authStore = useAuthStore();\n    const userStore = useUserStore();\n\n    // No changes to passwordFormState\n\n    // 手机号掩码处理函数\n    const maskPhone = phone => {\n      if (!phone) return '未绑定';\n      return phone.replace(/(\\d{3})\\d{4}(\\d{4})/, '$1****$2');\n    };\n\n    // 从 userStore 获取用户信息\n    const phone = computed(() => userStore.userInfo?.phone);\n    const email = computed(() => userStore.userInfo?.email);\n\n    // 弹窗状态管理\n    const showEmailModal = ref(false);\n    const showPhoneModal = ref(false);\n    const showPasswordModal = ref(false);\n    const showDeleteConfirm = ref(false);\n    const showPassword = ref(false);\n\n    // 打开/关闭弹窗方法\n    const openEmailModal = () => {\n      emailManager.state.value = '';\n      emailManager.state.code = '';\n      emailManager.state.password = '';\n      showPassword.value = false;\n      showEmailModal.value = true;\n    };\n    const closeEmailModal = () => {\n      showEmailModal.value = false;\n      emailManager.state.value = '';\n      emailManager.state.code = '';\n      emailManager.state.password = '';\n      emailManager.state.loading = false;\n      showPassword.value = false;\n    };\n    const openPhoneModal = () => {\n      phoneManager.state.value = '';\n      phoneManager.state.code = '';\n      phoneManager.state.loading = false;\n      phoneManager.state.countdown = 0;\n      showPhoneModal.value = true;\n    };\n    const closePhoneModal = () => {\n      showPhoneModal.value = false;\n      phoneManager.state.value = '';\n      phoneManager.state.code = '';\n      phoneManager.state.loading = false;\n      phoneManager.state.countdown = 0;\n    };\n    const openPasswordModal = () => {\n      passwordFormState.value.oldPassword = '';\n      passwordFormState.value.newPassword = '';\n      passwordFormState.value.confirmPassword = '';\n      passwordFormState.value.strength = 0;\n      showPasswordModal.value = true;\n    };\n    const closePasswordModal = () => {\n      showPasswordModal.value = false;\n      passwordFormState.value.oldPassword = '';\n      passwordFormState.value.newPassword = '';\n      passwordFormState.value.confirmPassword = '';\n      passwordFormState.value.loading = false;\n      passwordFormState.value.strength = 0;\n    };\n    const openDeleteConfirm = () => {\n      deleteFormState.value.password = '';\n      showDeleteConfirm.value = true;\n    };\n    const closeDeleteConfirm = () => {\n      showDeleteConfirm.value = false;\n      deleteFormState.value.password = '';\n    };\n\n    // 邮箱管理器\n    const emailManager = useEmail();\n    const phoneManager = usePhone();\n    const {\n      validatePassword\n    } = useChangePassword();\n    const {\n      loading\n    } = useDeleteAccount();\n\n    // 验证码相关\n    const isRequestingCode = ref(false);\n\n    // 修改手机号表单验证\n    const isPhoneFormValid = computed(() => {\n      const phoneRegex = /^1[3-9]\\d{9}$/;\n      const isValidPhone = phoneRegex.test(phoneManager.state.value);\n      const isValidCode = phoneManager.state.code?.length === 6;\n      return phoneManager.state.value && phoneManager.state.code && isValidPhone && isValidCode && !phoneManager.state.loading;\n    });\n\n    // 邮箱格式验证正则\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n    // 处理邮箱更新的验证码发送\n    const handleEmailSendCode = async () => {\n      if (!emailManager.state.value) {\n        showToast('请输入新邮箱', 'warning');\n        return;\n      }\n      if (!emailManager.state.password) {\n        showToast('请输入登录密码', 'warning');\n        return;\n      }\n\n      // 验证邮箱格式\n      if (!emailRegex.test(emailManager.state.value)) {\n        showToast('请输入正确的邮箱格式', 'warning');\n        return;\n      }\n      try {\n        emailManager.state.loading = true;\n        const response = await account.sendEmailCode({\n          email: emailManager.state.value,\n          password: emailManager.state.password.trim()\n        });\n        if (response?.data?.message) {\n          showToast(response.data.message, 'success');\n          emailManager.state.countdown = 60;\n          startEmailCountdown();\n        }\n      } catch (error) {\n        const errorMsg = error.response?.data?.detail || error.message || '发送验证码失败';\n        showToast(errorMsg, 'error');\n      } finally {\n        emailManager.state.loading = false;\n      }\n    };\n\n    // 密码状态\n    const passwordFormState = ref({\n      oldPassword: '',\n      newPassword: '',\n      confirmPassword: '',\n      loading: false,\n      strength: 0\n    });\n\n    // 修改密码强度更新的处理方法\n    const handlePasswordInput = () => {\n      const strength = validatePassword(passwordFormState.value.newPassword);\n      console.log('Password strength updated:', strength);\n      passwordFormState.value.strength = strength;\n    };\n\n    // 密码表单验证\n    const isPasswordFormValid = computed(() => {\n      // 基本验证：必填项和密码匹配\n      const hasRequiredFields = passwordFormState.value.oldPassword && passwordFormState.value.newPassword && passwordFormState.value.confirmPassword;\n      const passwordsMatch = passwordFormState.value.newPassword === passwordFormState.value.confirmPassword;\n\n      // 密码强度验证：只需要满足基本要求（长度>=8，包含字母和数字）\n      const hasMinimumStrength = passwordFormState.value.strength >= 3;\n\n      // 添加调试日志\n      console.log('Password validation:', {\n        hasRequiredFields,\n        passwordsMatch,\n        strength: passwordFormState.value.strength,\n        hasMinimumStrength,\n        loading: passwordFormState.value.loading\n      });\n      return hasRequiredFields && passwordsMatch && hasMinimumStrength && !passwordFormState.value.loading;\n    });\n\n    // 添加表单数据\n    const deleteFormState = ref({\n      password: '',\n      loading: false\n    });\n\n    // 处理确认注销\n    const handleConfirmDelete = async () => {\n      if (!deleteFormState.value.password) {\n        showToast('请输入密码', 'warning');\n        return;\n      }\n      try {\n        const response = await account.deleteAccount(deleteFormState.value);\n        if (response?.data?.code === 200) {\n          showToast('账号已注销', 'success');\n          // 使用 auth store 的 logout 方法清除所有状态\n          await authStore.logout();\n          // 清除 user store 的状态\n          userStore.clearUserInfo();\n          // 清除其他可能的状态\n          localStorage.removeItem('isLoggedIn');\n          // 强制刷新页面以确保所有状态都被清除\n          window.location.href = '/login';\n        }\n      } catch (error) {\n        console.error('注销失败:', error);\n        showToast(error?.message || '注销失败', 'error');\n      }\n    };\n\n    // 倒计时管理\n    let emailTimer = null;\n    let phoneTimer = null;\n    const startEmailCountdown = () => {\n      if (emailTimer) {\n        clearInterval(emailTimer);\n      }\n      emailManager.state.countdown = 60;\n      emailTimer = setInterval(() => {\n        if (emailManager.state.countdown > 0) {\n          emailManager.state.countdown--;\n        } else {\n          clearInterval(emailTimer);\n          emailTimer = null;\n        }\n      }, 1000);\n    };\n    const startPhoneCountdown = () => {\n      if (phoneTimer) {\n        clearInterval(phoneTimer);\n      }\n      phoneManager.state.countdown = 60;\n      phoneTimer = setInterval(() => {\n        if (phoneManager.state.countdown > 0) {\n          phoneManager.state.countdown--;\n        } else {\n          clearInterval(phoneTimer);\n          phoneTimer = null;\n        }\n      }, 1000);\n    };\n\n    // 修改手机号验证码发送处理函数\n    const handlePhoneSendCode = async () => {\n      const phoneRegex = /^1[3-9]\\d{9}$/;\n      if (!phoneManager.state.value) {\n        showToast('请输入新手机号', 'warning');\n        return;\n      }\n      if (!phoneRegex.test(phoneManager.state.value)) {\n        showToast('请输入正确的手机号格式', 'warning');\n        return;\n      }\n      try {\n        phoneManager.state.loading = true;\n        const response = await account.sendVerifyCode({\n          phone: phoneManager.state.value.trim(),\n          scene: 'change_phone' // 指定场景为更换手机号\n        });\n        if (response?.data?.code === 200) {\n          showToast(response.data.message || '验证码已发送', 'success');\n          phoneManager.state.countdown = 60;\n          startPhoneCountdown();\n        }\n      } catch (error) {\n        const errorMsg = error.response?.data?.detail || error.response?.data?.message || error.message || '发送验证码失败';\n        showToast(errorMsg, 'error');\n      } finally {\n        phoneManager.state.loading = false;\n      }\n    };\n\n    // 修改手机号处理函数\n    const handlePhoneUpdate = async () => {\n      const phoneRegex = /^1[3-9]\\d{9}$/;\n      if (!phoneManager.state.value || !phoneRegex.test(phoneManager.state.value)) {\n        showToast('请输入正确的手机号', 'warning');\n        return;\n      }\n      if (!phoneManager.state.code || phoneManager.state.code.length !== 6) {\n        showToast('请输入6位验证码', 'warning');\n        return;\n      }\n      try {\n        phoneManager.state.loading = true;\n        const response = await account.changePhone({\n          phone: phoneManager.state.value.trim(),\n          code: phoneManager.state.code.trim()\n        });\n        if (response?.data?.code === 200 || response?.status === 200) {\n          showToast(response.data?.message || '手机号修改成功', 'success');\n          closePhoneModal();\n          await userStore.getUserInfo();\n        }\n      } catch (error) {\n        console.error('手机号更新失败:', error);\n        // 修改错误处理逻辑\n        let errorMsg = '手机号更新失败';\n        if (error.response?.data) {\n          const errorData = error.response.data;\n          if (typeof errorData.detail === 'object') {\n            // 处理字段级别的错误\n            errorMsg = Object.values(errorData.detail)[0];\n          } else if (typeof errorData.detail === 'string') {\n            // 处理普通错误消息\n            errorMsg = errorData.detail;\n          } else if (errorData.message) {\n            errorMsg = errorData.message;\n          }\n        }\n        showToast(errorMsg, 'error');\n      } finally {\n        phoneManager.state.loading = false;\n      }\n    };\n\n    // 只保留一个 onUnmounted\n    onUnmounted(() => {\n      if (emailTimer) {\n        clearInterval(emailTimer);\n        emailTimer = null;\n      }\n      if (phoneTimer) {\n        clearInterval(phoneTimer);\n        phoneTimer = null;\n      }\n    });\n\n    // 用户信息\n    const userInfo = ref(null);\n\n    // 用户信息加载状态\n    const userInfoLoading = ref(false);\n\n    // 获取用户信息\n    const fetchUserInfo = async () => {\n      try {\n        userInfoLoading.value = true;\n        await userStore.getUserInfo();\n      } catch (error) {\n        console.error('获取用户信息失败:', error);\n        showToast('获取用户信息失败', 'error');\n      } finally {\n        userInfoLoading.value = false;\n      }\n    };\n\n    // 在组件挂载时获取用户信息\n    onMounted(() => {\n      fetchUserInfo();\n    });\n\n    // 表单验证\n    const validateForm = () => {\n      if (!form.value.old_password) {\n        showToast('请输入当前密码', 'error');\n        return false;\n      }\n      if (!form.value.new_password) {\n        showToast('请输入新密码', 'error');\n        return false;\n      }\n      if (!form.value.confirm_password) {\n        showToast('请确认新密码', 'error');\n        return false;\n      }\n      if (form.value.new_password !== form.value.confirm_password) {\n        showToast('两次输入的密码不一致', 'error');\n        return false;\n      }\n      if (form.value.new_password.length < 6) {\n        showToast('密码长度不能少于6位', 'error');\n        return false;\n      }\n      return true;\n    };\n\n    // 邮箱解绑相关\n    const showUnbindEmailModal = ref(false);\n    const unbindEmailLoading = ref(false);\n    const unbindEmailForm = ref({\n      password: ''\n    });\n\n    // 打开解绑弹窗\n    const handleUnbindEmail = () => {\n      showUnbindEmailModal.value = true;\n    };\n\n    // 关闭解绑弹窗\n    const closeUnbindEmailModal = () => {\n      showUnbindEmailModal.value = false;\n      unbindEmailForm.value.password = '';\n    };\n\n    // 确认解绑\n    const confirmUnbindEmail = async () => {\n      try {\n        unbindEmailLoading.value = true;\n        const response = await account.unbindEmail({\n          password: unbindEmailForm.value.password\n        });\n        if (response?.data?.message) {\n          closeUnbindEmailModal();\n          // 更新用户信息\n          await userStore.getUserInfo();\n          showToast(response.data.message || '邮箱解绑成功', 'success');\n        }\n      } catch (error) {\n        console.error('邮箱解绑失败:', error);\n        const errorMsg = error.response?.data?.detail || error.response?.data?.message || error.message || '邮箱解绑失败';\n        showToast(errorMsg, 'error');\n      } finally {\n        unbindEmailLoading.value = false;\n      }\n    };\n\n    // 密码强度相关\n    const strengthText = computed(() => {\n      const strength = passwordFormState.value.strength;\n      if (strength <= 2) return '弱';\n      if (strength <= 3) return '中';\n      return '强';\n    });\n    const strengthTextClass = computed(() => {\n      const strength = passwordFormState.value.strength;\n      if (strength <= 2) return 'text-red-500';\n      if (strength <= 3) return 'text-yellow-500';\n      return 'text-green-500';\n    });\n    const strengthColorClass = computed(() => {\n      const strength = passwordFormState.value.strength;\n      if (strength <= 2) return 'bg-red-500';\n      if (strength <= 3) return 'bg-yellow-500';\n      return 'bg-green-500';\n    });\n\n    // 处理密码更新\n    const handlePasswordUpdate = async () => {\n      try {\n        passwordFormState.loading = true;\n        const response = await account.updatePassword({\n          old_password: passwordFormState.oldPassword,\n          new_password: passwordFormState.newPassword,\n          confirm_password: passwordFormState.confirmPassword\n        });\n        if (response?.data?.message) {\n          closePasswordModal();\n          showToast(response.data.message || '密码修改成功', 'success');\n        }\n      } catch (error) {\n        console.error('密码修改失败:', error);\n        const errorMsg = error.response?.data?.detail || error.response?.data?.message || error.message || '密码修改失败';\n        showToast(errorMsg, 'error');\n      } finally {\n        passwordFormState.loading = false;\n      }\n    };\n\n    // 修改邮箱表单验证\n    const isEmailFormValid = computed(() => {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      const isValidEmail = emailRegex.test(emailManager.state.value);\n      const isValid = emailManager.state.value && emailManager.state.code && emailManager.state.password &&\n      // 确保密码已输入\n      isValidEmail && emailManager.state.code.length === 6; // 验证码长度验证\n\n      console.log('Email form validation:', {\n        email: emailManager.state.value,\n        code: emailManager.state.code,\n        password: emailManager.state.password,\n        isValidEmail,\n        codeLength: emailManager.state.code.length,\n        isValid\n      });\n      return isValid;\n    });\n\n    // 处理邮箱更新\n    const handleEmailUpdate = async () => {\n      console.log('Form state:', {\n        email: emailManager.state.value,\n        code: emailManager.state.code,\n        password: emailManager.state.password,\n        isValid: isEmailFormValid.value\n      });\n      if (!isEmailFormValid.value) {\n        showToast('请填写完整信息', 'warning');\n        return;\n      }\n      try {\n        emailManager.state.loading = true;\n        const response = await account.bindEmail({\n          email: emailManager.state.value,\n          code: emailManager.state.code,\n          password: emailManager.state.password\n        });\n        if (response?.data?.message) {\n          showToast(response.data.message, 'success');\n          closeEmailModal();\n          // 更新用户信息\n          await userStore.getUserInfo();\n        }\n      } catch (error) {\n        console.error('邮箱更新失败:', error);\n        const errorMsg = error.response?.data?.detail || error.message || '邮箱更新失败';\n        showToast(errorMsg, 'error');\n      } finally {\n        emailManager.state.loading = false;\n      }\n    };\n\n    // 修改手机号验证码按钮禁用状态计算\n    const isPhoneCodeButtonDisabled = computed(() => {\n      const phoneRegex = /^1[3-9]\\d{9}$/;\n      return phoneManager.state.loading || phoneManager.state.countdown > 0 || !phoneManager.state.value || !phoneRegex.test(phoneManager.state.value);\n    });\n    const __returned__ = {\n      router,\n      authStore,\n      userStore,\n      maskPhone,\n      phone,\n      email,\n      showEmailModal,\n      showPhoneModal,\n      showPasswordModal,\n      showDeleteConfirm,\n      showPassword,\n      openEmailModal,\n      closeEmailModal,\n      openPhoneModal,\n      closePhoneModal,\n      openPasswordModal,\n      closePasswordModal,\n      openDeleteConfirm,\n      closeDeleteConfirm,\n      emailManager,\n      phoneManager,\n      validatePassword,\n      loading,\n      isRequestingCode,\n      isPhoneFormValid,\n      emailRegex,\n      handleEmailSendCode,\n      passwordFormState,\n      handlePasswordInput,\n      isPasswordFormValid,\n      deleteFormState,\n      handleConfirmDelete,\n      get emailTimer() {\n        return emailTimer;\n      },\n      set emailTimer(v) {\n        emailTimer = v;\n      },\n      get phoneTimer() {\n        return phoneTimer;\n      },\n      set phoneTimer(v) {\n        phoneTimer = v;\n      },\n      startEmailCountdown,\n      startPhoneCountdown,\n      handlePhoneSendCode,\n      handlePhoneUpdate,\n      userInfo,\n      userInfoLoading,\n      fetchUserInfo,\n      validateForm,\n      showUnbindEmailModal,\n      unbindEmailLoading,\n      unbindEmailForm,\n      handleUnbindEmail,\n      closeUnbindEmailModal,\n      confirmUnbindEmail,\n      strengthText,\n      strengthTextClass,\n      strengthColorClass,\n      handlePasswordUpdate,\n      isEmailFormValid,\n      handleEmailUpdate,\n      isPhoneCodeButtonDisabled,\n      ref,\n      computed,\n      onMounted,\n      onUnmounted,\n      get useRouter() {\n        return useRouter;\n      },\n      get showToast() {\n        return showToast;\n      },\n      get useDeleteAccount() {\n        return useDeleteAccount;\n      },\n      get usePhone() {\n        return usePhone;\n      },\n      get useEmail() {\n        return useEmail;\n      },\n      get useChangePassword() {\n        return useChangePassword;\n      },\n      get ElMessageBox() {\n        return ElMessageBox;\n      },\n      get account() {\n        return account;\n      },\n      get useAuthStore() {\n        return useAuthStore;\n      },\n      get useUserStore() {\n        return useUserStore;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","onUnmounted","useRouter","showToast","useDeleteAccount","usePhone","useEmail","useChangePassword","ElMessageBox","account","useAuthStore","useUserStore","router","authStore","userStore","maskPhone","phone","replace","userInfo","email","showEmailModal","showPhoneModal","showPasswordModal","showDeleteConfirm","showPassword","openEmailModal","emailManager","state","value","code","password","closeEmailModal","loading","openPhoneModal","phoneManager","countdown","closePhoneModal","openPasswordModal","passwordFormState","oldPassword","newPassword","confirmPassword","strength","closePasswordModal","openDeleteConfirm","deleteFormState","closeDeleteConfirm","validatePassword","isRequestingCode","isPhoneFormValid","phoneRegex","isValidPhone","test","isValidCode","length","emailRegex","handleEmailSendCode","response","sendEmailCode","trim","data","message","startEmailCountdown","error","errorMsg","detail","handlePasswordInput","console","log","isPasswordFormValid","hasRequiredFields","passwordsMatch","hasMinimumStrength","handleConfirmDelete","deleteAccount","logout","clearUserInfo","localStorage","removeItem","window","location","href","emailTimer","phoneTimer","clearInterval","setInterval","startPhoneCountdown","handlePhoneSendCode","sendVerifyCode","scene","handlePhoneUpdate","changePhone","status","getUserInfo","errorData","Object","values","userInfoLoading","fetchUserInfo","validateForm","form","old_password","new_password","confirm_password","showUnbindEmailModal","unbindEmailLoading","unbindEmailForm","handleUnbindEmail","closeUnbindEmailModal","confirmUnbindEmail","unbindEmail","strengthText","strengthTextClass","strengthColorClass","handlePasswordUpdate","updatePassword","isEmailFormValid","isValidEmail","isValid","codeLength","handleEmailUpdate","bindEmail","isPhoneCodeButtonDisabled"],"sources":["/Users/liuzhao/Documents/Projects/flybird/flybird-web/src/views/user/AccountSettings.vue"],"sourcesContent":["<template>\n  <!-- No changes to template section -->\n</template>\n\n<script setup>\nimport { ref, computed, onMounted, onUnmounted } from 'vue'\nimport { useRouter } from 'vue-router'\nimport { showToast } from '@/components/ToastMessage'\nimport { useDeleteAccount } from '@/composables/useDeleteAccount'\nimport { usePhone } from '@/composables/usePhone'\nimport { useEmail } from '@/composables/useEmail'\nimport { useChangePassword } from '@/composables/useChangePassword'\nimport { ElMessageBox } from 'element-plus'\nimport { account } from '@/api/account'\nimport { useAuthStore } from '@/stores/auth'\nimport { useUserStore } from '@/stores/user'\n\nconst router = useRouter()\nconst authStore = useAuthStore()\nconst userStore = useUserStore()\n\n// No changes to passwordFormState\n\n// 手机号掩码处理函数\nconst maskPhone = (phone) => {\n  if (!phone) return '未绑定'\n  return phone.replace(/(\\d{3})\\d{4}(\\d{4})/, '$1****$2')\n}\n\n// 从 userStore 获取用户信息\nconst phone = computed(() => userStore.userInfo?.phone)\nconst email = computed(() => userStore.userInfo?.email)\n\n// 弹窗状态管理\nconst showEmailModal = ref(false)\nconst showPhoneModal = ref(false)\nconst showPasswordModal = ref(false)\nconst showDeleteConfirm = ref(false)\nconst showPassword = ref(false)\n\n// 打开/关闭弹窗方法\nconst openEmailModal = () => {\n  emailManager.state.value = ''\n  emailManager.state.code = ''\n  emailManager.state.password = ''\n  showPassword.value = false\n  showEmailModal.value = true\n}\n\nconst closeEmailModal = () => {\n  showEmailModal.value = false\n  emailManager.state.value = ''\n  emailManager.state.code = ''\n  emailManager.state.password = ''\n  emailManager.state.loading = false\n  showPassword.value = false\n}\n\nconst openPhoneModal = () => {\n  phoneManager.state.value = ''\n  phoneManager.state.code = ''\n  phoneManager.state.loading = false\n  phoneManager.state.countdown = 0\n  showPhoneModal.value = true\n}\n\nconst closePhoneModal = () => {\n  showPhoneModal.value = false\n  phoneManager.state.value = ''\n  phoneManager.state.code = ''\n  phoneManager.state.loading = false\n  phoneManager.state.countdown = 0\n}\n\nconst openPasswordModal = () => {\n  passwordFormState.value.oldPassword = ''\n  passwordFormState.value.newPassword = ''\n  passwordFormState.value.confirmPassword = ''\n  passwordFormState.value.strength = 0\n  showPasswordModal.value = true\n}\n\nconst closePasswordModal = () => {\n  showPasswordModal.value = false\n  passwordFormState.value.oldPassword = ''\n  passwordFormState.value.newPassword = ''\n  passwordFormState.value.confirmPassword = ''\n  passwordFormState.value.loading = false\n  passwordFormState.value.strength = 0\n}\n\nconst openDeleteConfirm = () => {\n  deleteFormState.value.password = ''\n  showDeleteConfirm.value = true\n}\n\nconst closeDeleteConfirm = () => {\n  showDeleteConfirm.value = false\n  deleteFormState.value.password = ''\n}\n\n// 邮箱管理器\nconst emailManager = useEmail()\nconst phoneManager = usePhone()\nconst { validatePassword } = useChangePassword()\nconst { loading } = useDeleteAccount()\n\n// 验证码相关\nconst isRequestingCode = ref(false)\n\n// 修改手机号表单验证\nconst isPhoneFormValid = computed(() => {\n  const phoneRegex = /^1[3-9]\\d{9}$/\n  const isValidPhone = phoneRegex.test(phoneManager.state.value)\n  const isValidCode = phoneManager.state.code?.length === 6\n\n  return phoneManager.state.value && \n         phoneManager.state.code && \n         isValidPhone && \n         isValidCode && \n         !phoneManager.state.loading\n})\n\n// 邮箱格式验证正则\nconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n\n// 处理邮箱更新的验证码发送\nconst handleEmailSendCode = async () => {\n  if (!emailManager.state.value) {\n    showToast('请输入新邮箱', 'warning')\n    return\n  }\n  \n  if (!emailManager.state.password) {\n    showToast('请输入登录密码', 'warning')\n    return\n  }\n  \n  // 验证邮箱格式\n  if (!emailRegex.test(emailManager.state.value)) {\n    showToast('请输入正确的邮箱格式', 'warning')\n    return\n  }\n  \n  try {\n    emailManager.state.loading = true\n    const response = await account.sendEmailCode({\n      email: emailManager.state.value,\n      password: emailManager.state.password.trim()\n    })\n    \n    if (response?.data?.message) {\n      showToast(response.data.message, 'success')\n      emailManager.state.countdown = 60\n      startEmailCountdown()\n    }\n  } catch (error) {\n    const errorMsg = error.response?.data?.detail || \n                    error.message || \n                    '发送验证码失败'\n    showToast(errorMsg, 'error')\n  } finally {\n    emailManager.state.loading = false\n  }\n}\n\n// 密码状态\nconst passwordFormState = ref({\n  oldPassword: '',\n  newPassword: '',\n  confirmPassword: '',\n  loading: false,\n  strength: 0\n})\n\n// 修改密码强度更新的处理方法\nconst handlePasswordInput = () => {\n  const strength = validatePassword(passwordFormState.value.newPassword)\n  console.log('Password strength updated:', strength)\n  passwordFormState.value.strength = strength\n}\n\n// 密码表单验证\nconst isPasswordFormValid = computed(() => {\n  // 基本验证：必填项和密码匹配\n  const hasRequiredFields = passwordFormState.value.oldPassword && \n                          passwordFormState.value.newPassword && \n                          passwordFormState.value.confirmPassword\n  \n  const passwordsMatch = passwordFormState.value.newPassword === \n                        passwordFormState.value.confirmPassword\n  \n  // 密码强度验证：只需要满足基本要求（长度>=8，包含字母和数字）\n  const hasMinimumStrength = passwordFormState.value.strength >= 3\n  \n  // 添加调试日志\n  console.log('Password validation:', {\n    hasRequiredFields,\n    passwordsMatch,\n    strength: passwordFormState.value.strength,\n    hasMinimumStrength,\n    loading: passwordFormState.value.loading\n  })\n\n  return hasRequiredFields && \n         passwordsMatch && \n         hasMinimumStrength && \n         !passwordFormState.value.loading\n})\n\n// 添加表单数据\nconst deleteFormState = ref({\n  password: '',\n  loading: false\n})\n\n// 处理确认注销\nconst handleConfirmDelete = async () => {\n  if (!deleteFormState.value.password) {\n    showToast('请输入密码', 'warning')\n    return\n  }\n  \n  try {\n    const response = await account.deleteAccount(deleteFormState.value)\n    if (response?.data?.code === 200) {\n      showToast('账号已注销', 'success')\n      // 使用 auth store 的 logout 方法清除所有状态\n      await authStore.logout()\n      // 清除 user store 的状态\n      userStore.clearUserInfo()\n      // 清除其他可能的状态\n      localStorage.removeItem('isLoggedIn')\n      // 强制刷新页面以确保所有状态都被清除\n      window.location.href = '/login'\n    }\n  } catch (error) {\n    console.error('注销失败:', error)\n    showToast(error?.message || '注销失败', 'error')\n  }\n}\n\n// 倒计时管理\nlet emailTimer = null\nlet phoneTimer = null\n\nconst startEmailCountdown = () => {\n  if (emailTimer) {\n    clearInterval(emailTimer)\n  }\n  emailManager.state.countdown = 60\n  emailTimer = setInterval(() => {\n    if (emailManager.state.countdown > 0) {\n      emailManager.state.countdown--\n    } else {\n      clearInterval(emailTimer)\n      emailTimer = null\n    }\n  }, 1000)\n}\n\nconst startPhoneCountdown = () => {\n  if (phoneTimer) {\n    clearInterval(phoneTimer)\n  }\n  phoneManager.state.countdown = 60\n  phoneTimer = setInterval(() => {\n    if (phoneManager.state.countdown > 0) {\n      phoneManager.state.countdown--\n    } else {\n      clearInterval(phoneTimer)\n      phoneTimer = null\n    }\n  }, 1000)\n}\n\n// 修改手机号验证码发送处理函数\nconst handlePhoneSendCode = async () => {\n  const phoneRegex = /^1[3-9]\\d{9}$/\n  if (!phoneManager.state.value) {\n    showToast('请输入新手机号', 'warning')\n    return\n  }\n  \n  if (!phoneRegex.test(phoneManager.state.value)) {\n    showToast('请输入正确的手机号格式', 'warning')\n    return\n  }\n  \n  try {\n    phoneManager.state.loading = true\n    const response = await account.sendVerifyCode({\n      phone: phoneManager.state.value.trim(),\n      scene: 'change_phone'  // 指定场景为更换手机号\n    })\n    \n    if (response?.data?.code === 200) {\n      showToast(response.data.message || '验证码已发送', 'success')\n      phoneManager.state.countdown = 60\n      startPhoneCountdown()\n    }\n  } catch (error) {\n    const errorMsg = error.response?.data?.detail || \n                    error.response?.data?.message || \n                    error.message || \n                    '发送验证码失败'\n    showToast(errorMsg, 'error')\n  } finally {\n    phoneManager.state.loading = false\n  }\n}\n\n// 修改手机号处理函数\nconst handlePhoneUpdate = async () => {\n  const phoneRegex = /^1[3-9]\\d{9}$/\n  if (!phoneManager.state.value || !phoneRegex.test(phoneManager.state.value)) {\n    showToast('请输入正确的手机号', 'warning')\n    return\n  }\n  \n  if (!phoneManager.state.code || phoneManager.state.code.length !== 6) {\n    showToast('请输入6位验证码', 'warning')\n    return\n  }\n\n  try {\n    phoneManager.state.loading = true\n    const response = await account.changePhone({\n      phone: phoneManager.state.value.trim(),\n      code: phoneManager.state.code.trim()\n    })\n\n    if (response?.data?.code === 200 || response?.status === 200) {\n      showToast(response.data?.message || '手机号修改成功', 'success')\n      closePhoneModal()\n      await userStore.getUserInfo()\n    }\n  } catch (error) {\n    console.error('手机号更新失败:', error)\n    // 修改错误处理逻辑\n    let errorMsg = '手机号更新失败'\n    \n    if (error.response?.data) {\n      const errorData = error.response.data\n      if (typeof errorData.detail === 'object') {\n        // 处理字段级别的错误\n        errorMsg = Object.values(errorData.detail)[0]\n      } else if (typeof errorData.detail === 'string') {\n        // 处理普通错误消息\n        errorMsg = errorData.detail\n      } else if (errorData.message) {\n        errorMsg = errorData.message\n      }\n    }\n    \n    showToast(errorMsg, 'error')\n  } finally {\n    phoneManager.state.loading = false\n  }\n}\n\n// 只保留一个 onUnmounted\nonUnmounted(() => {\n  if (emailTimer) {\n    clearInterval(emailTimer)\n    emailTimer = null\n  }\n  if (phoneTimer) {\n    clearInterval(phoneTimer)\n    phoneTimer = null\n  }\n})\n\n// 用户信息\nconst userInfo = ref(null)\n\n// 用户信息加载状态\nconst userInfoLoading = ref(false)\n\n// 获取用户信息\nconst fetchUserInfo = async () => {\n  try {\n    userInfoLoading.value = true\n    await userStore.getUserInfo()\n  } catch (error) {\n    console.error('获取用户信息失败:', error)\n    showToast('获取用户信息失败', 'error')\n  } finally {\n    userInfoLoading.value = false\n  }\n}\n\n// 在组件挂载时获取用户信息\nonMounted(() => {\n  fetchUserInfo()\n})\n\n\n// 表单验证\nconst validateForm = () => {\n  if (!form.value.old_password) {\n    showToast('请输入当前密码', 'error')\n    return false\n  }\n  if (!form.value.new_password) {\n    showToast('请输入新密码', 'error')\n    return false\n  }\n  if (!form.value.confirm_password) {\n    showToast('请确认新密码', 'error')\n    return false\n  }\n  if (form.value.new_password !== form.value.confirm_password) {\n    showToast('两次输入的密码不一致', 'error')\n    return false\n  }\n  if (form.value.new_password.length < 6) {\n    showToast('密码长度不能少于6位', 'error')\n    return false\n  }\n  return true\n}\n\n// 邮箱解绑相关\nconst showUnbindEmailModal = ref(false)\nconst unbindEmailLoading = ref(false)\nconst unbindEmailForm = ref({\n  password: ''\n})\n\n// 打开解绑弹窗\nconst handleUnbindEmail = () => {\n  showUnbindEmailModal.value = true\n}\n\n// 关闭解绑弹窗\nconst closeUnbindEmailModal = () => {\n  showUnbindEmailModal.value = false\n  unbindEmailForm.value.password = ''\n}\n\n// 确认解绑\nconst confirmUnbindEmail = async () => {\n  try {\n    unbindEmailLoading.value = true\n    const response = await account.unbindEmail({\n      password: unbindEmailForm.value.password\n    })\n    \n    if (response?.data?.message) {\n      closeUnbindEmailModal()\n      // 更新用户信息\n      await userStore.getUserInfo()\n      showToast(response.data.message || '邮箱解绑成功', 'success')\n    }\n  } catch (error) {\n    console.error('邮箱解绑失败:', error)\n    const errorMsg = error.response?.data?.detail || \n                    error.response?.data?.message || \n                    error.message || \n                    '邮箱解绑失败'\n    showToast(errorMsg, 'error')\n  } finally {\n    unbindEmailLoading.value = false\n  }\n}\n\n// 密码强度相关\nconst strengthText = computed(() => {\n  const strength = passwordFormState.value.strength\n  if (strength <= 2) return '弱'\n  if (strength <= 3) return '中'\n  return '强'\n})\n\nconst strengthTextClass = computed(() => {\n  const strength = passwordFormState.value.strength\n  if (strength <= 2) return 'text-red-500'\n  if (strength <= 3) return 'text-yellow-500'\n  return 'text-green-500'\n})\n\nconst strengthColorClass = computed(() => {\n  const strength = passwordFormState.value.strength\n  if (strength <= 2) return 'bg-red-500'\n  if (strength <= 3) return 'bg-yellow-500'\n  return 'bg-green-500'\n})\n\n// 处理密码更新\nconst handlePasswordUpdate = async () => {\n  try {\n    passwordFormState.loading = true\n    const response = await account.updatePassword({\n      old_password: passwordFormState.oldPassword,\n      new_password: passwordFormState.newPassword,\n      confirm_password: passwordFormState.confirmPassword\n    })\n    \n    if (response?.data?.message) {\n      closePasswordModal()\n      showToast(response.data.message || '密码修改成功', 'success')\n    }\n  } catch (error) {\n    console.error('密码修改失败:', error)\n    const errorMsg = error.response?.data?.detail || \n                    error.response?.data?.message || \n                    error.message || \n                    '密码修改失败'\n    showToast(errorMsg, 'error')\n  } finally {\n    passwordFormState.loading = false\n  }\n}\n\n// 修改邮箱表单验证\nconst isEmailFormValid = computed(() => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n  const isValidEmail = emailRegex.test(emailManager.state.value)\n\n  const isValid = emailManager.state.value && \n         emailManager.state.code && \n         emailManager.state.password &&  // 确保密码已输入\n         isValidEmail && \n         emailManager.state.code.length === 6  // 验证码长度验证\n\n  console.log('Email form validation:', {\n    email: emailManager.state.value,\n    code: emailManager.state.code,\n    password: emailManager.state.password,\n    isValidEmail,\n    codeLength: emailManager.state.code.length,\n    isValid\n  })\n\n  return isValid\n})\n\n// 处理邮箱更新\nconst handleEmailUpdate = async () => {\n  console.log('Form state:', {\n    email: emailManager.state.value,\n    code: emailManager.state.code,\n    password: emailManager.state.password,\n    isValid: isEmailFormValid.value\n  })\n\n  if (!isEmailFormValid.value) {\n    showToast('请填写完整信息', 'warning')\n    return\n  }\n\n  try {\n    emailManager.state.loading = true\n    const response = await account.bindEmail({\n      email: emailManager.state.value,\n      code: emailManager.state.code,\n      password: emailManager.state.password\n    })\n\n    if (response?.data?.message) {\n      showToast(response.data.message, 'success')\n      closeEmailModal()\n      // 更新用户信息\n      await userStore.getUserInfo()\n    }\n  } catch (error) {\n    console.error('邮箱更新失败:', error)\n    const errorMsg = error.response?.data?.detail || \n                    error.message || \n                    '邮箱更新失败'\n    showToast(errorMsg, 'error')\n  } finally {\n    emailManager.state.loading = false\n  }\n}\n\n// 修改手机号验证码按钮禁用状态计算\nconst isPhoneCodeButtonDisabled = computed(() => {\n  const phoneRegex = /^1[3-9]\\d{9}$/\n  return phoneManager.state.loading || \n         phoneManager.state.countdown > 0 || \n         !phoneManager.state.value ||\n         !phoneRegex.test(phoneManager.state.value)\n})\n</script>\n\n<style scoped>\n/* No changes to style section */\n</style>\n\n<!-- 密码格式要求提示 -->\n<div class=\"password-requirements text-sm text-gray-500 mt-2\">\n  <p>密码必须满足：</p>\n  <ul class=\"list-disc pl-5 space-y-1\">\n    <li>长度至少8位</li>\n    <li>包含字母</li>\n    <li>包含数字</li>\n  </ul>\n  <p class=\"mt-1\">建议包含（可选）：</p>\n  <ul class=\"list-disc pl-5 space-y-1\">\n    <li>大写字母</li>\n    <li>特殊字符（!@#$%^&*）</li>\n  </ul>\n</div>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}