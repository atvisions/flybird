{"ast":null,"code":"import _objectSpread from \"/Users/liuzhao/Documents/Projects/flybird/flybird-web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\n// Composables\nimport { useProxiedModel } from \"../../../composables/proxiedModel.mjs\"; // Utilities\nimport { computed, inject, provide, ref } from 'vue';\nimport { getObjectValueByPath, propsFactory } from \"../../../util/index.mjs\"; // Types\nexport const makeDataTableGroupProps = propsFactory({\n  groupBy: {\n    type: Array,\n    default: () => []\n  }\n}, 'DataTable-group');\nconst VDataTableGroupSymbol = Symbol.for('vuetify:data-table-group');\nexport function createGroupBy(props) {\n  const groupBy = useProxiedModel(props, 'groupBy');\n  return {\n    groupBy\n  };\n}\nexport function provideGroupBy(options) {\n  const {\n    disableSort,\n    groupBy,\n    sortBy\n  } = options;\n  const opened = ref(new Set());\n  const sortByWithGroups = computed(() => {\n    return groupBy.value.map(val => _objectSpread(_objectSpread({}, val), {}, {\n      order: val.order ?? false\n    })).concat(disableSort?.value ? [] : sortBy.value);\n  });\n  function isGroupOpen(group) {\n    return opened.value.has(group.id);\n  }\n  function toggleGroup(group) {\n    const newOpened = new Set(opened.value);\n    if (!isGroupOpen(group)) newOpened.add(group.id);else newOpened.delete(group.id);\n    opened.value = newOpened;\n  }\n  function extractRows(items) {\n    function dive(group) {\n      const arr = [];\n      for (const item of group.items) {\n        if ('type' in item && item.type === 'group') {\n          arr.push(...dive(item));\n        } else {\n          arr.push(item);\n        }\n      }\n      return arr;\n    }\n    return dive({\n      type: 'group',\n      items,\n      id: 'dummy',\n      key: 'dummy',\n      value: 'dummy',\n      depth: 0\n    });\n  }\n\n  // onBeforeMount(() => {\n  //   for (const key of groupedItems.value.keys()) {\n  //     opened.value.add(key)\n  //   }\n  // })\n\n  const data = {\n    sortByWithGroups,\n    toggleGroup,\n    opened,\n    groupBy,\n    extractRows,\n    isGroupOpen\n  };\n  provide(VDataTableGroupSymbol, data);\n  return data;\n}\nexport function useGroupBy() {\n  const data = inject(VDataTableGroupSymbol);\n  if (!data) throw new Error('Missing group!');\n  return data;\n}\nfunction groupItemsByProperty(items, groupBy) {\n  if (!items.length) return [];\n  const groups = new Map();\n  for (const item of items) {\n    const value = getObjectValueByPath(item.raw, groupBy);\n    if (!groups.has(value)) {\n      groups.set(value, []);\n    }\n    groups.get(value).push(item);\n  }\n  return groups;\n}\nfunction groupItems(items, groupBy) {\n  let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let prefix = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'root';\n  if (!groupBy.length) return [];\n  const groupedItems = groupItemsByProperty(items, groupBy[0]);\n  const groups = [];\n  const rest = groupBy.slice(1);\n  groupedItems.forEach((items, value) => {\n    const key = groupBy[0];\n    const id = `${prefix}_${key}_${value}`;\n    groups.push({\n      depth,\n      id,\n      key,\n      value,\n      items: rest.length ? groupItems(items, rest, depth + 1, id) : items,\n      type: 'group'\n    });\n  });\n  return groups;\n}\nfunction flattenItems(items, opened) {\n  const flatItems = [];\n  for (const item of items) {\n    // TODO: make this better\n    if ('type' in item && item.type === 'group') {\n      if (item.value != null) {\n        flatItems.push(item);\n      }\n      if (opened.has(item.id) || item.value == null) {\n        flatItems.push(...flattenItems(item.items, opened));\n      }\n    } else {\n      flatItems.push(item);\n    }\n  }\n  return flatItems;\n}\nexport function useGroupedItems(items, groupBy, opened) {\n  const flatItems = computed(() => {\n    if (!groupBy.value.length) return items.value;\n    const groupedItems = groupItems(items.value, groupBy.value.map(item => item.key));\n    return flattenItems(groupedItems, opened.value);\n  });\n  return {\n    flatItems\n  };\n}","map":{"version":3,"names":["useProxiedModel","computed","inject","provide","ref","getObjectValueByPath","propsFactory","makeDataTableGroupProps","groupBy","type","Array","default","VDataTableGroupSymbol","Symbol","for","createGroupBy","props","provideGroupBy","options","disableSort","sortBy","opened","Set","sortByWithGroups","value","map","val","_objectSpread","order","concat","isGroupOpen","group","has","id","toggleGroup","newOpened","add","delete","extractRows","items","dive","arr","item","push","key","depth","data","useGroupBy","Error","groupItemsByProperty","length","groups","Map","raw","set","get","groupItems","arguments","undefined","prefix","groupedItems","rest","slice","forEach","flattenItems","flatItems","useGroupedItems"],"sources":["../../../../src/components/VDataTable/composables/group.ts"],"sourcesContent":["// Composables\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, inject, provide, ref } from 'vue'\nimport { getObjectValueByPath, propsFactory } from '@/util'\n\n// Types\nimport type { InjectionKey, PropType, Ref } from 'vue'\nimport type { SortItem } from './sort'\nimport type { DataTableItem } from '../types'\n\nexport interface GroupableItem<T = any> {\n  type: 'item'\n  raw: T\n}\n\nexport interface Group<T = any> {\n  type: 'group'\n  depth: number\n  id: string\n  key: string\n  value: any\n  items: readonly (T | Group<T>)[]\n}\n\nexport const makeDataTableGroupProps = propsFactory({\n  groupBy: {\n    type: Array as PropType<readonly SortItem[]>,\n    default: () => ([]),\n  },\n}, 'DataTable-group')\n\nconst VDataTableGroupSymbol: InjectionKey<{\n  opened: Ref<Set<string>>\n  toggleGroup: (group: Group) => void\n  isGroupOpen: (group: Group) => boolean\n  sortByWithGroups: Ref<SortItem[]>\n  groupBy: Ref<readonly SortItem[]>\n  extractRows: (items: (DataTableItem | Group<DataTableItem>)[]) => DataTableItem[]\n}> = Symbol.for('vuetify:data-table-group')\n\ntype GroupProps = {\n  groupBy: readonly SortItem[]\n  'onUpdate:groupBy': ((value: SortItem[]) => void) | undefined\n}\n\nexport function createGroupBy (props: GroupProps) {\n  const groupBy = useProxiedModel(props, 'groupBy')\n\n  return { groupBy }\n}\n\nexport function provideGroupBy (options: {\n  groupBy: Ref<readonly SortItem[]>\n  sortBy: Ref<readonly SortItem[]>\n  disableSort?: Ref<boolean>\n}) {\n  const { disableSort, groupBy, sortBy } = options\n  const opened = ref(new Set<string>())\n\n  const sortByWithGroups = computed(() => {\n    return groupBy.value.map<SortItem>(val => ({\n      ...val,\n      order: val.order ?? false,\n    })).concat(disableSort?.value ? [] : sortBy.value)\n  })\n\n  function isGroupOpen (group: Group) {\n    return opened.value.has(group.id)\n  }\n\n  function toggleGroup (group: Group) {\n    const newOpened = new Set(opened.value)\n    if (!isGroupOpen(group)) newOpened.add(group.id)\n    else newOpened.delete(group.id)\n\n    opened.value = newOpened\n  }\n\n  function extractRows <T extends GroupableItem> (items: readonly (T | Group<T>)[]) {\n    function dive (group: Group<T>): T[] {\n      const arr = []\n\n      for (const item of group.items) {\n        if ('type' in item && item.type === 'group') {\n          arr.push(...dive(item))\n        } else {\n          arr.push(item as T)\n        }\n      }\n\n      return arr\n    }\n    return dive({ type: 'group', items, id: 'dummy', key: 'dummy', value: 'dummy', depth: 0 })\n  }\n\n  // onBeforeMount(() => {\n  //   for (const key of groupedItems.value.keys()) {\n  //     opened.value.add(key)\n  //   }\n  // })\n\n  const data = { sortByWithGroups, toggleGroup, opened, groupBy, extractRows, isGroupOpen }\n\n  provide(VDataTableGroupSymbol, data)\n\n  return data\n}\n\nexport function useGroupBy () {\n  const data = inject(VDataTableGroupSymbol)\n\n  if (!data) throw new Error('Missing group!')\n\n  return data\n}\n\nfunction groupItemsByProperty <T extends GroupableItem> (items: readonly T[], groupBy: string) {\n  if (!items.length) return []\n\n  const groups = new Map<any, T[]>()\n  for (const item of items) {\n    const value = getObjectValueByPath(item.raw, groupBy)\n\n    if (!groups.has(value)) {\n      groups.set(value, [])\n    }\n    groups.get(value)!.push(item)\n  }\n\n  return groups\n}\n\nfunction groupItems <T extends GroupableItem> (items: readonly T[], groupBy: readonly string[], depth = 0, prefix = 'root') {\n  if (!groupBy.length) return []\n\n  const groupedItems = groupItemsByProperty(items, groupBy[0])\n  const groups: Group<T>[] = []\n\n  const rest = groupBy.slice(1)\n  groupedItems.forEach((items, value) => {\n    const key = groupBy[0]\n    const id = `${prefix}_${key}_${value}`\n    groups.push({\n      depth,\n      id,\n      key,\n      value,\n      items: rest.length ? groupItems(items, rest, depth + 1, id) : items,\n      type: 'group',\n    })\n  })\n\n  return groups\n}\n\nfunction flattenItems <T extends GroupableItem> (items: readonly (T | Group<T>)[], opened: Set<string>): readonly (T | Group<T>)[] {\n  const flatItems: (T | Group<T>)[] = []\n\n  for (const item of items) {\n    // TODO: make this better\n    if ('type' in item && item.type === 'group') {\n      if (item.value != null) {\n        flatItems.push(item)\n      }\n\n      if (opened.has(item.id) || item.value == null) {\n        flatItems.push(...flattenItems(item.items, opened))\n      }\n    } else {\n      flatItems.push(item)\n    }\n  }\n\n  return flatItems\n}\n\nexport function useGroupedItems <T extends GroupableItem> (\n  items: Ref<T[]>,\n  groupBy: Ref<readonly SortItem[]>,\n  opened: Ref<Set<string>>\n) {\n  const flatItems = computed(() => {\n    if (!groupBy.value.length) return items.value\n\n    const groupedItems = groupItems(items.value, groupBy.value.map(item => item.key))\n\n    return flattenItems(groupedItems, opened.value)\n  })\n\n  return { flatItems }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}